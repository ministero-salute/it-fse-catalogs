map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/ErogazioneSpecialistica" = "ErogazioneSpecialistica"

conceptmap "OBSstatus" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
prefix t = "http://hl7.org/fhir/observation-status"

s:completed == t:final
s:active == t:registered
s:aborted == t:cancelled
s:suspended == t:partial
}
conceptmap "MedicationStatusMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/CodeSystem/medicationrequest-status"
    
    s:completed == t:completed
    s:active == t:active
    s:aborted == t:cancelled
    s:suspended == t:"on-hold"
    }
conceptmap "cm-v3-administrative-gender" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

s:M == t:male
s:F == t:female
}

conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}


conceptmap "ClinicalStatusMap" {
    prefix s = "https://loinc.org/99493-9/"
    prefix t = "http://terminology.hl7.org/CodeSystem/condition-clinical"

    s: "LA16666-2" == t: active
    s: "LA18632-2" == t: inactive
    s: "LA9041-0" == t: resolved
}

conceptmap "priority" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-ActPriority"
     prefix t = "http://hl7.org/fhir/ValueSet/request-priority"
   
     s:R == t:routine
     s:P == t:asap
     s:UR == t:urgent
     s:EM == t: stat
   
   }

uses "http://hl7.org/cda/stds/core/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssignedAuthor" alias AssignedAuthor as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssignedEntity" alias AssignedEntity as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssociatedEntity" alias AssociatedEntity as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/CustodianOrganization" alias CustodianOrganization as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Organization" alias rapresentedOrganization as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Section" alias Section as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/PatientRole" alias PatientRole as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as target
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as target
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as target
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as target
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as target
uses "http://hl7.org/cda/stds/core/StructureDefinition/Act" alias Act as target
uses "http://hl7.org/cda/stds/core/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3), request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"recPat";
    }"patient";
    } "ClinicalDocumentToBody";
}


group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('ServiceRequest') as ServiceRequest,  ServiceRequest.id = uuid() as uuid1,  e.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' then{
        cda -> ServiceRequest.intent = 'order' "intent";
        cda -> ServiceRequest.status = 'completed' "stats";
        cda-> ServiceRequest.subject =create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";  
    cda.component as component then {
      component.structuredBody as body then {
        body.component as component  then {
           component.section as srcSection then {
          srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, ServiceRequest);       
         } "section";
        } "component";
      }"body";
     };
    }"ServiceRequest";
  }

  group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target ServiceRequest : ServiceRequest) {
    src.title as t -> tgt.title;
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %ServiceRequest.id) "reference"; 
          src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        cda.code where (code='81223-0') then {
          cda.inFulfillmentOf as inFulfillmentOf then{
            inFulfillmentOf.order as order -> bundle.entry as e40,  e40.request = create('BackboneElement') as request, request.method = 'POST', e40.resource = create('ServiceRequest') as serviceRequestA,  serviceRequestA.id = uuid() as uuid1,  e40.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' then {
                order.id -> serviceRequestA.identifier;
                order -> serviceRequestA.status='active'"status";
                order -> serviceRequestA.intent='order'"intent";
                order -> serviceRequestA.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                order -> serviceRequestA.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
                order.code -> serviceRequestA.code;
                order.priorityCode as priorityCode then{
                  priorityCode.code as v -> serviceRequestA.priority = translate(v, '#priority', 'code') "priority";
              }"priorityCode";
            
  //--------------Sezione Erogazione Specialistica------------------------------------------------------------------------------------------------------------------------------------     

        src.code as code where (code='103146-7') or (code='103147-5') then{
          src.id  ->ServiceRequest.identifier; 
          src -> ServiceRequest.status = 'completed' "stats";
          src -> ServiceRequest.intent = 'filler-order' "intent";
          src.entry as entry then {

            entry.observation as observation then {
              observation.code->ServiceRequest.code "code";
              observation.effectiveTime as efftime then {
              efftime-> ServiceRequest.occurrence = create('Timing') as timing then {
                efftime -> timing.repeat as rep then {
                  efftime  where (low.exists()) -> rep.bounds = create('Period') as value then IVLTSPeriod(efftime, value) "valuePeriod";
                 observation.repeatNumber as repeatNumber then {
                  repeatNumber.value as value->rep.count=value "count";
                 }"obrep";
                }"rep";
                  observation.participant as participant-> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Location') as location,  location.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Location/', uuid2), request.url = 'Location', ServiceRequest.locationReference = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) then {
                    participant.participantRole as partRole then{
                        partRole.scopingEntity as scopEnt then{
                          scopEnt.code->location.type;
                      }"scopEnt";
                    }"partRole";
                }"participant";
              }"occurence";
              }"time"; 
              //--------------------------------- EntryRelationship Act_Erogazione -----------------------------------------------------------------------------
               observation.entryRelationship as entryrel then{
                  entryrel.act as act then {
                    act-> ServiceRequest.replaces = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequestA.id) then {
                   act.entryRelationship as entryA then{
                      entryA.observation as obsA then{
                      obsA.code->serviceRequestA.code "code";
                      obsA.effectiveTime as effectiveTime -> serviceRequestA.authoredOn = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                    
                    }"serviceSostA";
                  }"serviceSost";
                }"actcode";
                }"scopEnt";
               //--------------------------------------- EntryRelationship Obs_BrancaSpecialistica ----------------------------------------------------------------
                entryrel.observation as obs then{
                 obs.templateId where (root='2.16.840.1.113883.3.1937.777.63.10.327') then {
                  obs.code->ServiceRequest.category "code";
                  }"branca";
                }"scopEnt";
               //-------------------------------------------- EntryRelationship Obs_ListaAttesa ------------------------------------------------------------------------------
                entryrel.observation as obs then{
                    obs.templateId where (root='2.16.840.1.113883.3.1937.777.63.10.328') then {
                        obs ->bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Appointment') as obsappointment,  obsappointment.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Appointment/', uuid5), request.url = 'Appointment', ServiceRequest.supportingInfo = create('Reference') as reference,  reference.reference = ('https://example/Appointment/' + %obsappointment.id) then {
                          obs -> obsappointment.status = 'waitlist' "status";
                           obs.code-> obsappointment.appointmentType;
                           obs.effectiveTime as effectiveTime then{
                            effectiveTime.low as low ->obsappointment.created = create('dateTime') as value then TSDateTime(low, value);
                            effectiveTime.low as low ->obsappointment.start = create('dateTime') as value then TSInstant(low, value);
                            effectiveTime.high as high ->obsappointment.end = create('dateTime') as value then TSInstant(high, value);
                           }"effective";
                           obs-> obsappointment.participant as participant then{
                           obs->participant.actor=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                           obs -> participant.status = 'accepted' "status";
                           }"partstat";
                    }"branca";
                  }"scopEnt";
                }"obs";
             } "orderObservation";
           }"entry";
         }"sezione";
       } "inFulfillmentOf";
    }"ServiceRequestA";
  }"txt"; 
 }"controllo"; 
}

