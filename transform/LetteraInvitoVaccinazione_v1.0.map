map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/LetterainvitoVaccinazione" = "LetterainvitoVaccinazione"

conceptmap "OBSstatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/observation-status"

    s:completed == t:final
    s:active == t:registered
    s:aborted == t:cancelled
    s:suspended == t:partial
  }
  conceptmap "cm-v3-administrative-gender" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
    prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"
  
    s:M == t:male
    s:F == t:female
  }
  conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}

uses "http://hl7.org/cda/stds/core/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssignedAuthor" alias AssignedAuthor as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssignedEntity" alias AssignedEntity as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AssociatedEntity" alias AssociatedEntity as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/CustodianOrganization" alias CustodianOrganization as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Organization" alias rapresentedOrganization as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Section" alias Section as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/PatientRole" alias PatientRole as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/Act" alias Act as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/ParticipantRole" alias participantRole as source
uses "http://hl7.org/cda/stds/core/StructureDefinition/PlayingEntity" alias playingEntity as source

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Location" alias Location as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as target
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as target
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as target
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as target
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as target
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as target
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target

imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"recPat";
    }"patient";
   } "ClinicalDocumentToBody";
  }
  
group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Communication') as Communication,  Communication.id = uuid() as uuid1,  e.fullUrl = append('https://example/Comunication/', uuid1), request.url = 'Comunication' then{
      cda.component as component then {
      component.structuredBody as body then {
        body.component as component  then {
           component.section as srcSection then {
          srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, Communication);       
         } "section";
        } "component";
    }"body";
    }"component";
    }"Communication";
  }
  
group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target com : Communication) {
    src.title as t -> tgt.title = (t.xmlText);
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/Communication/' + %com.id) "reference"; 
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        entry then CommunicationFunction(cda, src, entry, com, bundle, enc, patient) "dreport";
    }"entry";
    src where src.entry.exists().not() then  CommunicationFunction(src, cda, com, bundle, enc, patient) "narrative";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, com);
    }"component";
}

group CommunicationFunction(source cda : ClinicalDocument, source section: section, source src: entry, target com: Communication, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
  
    src.encounter as encounter then {
        //-------------------Encounter------------------------------------------------------------------------------------------------------------------
    encounter->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Encounter') as Encounter,  Encounter.id = uuid() as uuid1,  e.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter'  then {
     src-> com.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %Encounter.id) "reference";
     src-> com.status = 'completed'"statcom";
     src-> Encounter.status= 'planned'"encstat";
     src-> Encounter.class = create('Coding') as coding then {
    src ->coding.code ='AMB' "code";
    src ->coding.system= 'http://terminology.hl7.org/CodeSystem/v3-ActCode' "codeS";
    src ->coding.display= 'ambulatory' "display";
   }"NonCodeclass";
     //-----------------------Appointment----------------------------------------------------------------------------------------------------------------
     src-> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Appointment') as appointment,  appointment.id = uuid() as uuid1,  e.fullUrl = append('https://example/Appointment/', uuid1), request.url = 'Appointment'  then {
      encounter.effectiveTime as effectiveTime -> appointment.start = create('instant') as value then TSInstant(effectiveTime, value);
      encounter.effectiveTime as effectiveTime -> appointment.end = create('instant') as value then TSInstant(effectiveTime, value);
      encounter -> appointment.status = 'proposed'"appointmentstat";
      encounter -> appointment.participant as participant then{
      encounter -> participant.actor = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference"; 
      encounter -> participant.status='tentative'"partstat";
      }"participant";
      encounter->Encounter.appointment = create('Reference') as reference,  reference.reference = ('https://example/Appointment/' + %appointment.id) "reference";
       //--------------------Location----------------------------------------------------------------------------------------------------------------------
       
      encounter.participant as participant where (typeCode='LOC') then {
      participant -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT',  e.resource = create('Location') as Location then {
      participant->Encounter.location as loc then {
      participant.participantRole as participantRole then{
             participantRole.playingEntity as playingEntity then{
                playingEntity.name as v then {
                  v.item as t-> Location.name=(t.xmlText);
                }"nameloc";
             }"Pentity";
              encounter.entryRelationship as entryRel then {
              entryRel.observation as obs then {
                obs.text as text then{
                  text.reference as t-> Location.description = create('string') as textNote then EDstring(t,textNote) "note";
                }"ref";
              }"obs";
             }"entryRel";
                participantRole.addr->Location.address;
                participantRole.telecom->Location.telecom;
                participantRole.id as id -> Location.identifier as identifier then {
                  id.root as r ->identifier.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext-> identifier.value = ext then {
                  participantRole-> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
                 id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                 id.root as r then {
                 id.extension as ext  -> Location.id =(r +'-'+ ext) as uuid1,  e.fullUrl = append('https://example/Location/', uuid1), loc.location = create('Reference') as reference, reference.reference = ('https://example/Location/' + %Location.id)"locc";
                     }"r" ; 
                  }"identifier";
                }"pEntity";
             }"prole";
          }"loctext";
        }"participant";
      }"Location"; 
     }"comunication";
   }"encounter2";

   src.act as act then {
    act.code as actcode where ((code= '55107-7').exists().not()) then {
      act.code->com.reasonCode "rcode";
    }"actcode";
     act.text as text then{
        text-> com.note as note then{
        text.reference as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
        }"note";       
      }"ref";
     act.entryRelationship as entry then {
       entry-> com.payload as payload then {
       entry->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('ImmunizationRecommendation') as ImmunizationRecommendation,  ImmunizationRecommendation.id = uuid() as uuid1,  e.fullUrl = append('https://example/ImmunizationRecommendation/', uuid1), request.url = 'ImmunizationRecommendation'  then {
       entry.observation as observation then {
       observation -> payload.content = create('Reference') as reference,  reference.reference = ('https://example/ImmunizationRecommendation/' + %ImmunizationRecommendation.id) "reference";
      cda.effectiveTime -> ImmunizationRecommendation.date  "date";
       observation -> ImmunizationRecommendation.recommendation as recommendation then {
       observation.value -> recommendation.targetDisease "valecode";
       observation->recommendation.forecastStatus = create('CodeableConcept') as ce then {
        observation -> ce.coding as coding then {
        observation -> coding.code = 'due' "code";
        observation -> coding.system = 'http://terminology.hl7.org/CodeSystem/immunization-recommendation-status' "system";
        observation -> coding.display = 'Due' "display";
        } "code";
        }"coding";
       observation -> ImmunizationRecommendation.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        observation.entryRelationship as obsentry then {
          obsentry.observation as obs then {
            obs.value as v -> recommendation.doseNumber = create('positiveInt') as numerodose then INT(v,numerodose) "dosenumber";
          }"obs";
        }"obsentry";
       }"malattia"; 
      }"obser";
       }"payload";
      }"obs";
     }"entry";
      act.code as actcode where (code = '55107-7') then {
       act.reference as ref then{
        ref.externalDocument as extD then{
          extD.id as id then  {
            id.extension as ext ->  com.inResponseTo as inrespto,  inrespto.display = ext "idrifprec";
          }"extid";
        }"extD";
       }"reference";
     }"actcode";
    }"act";
}