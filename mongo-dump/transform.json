[{"_id": {"$oid": "6537f43ebe0517258e7dfb8f"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes", "version": "2.3", "content": {"$binary": {"base64": "bWFwICJodHRwOi8vc2FsdXRlLmdvdi5pdC9pZy9jZGEtZmhpci1tYXBzL1N0cnVjdHVyZU1hcC9DZGFUb0ZoaXJEYXRhVHlwZXMiID0gIkNkYVRvRmhpckRhdGFUeXBlcyINCg0KY29uY2VwdG1hcCAiYWRkcmVzc1VzZSIgew0KICBwcmVmaXggcyA9ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My1BZGRyZXNzVXNlIg0KICBwcmVmaXggdCA9ICJodHRwOi8vaGw3Lm9yZy9maGlyL2FkZHJlc3MtdXNlIg0KDQogIHM6SCA9PSB0OmhvbWUNCiAgczpIUCA9PSB0OmhvbWUNCiAgczpIViA9PSB0OmhvbWUNCiAgczpXUCA9PSB0OndvcmsNCiAgczpESVIgPT0gdDp3b3JrDQogIHM6UFVCID09IHQ6d29yaw0KICBzOlRNUCA9PSB0OnRlbXANCiAgczpPTEQgPT0gdDpvbGQNCiAgczpCQUQgPT0gdDpvbGQNCn0NCg0KdXNlcyAiaHR0cDovL2hsNy5vcmcvY2RhL3N0ZHMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VEIiBhbGlhcyBFRCBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9JTlQiIGFsaWFzIElOVCBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9JSSIgYWxpYXMgSUkgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vSWRlbnRpZmllciIgYWxpYXMgSWRlbnRpZmllciBhcyB0YXJnZXQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9UUyIgYWxpYXMgVFMgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vaW5zdGFudCIgYWxpYXMgaW5zdGFuYXQgYXMgdGFyZ2V0DQp1c2VzICJodHRwOi8vaGw3Lm9yZy9jZGEvc3Rkcy9jb3JlL1N0cnVjdHVyZURlZmluaXRpb24vQ1MiIGFsaWFzIENTIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUiIGFsaWFzIGNvZGUgYXMgdGFyZ2V0DQp1c2VzICJodHRwOi8vaGw3Lm9yZy9jZGEvc3Rkcy9jb3JlL1N0cnVjdHVyZURlZmluaXRpb24vQ0UiIGFsaWFzIENFIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvY2RhL3N0ZHMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NEIiBhbGlhcyBDRCBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Db2RlYWJsZUNvbmNlcHQiIGFsaWFzIENvZGVhYmxlQ29uY2VwdCBhcyB0YXJnZXQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9TVCIgYWxpYXMgU1QgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vc3RyaW5nIiBhbGlhcyBzdHJpbmcgYXMgdGFyZ2V0DQp1c2VzICJodHRwOi8vaGw3Lm9yZy9jZGEvc3Rkcy9jb3JlL1N0cnVjdHVyZURlZmluaXRpb24vRU4iIGFsaWFzIEVOIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvY2RhL3N0ZHMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BOIiBhbGlhcyBQTiBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9IdW1hbk5hbWUiIGFsaWFzIEh1bWFuTmFtZSBhcyB0YXJnZXQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9BRCIgYWxpYXMgQUQgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vQWRkcmVzcyIgYWxpYXMgQWRkcmVzcyBhcyB0YXJnZXQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9URUwiIGFsaWFzIFRFTCBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Db250YWN0UG9pbnQiIGFsaWFzIENvbnRhY3RQb2ludCBhcyB0YXJnZXQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9SVE8tUFEtUFEiIGFsaWFzIFJUT19QUV9QUSBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9QUSIgYWxpYXMgUFEgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9jZGEvc3Rkcy9jb3JlL1N0cnVjdHVyZURlZmluaXRpb24vT04iIGFsaWFzIE9OIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2Jvb2xlYW4iIGFsaWFzIGJvb2VsYW4gYXMgdGFyZ2V0DQp1c2VzICJodHRwOi8vaGw3Lm9yZy9jZGEvc3Rkcy9jb3JlL1N0cnVjdHVyZURlZmluaXRpb24vVFMiIGFsaWFzIFRTIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvY2RhL3N0ZHMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0lWTC1UUyIgYWxpYXMgSVZMX1RTIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BlcmlvZCIgYWxpYXMgUGVyaW9kIGFzIHRhcmdldA0KDQpncm91cCBBbnkoc291cmNlIHNyYywgdGFyZ2V0IHRndCkgew0KfQ0KDQpncm91cCBJSShzb3VyY2Ugc3JjIDogSUksIHRhcmdldCB0Z3QgOiBJZGVudGlmaWVyKSBleHRlbmRzIEFueSA8PHR5cGVzPj4gew0KICBzcmMucm9vdCBhcyByIHdoZXJlIHNyYy5leHRlbnNpb24uZXhpc3RzKCkgLT4gdGd0LnN5c3RlbSA9IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICBzcmMucm9vdCBhcyByIHdoZXJlIHNyYy5leHRlbnNpb24uZW1wdHkoKSBhbmQgc3JjLnJvb3QubWF0Y2hlcygnWzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JykgLT4gIHRndC5zeXN0ZW0gPSAndXJuOmlldGY6cmZjOjM5ODYnLCAgdGd0LnZhbHVlID0gKCd1cm46dXVpZDonICsgci5sb3dlcigpKSAicm9vdHV1aWQiOw0KICBzcmMucm9vdCBhcyByIHdoZXJlIHNyYy5leHRlbnNpb24uZW1wdHkoKSBhbmQgc3JjLnJvb3QuY29udGFpbnMoJy4nKSAtPiAgdGd0LnN5c3RlbSA9ICd1cm46aWV0ZjpyZmM6Mzk4NicsICB0Z3QudmFsdWUgPSBhcHBlbmQoJ3VybjpvaWQ6JywgcikgInJvb3RvaWQiOw0KICBzcmMuZXh0ZW5zaW9uIGFzIGUgLT4gdGd0LnZhbHVlID0gZTsNCiAgc3JjLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgdGd0LmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOw0KfQ0KDQpncm91cCBJTlQoc291cmNlIHNyYyA6IElOVCwgdGFyZ2V0IHRndCA6IGludGVnZXIpIGV4dGVuZHMgQW55IDw8dHlwZXM+PiB7DQogIHNyYy52YWx1ZSBhcyB2IC0+IHRndC52YWx1ZSA9IGNhc3QodiwgJ3N0cmluZycpICJ2YWx1ZUlOVCI7DQp9DQoNCmdyb3VwIFRlbXBsYXRlSUQoc291cmNlIHRlbXBsYXRlIDogSUksIHRhcmdldCB0Z3QpIHsNCiAgdGVtcGxhdGUgLT4gdGd0LmV4dGVuc2lvbiBhcyBleHQgdGhlbiB7DQogICAgdGVtcGxhdGUgLT4gZXh0LnVybCA9ICdodHRwOi8vaGw3Lm9yZy9jZGEvc3Rkcy9jb3JlL1N0cnVjdHVyZURlZmluaXRpb24vdGVtcGxhdGVJRCcgInVybCI7DQogICAgdGVtcGxhdGUgLT4gZXh0LnZhbHVlID0gY3JlYXRlKCdJZGVudGlmaWVyJykgYXMgdmFsdWUgdGhlbiBJSSh0ZW1wbGF0ZSwgdmFsdWUpICJ2YWx1ZVRlbXBsYXRlSUQiOw0KICB9ICJ0ZW1wbGF0ZUlkIjsNCn0NCg0KZ3JvdXAgTmVnYXRpb24oc291cmNlIG5lZ2F0aW9uIDogQkwsIHRhcmdldCB0Z3QpIHsNCiAgbmVnYXRpb24gLT4gdGd0Lm1vZGlmaWVyRXh0ZW5zaW9uIGFzIGV4dCB0aGVuIHsNCiAgICBuZWdhdGlvbiAtPiBleHQudXJsID0gJ2h0dHA6Ly9obDcub3JnL2NkYS9zdGRzL2NvcmUvU3RydWN0dXJlRGVmaW5pdGlvbi9uZWdhdGlvbkluZGljYXRvcicgInVybCI7DQogICAgbmVnYXRpb24gYXMgbmVnIC0+ICBleHQudmFsdWUgPSBjcmVhdGUoJ2Jvb2xlYW4nKSwgIGV4dC52YWx1ZSA9IG5lZyAidmFsdWVOZWdhdGlvbiI7DQogIH0gIm5lZ2F0aW9uIjsNCn0NCg0KZ3JvdXAgVFNJbnN0YW50KHNvdXJjZSBzcmMgOiBUUywgdGFyZ2V0IHRndCA6IGluc3RhbnQpIGV4dGVuZHMgQW55IDw8dHlwZXM+PiB7DQogIHNyYy52YWx1ZSBhcyB2IC0+IHRndC52YWx1ZSA9IGNhc3QodiwgJ3N0cmluZycpOw0KfQ0KDQpncm91cCBUU0RhdGVUaW1lKHNvdXJjZSBzcmMgOiBUUywgdGFyZ2V0IHRndCA6IGRhdGVUaW1lKSBleHRlbmRzIFRTSW5zdGFudCA8PHR5cGVzPj4gew0KICANCiAgc3JjICB3aGVyZSh2YWx1ZS5jb250YWlucygnKycpKSB0aGVuew0KICAgIHNyYy52YWx1ZSBhcyB2IC0+IHRndC52YWx1ZSA9IGNhc3QodiwgJ3N0cmluZycpOw0KICB9ImVmZiI7ICANCg0KICBzcmMgIHdoZXJlKHZhbHVlLmNvbnRhaW5zKCctJykpIHRoZW57DQogICAgc3JjLnZhbHVlIGFzIHYgLT4gdGd0LnZhbHVlID0gY2FzdCh2LCAnc3RyaW5nJyk7DQogIH0iZWZmIjsgIA0KDQogIHNyYy52YWx1ZSAgd2hlcmUodmFsdWUubWF0Y2hlcygnXlxcZHs0fShcXC1cXGR7Mn0pezJ9VFxcZHsyfSg6XFxkezJ9KXsyfSQnKSkgdGhlbnsNCiAgICBzcmMudmFsdWUgYXMgdiAgLT4gdGd0LnZhbHVlID0gYXBwZW5kKHYsJ1onKSAiZGF0ZSI7DQogIH0iZWZmIjsgICAgDQoNCn0NCg0KZ3JvdXAgVFNEYXRlKHNvdXJjZSBzcmMgOiBUUywgdGFyZ2V0IHRndCA6IGRhdGUpIGV4dGVuZHMgVFNJbnN0YW50IDw8dHlwZXM+PiB7DQp9DQoNCmdyb3VwIElWTFRTUGVyaW9kKHNvdXJjZSBzcmMgOiBJVkxfVFMsIHRhcmdldCB0Z3QgOiBQZXJpb2QpIGV4dGVuZHMgQW55IDw8dHlwZXM+PiB7DQogIHNyYy5sb3cgYXMgbCAtPiB0Z3Quc3RhcnQ9Y3JlYXRlKCdkYXRlVGltZScpIGFzIHN0YXJ0IHRoZW4gVFNEYXRlVGltZShsLHN0YXJ0KSA7DQogICANCiAgc3JjLmhpZ2ggYXMgaCAtPiB0Z3QuZW5kPWNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBlbmQgdGhlbiBUU0RhdGVUaW1lKGgsZW5kKSA7DQogIA0KIA0KfQ0KDQpncm91cCBJVkxUU0RhdGVUaW1lKHNvdXJjZSBzcmMgOiBJVkxfVFMsIHRhcmdldCB0Z3QgOiBkYXRlVGltZSkgZXh0ZW5kcyBBbnkgPDx0eXBlcz4+IHsNCiAgc3JjLmxvdyBhcyBzIHRoZW4gVFNEYXRlVGltZShzLCB0Z3QpOw0KfQ0KDQpncm91cCBTVHN0cmluZyhzb3VyY2Ugc3JjIDogU1QsIHRhcmdldCB0Z3QgOiBzdHJpbmcpIGV4dGVuZHMgQW55IDw8dHlwZXM+PiB7DQogIHNyYyBhcyB2IC0+IHRndC52YWx1ZSA9IGNhc3QodiwgJ3N0cmluZycpICJ2YWx1ZVNUIjsNCn0NCg0KZ3JvdXAgRURzdHJpbmcoc291cmNlIHNyYyA6IEVELCB0YXJnZXQgdGd0IDogc3RyaW5nKSBleHRlbmRzIFNUc3RyaW5nIDw8dHlwZXM+PiB7DQogICAgfQ0KDQoNCmdyb3VwIElOVHN0cmluZyhzb3VyY2Ugc3JjIDogSU5ULCB0YXJnZXQgdGd0IDogc3RyaW5nKSBleHRlbmRzIFNUc3RyaW5nIDw8dHlwZXM+PiB7DQp9DQpncm91cCBPTnN0cmluZyhzb3VyY2Ugc3JjIDogT04sIHRhcmdldCB0Z3QgOiBzdHJpbmcpIGV4dGVuZHMgU1RzdHJpbmcgPDx0eXBlcz4+IHsNCn0NCg0KZ3JvdXAgQ1NDb2RlKHNvdXJjZSBzcmMgOiBDUywgdGFyZ2V0IHRndCA6IGNvZGUpIGV4dGVuZHMgQW55IDw8dHlwZXM+PiB7DQogIHNyYy5jb2RlIGFzIGMgLT4gdGd0LnZhbHVlID0gY2FzdChjLCAnc3RyaW5nJyk7DQp9DQoNCmdyb3VwIENFQ29kZShzb3VyY2Ugc3JjIDogQ0UsIHRhcmdldCB0Z3QgOiBjb2RlKSBleHRlbmRzIENTQ29kZSA8PHR5cGVzPj4gew0KfQ0KDQpncm91cCBDRENvZGUoc291cmNlIHNyYyA6IENELCB0YXJnZXQgdGd0IDogY29kZSkgZXh0ZW5kcyBDU0NvZGUgPDx0eXBlcz4+IHsNCn0NCg0KZ3JvdXAgQ0VDb2RlYWJsZUNvbmNlcHQoc291cmNlIHNyYyA6IENFLCB0YXJnZXQgdGd0IDogQ29kZWFibGVDb25jZXB0KSBleHRlbmRzIEFueSA8PHR5cGVzPj4gew0KICBzcmMub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgIG9yaWdpbmFsVGV4dC5yZWZlcmVuY2UgYXMgcmVmZXJlbmNlLT4gdGd0LnRleHQ9IChyZWZlcmVuY2UudmFsdWUpOw0KICB9Im9yaWdpbmx0ZXh0IjsNCiAgc3JjIC0+IHRndC5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgIHNyYy5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICBzcmMuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgIHNyYy5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgc3JjLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgfSAiY29kZSI7DQogIHNyYy50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiB0Z3QuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICB0cmFuc2xhdGlvbi5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgdHJhbnNsYXRpb24uZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCgl0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgcXVhbGlmaWVyLm5hbWUgYXMgbmFtZSAtPiB0Z3QuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgIG5hbWUuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgbmFtZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgbmFtZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgbmFtZS5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICB9ICJuYW1lIjsNCglxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gdGd0LmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQoJIHZhbHVlLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgdmFsdWUuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KCSB9ICJ2YWx1ZSI7DQoJfTsNCiAgfSAidHJhbnNsYXRpb24iOw0KfQ0KDQpncm91cCBDU0NvZGVhYmxlQ29uY2VwdChzb3VyY2Ugc3JjIDogQ1MsIHRhcmdldCB0Z3QgOiBDb2RlYWJsZUNvbmNlcHQpIGV4dGVuZHMgQ0VDb2RlYWJsZUNvbmNlcHQgPDx0eXBlcz4+IHsNCn0NCg0KZ3JvdXAgQ0RDb2RlYWJsZUNvbmNlcHQoc291cmNlIHNyYyA6IENELCB0YXJnZXQgdGd0IDogQ29kZWFibGVDb25jZXB0KSBleHRlbmRzIENFQ29kZWFibGVDb25jZXB0IDw8dHlwZXM+PiB7DQp9DQoNCmdyb3VwIEVOSHVtYW5OYW1lKHNvdXJjZSBzcmMgOiBFTiwgdGFyZ2V0IHRndCA6IEh1bWFuTmFtZSkgZXh0ZW5kcyBBbnkgPDx0eXBlcz4+IHsNCiAgc3JjLmZhbWlseSBhcyB2IC0+IHRndC5mYW1pbHkgPSAodi5kYXRhU3RyaW5nKTsNCiAgc3JjLmdpdmVuIGFzIHYgLT4gdGd0LmdpdmVuID0gKHYuZGF0YVN0cmluZyk7DQogIHNyYy5wcmVmaXggYXMgdiAtPiB0Z3QucHJlZml4ID0gKHYuZGF0YVN0cmluZyk7DQogIHNyYy5zdWZmaXggYXMgdiAtPiB0Z3Quc3VmZml4ID0gKHYuZGF0YVN0cmluZyk7DQogIHNyYy52YWxpZFRpbWUgLT4gdGd0LnBlcmlvZDsNCn0NCg0KZ3JvdXAgUE5IdW1hbk5hbWUoc291cmNlIHNyYyA6IFBOLCB0YXJnZXQgdGd0IDogSHVtYW5OYW1lKSBleHRlbmRzIEVOSHVtYW5OYW1lIDw8dHlwZXM+PiB7DQp9DQoNCmdyb3VwIEFEQWRkcmVzcyhzb3VyY2Ugc3JjIDogQUQsIHRhcmdldCB0Z3QgOiBBZGRyZXNzKSBleHRlbmRzIEFueSA8PHR5cGVzPj4gew0KICBzcmMuY291bnRyeSBhcyB2IC0+IHRndC5jb3VudHJ5ID0gKHYuZGF0YVN0cmluZyk7DQogIHNyYy5zdGF0ZSBhcyB2IC0+IHRndC5zdGF0ZSA9ICh2LmRhdGFTdHJpbmcpOw0KICBzcmMuY291bnR5IGFzIHYgLT4gdGd0LmRpc3RyaWN0ID0gKHYuZGF0YVN0cmluZyk7DQogIHNyYy5jaXR5IGFzIHYgLT4gdGd0LmNpdHkgPSAodi5kYXRhU3RyaW5nKTsNCiAgc3JjLnBvc3RhbENvZGUgYXMgdiAtPiB0Z3QucG9zdGFsQ29kZSA9ICh2LmRhdGFTdHJpbmcpOw0KICBzcmMuc3RyZWV0QWRkcmVzc0xpbmUgYXMgdiAtPiB0Z3QubGluZT0odi5kYXRhU3RyaW5nKTsNCiAgIA0KICBzcmMgICAtPiB0Z3QubGluZSAgYXMgbGluZSB0aGVuIHsgDQogICBzcmMgd2hlcmUgc3JjLmNlbnN1c1RyYWN0LmV4aXN0cygpIHRoZW4gew0KICAgIHNyYy5jZW5zdXNUcmFjdCBhcyB2IC0+IGxpbmUuZXh0ZW5zaW9uIGFzIGV4dDEgdGhlbiBDZW5zdXNUcmFjdCh2LCBleHQxKSAibGluZSI7DQogICB9InNmZ2Zkc2ciOw0KICB9ICJDZW5zdXNUcmFjdCI7DQogIHNyYy5zdHJlZXROYW1lIGFzIHYgLT4gdGd0LmxpbmUgPSAodi5kYXRhU3RyaW5nKTsNCiAgc3JjLmhvdXNlTnVtYmVyIGFzIHYgLT4gdGd0LmxpbmUgPSAodi5kYXRhU3RyaW5nKTsNCiAgc3JjLnVzZSBhcyBjIC0+IHRndC51c2UgPSB0cmFuc2xhdGUoYywgJyNhZGRyZXNzVXNlJywgJ2NvZGUnKSAiYWRkcmVzc1VzZSI7DQogIHNyYy51c2VhYmxlUGVyaW9kIC0+IHRndC5wZXJpb2Q7DQp9DQoNCmdyb3VwIFRFTENvbnRhY3RQb2ludChzb3VyY2Ugc3JjIDogVEVMLCB0YXJnZXQgdGd0IDogQ29udGFjdFBvaW50KSBleHRlbmRzIEFueSA8PHR5cGVzPj4gew0KICBzcmMudmFsdWUgYXMgdiB3aGVyZSAoc3JjLnZhbHVlLnN0YXJ0c1dpdGgoJ3RlbDonKSkgLT4gIHRndC52YWx1ZSA9ICh2LnN1YnN0cmluZyg0KSksICB0Z3Quc3lzdGVtID0gJ3Bob25lJyAidmFsdWV0ZWwiOw0KICBzcmMudmFsdWUgYXMgdiB3aGVyZSAoc3JjLnZhbHVlLnN0YXJ0c1dpdGgoJ2ZheDonKSkgLT4gIHRndC52YWx1ZSA9ICh2LnN1YnN0cmluZyg0KSksICB0Z3Quc3lzdGVtID0gJ2ZheCcgInZhbHVlZmF4IjsNCiAgc3JjLnZhbHVlIGFzIHYgd2hlcmUgKHNyYy52YWx1ZS5zdGFydHNXaXRoKCdtYWlsdG86JykpIC0+ICB0Z3QudmFsdWUgPSAodi5zdWJzdHJpbmcoNykpLCAgdGd0LnN5c3RlbSA9ICdlbWFpbCcgInZhbHVlbWFpbCI7DQogIHNyYy52YWx1ZSBhcyB2IHdoZXJlIChzcmMudmFsdWUuc3RhcnRzV2l0aCgnaHR0cDonKSkgLT4gIHRndC52YWx1ZSA9ICh2LnN1YnN0cmluZyg1KSksICB0Z3Quc3lzdGVtID0gJ3VybCcgInZhbHVlaHR0cCI7DQogIHNyYy51c2Ugd2hlcmUgKHNyYy51c2Uuc3RhcnRzV2l0aCgnSCcpKSAtPiB0Z3QudXNlID0gJ2hvbWUnICJ1c2Vob21lIjsNCiAgc3JjLnVzZSB3aGVyZSAoKHNyYy51c2UgPSAnV1AnKSBvciAoc3JjLnVzZSA9ICdESVInKSBvciAoc3JjLnVzZSA9ICdQVUInKSkgLT4gdGd0LnVzZSA9ICd3b3JrJyAidXNld29yayI7DQogIHNyYy51c2Ugd2hlcmUgKHNyYy51c2UgPSAnQkFEJykgLT4gdGd0LnVzZSA9ICdvbGQnICJ1c2ViYWQiOw0KICBzcmMudXNlIHdoZXJlIChzcmMudXNlID0gJ1RNUCcpIC0+IHRndC51c2UgPSAndGVtcCcgInVzZXRtcCI7DQogIHNyYy51c2Ugd2hlcmUgKHNyYy51c2UgPSAnTUMnKSAtPiB0Z3QudXNlID0gJ21vYmlsZScgInVzZW1vYmlsZSI7DQogIHNyYy51c2VhYmxlUGVyaW9kIC0+IHRndC5wZXJpb2Q7DQp9DQoNCmdyb3VwIFBRUXVhbnRpdHkoc291cmNlIHNyYyA6IFBRLCB0YXJnZXQgdGd0IDogUXVhbnRpdHkpIGV4dGVuZHMgQW55IDw8dHlwZXM+PiB7DQogIHNyYy51bml0IGFzIHVuaXQgLT4gdGd0LnVuaXQgPSB1bml0Ow0KICBzcmMudmFsdWUgYXMgdmFsdWUgLT4gdGd0LnZhbHVlID0gdmFsdWU7DQp9DQoNCmdyb3VwIFJUT1BRUFFSYXRpbyhzb3VyY2Ugc3JjIDogUlRPX1BRX1BRLCB0YXJnZXQgdGd0IDogUmF0aW8pIGV4dGVuZHMgQW55IDw8dHlwZXM+PiB7DQogIHNyYy5udW1lcmF0b3IgYXMgbnVtZXJhdG9yIC0+IHRndC5udW1lcmF0b3IgYXMgdGFyZ2V0TnVtZXJhdG9yIHRoZW4gUFFRdWFudGl0eShudW1lcmF0b3IsIHRhcmdldE51bWVyYXRvcik7DQogIHNyYy5kZW5vbWluYXRvciBhcyBkZW5vbWluYXRvciAtPiB0Z3QuZGVub21pbmF0b3IgYXMgdGFyZ2V0RGVub21pbmF0b3IgdGhlbiBQUVF1YW50aXR5KGRlbm9taW5hdG9yLCB0YXJnZXREZW5vbWluYXRvcik7DQp9DQogDQogZ3JvdXAgQ2Vuc3VzVHJhY3Qoc291cmNlIHNyYyA6IFNULCB0YXJnZXQgZXh0IDogRXh0ZW5zaW9uKSB7DQogIHNyYyAtPiBleHQudXJsID0gJ2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9pc28yMTA5MC1BRFhQLWNlbnN1c1RyYWN0JyAidXJsIjsNCiAgICBzcmMtPiAgZXh0LnZhbHVlID0gY3JlYXRlKCdzdHJpbmcnKSwgIGV4dC52YWx1ZSA9IChzcmMuZGF0YVN0cmluZykgInZhbHVlU3RyaW5nIjsNCiAgfSANCg==", "subType": "00"}}, "filename": "CdaToFhirDataTypes_v2.3.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:43:42.679Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f43fbe0517258e7dfb90"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER", "version": "3.5", "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "FULLHEADER_v3.5.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:43:43.813Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f445be0517258e7dfb91"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodiAnatomiaPatologica", "version": "1.0", "template_id_root": ["2.16.840.1.113883.2.9.10.1.8.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "RefertodiAnatomiaPatologica_v1.0.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:43:49.778Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f447be0517258e7dfb92"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/LetteraDimissioneOspedaliera", "version": "2.8", "template_id_root": ["2.16.840.1.113883.2.9.10.1.5"], "content": {"$binary": {"base64": "bWFwICJodHRwOi8vc2FsdXRlLmdvdi5pdC9pZy9jZGEtZmhpci1tYXBzL1N0cnVjdHVyZU1hcC9MZXR0ZXJhRGltaXNzaW9uZU9zcGVkYWxpZXJhIiA9ICJMZXR0ZXJhRGltaXNzaW9uZU9zcGVkYWxpZXJhIg0KDQpjb25jZXB0bWFwICJBbGxlcmd5VHlwZU1hcCIgew0KDQogIHByZWZpeCBzID0gImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL1ZhbHVlU2V0L3YzLXR5cGUiDQoNCiAgcHJlZml4IHQgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hbGxlcmd5aW50b2xlcmFuY2UtY2xpbmljYWwiDQoNCiAgczpPSU5UID09IHQ6aW50b2xlcmFuY2UNCiAgczpBTEcgPT0gdDphbGxlcmd5DQogIHM6REFMRyA9PSB0OmFsbGVyZ3kNCiAgczpFQUxHID09IHQ6YWxsZXJneQ0KICBzOkZBTEcgPT0gdDphbGxlcmd5DQogIHM6TkFJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICBzOkZOQUlOVCA9PSB0OmludG9sZXJhbmNlDQogIHM6RE5BSU5UID09IHQ6aW50b2xlcmFuY2UNCiAgczpFTkFJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICBzOkZJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICBzOkRJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICBzOkVJTlQgPT0gdDppbnRvbGVyYW5jZQ0KfQ0KDQpjb25jZXB0bWFwICJBbGxlcmd5Q2F0ZWdvcnlNYXAiIHsNCg0KICBwcmVmaXggcyA9ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My10eXBlIg0KICBwcmVmaXggdCA9ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FsbGVyZ3lpbnRvbGVyYW5jZS1jbGluaWNhbCINCg0KICBzOkRBTEcgPT0gdDptZWRpY2F0aW9uDQogIHM6RUFMRyA9PSB0OmVudmlyb21lbnQNCiAgczpGQUxHID09IHQ6Zm9vZA0KICBzOkZOQUlOVCA9PSB0OmZvb2QNCiAgczpETkFJTlQgPT0gdDptZWRpY2F0aW9uDQogIHM6RU5BSU5UID09IHQ6ZW52aXJvbWVudA0KICBzOkZJTlQgPT0gdDpmb29kDQogIHM6RElOVCA9PSB0Om1lZGljYXRpb24NCiAgczpFSU5UID09IHQ6ZW52aXJvbWVudA0KfQ0KDQpjb25jZXB0bWFwICJBbGxlcmd5Q3JpdGljYWxpdHkiIHsNCg0KICBwcmVmaXggcyA9ICJodHRwczovL2FydC1kZWNvci5vcmcvYXJ0LWRlY29yL2RlY29yLXZhbHVlc2V0cy0taGw3aXQtP2lkPTIuMTYuODQwLjEuMTEzODgzLjIuOS43Ny4yMi4xMS42Ig0KICBwcmVmaXggdCA9ICJodHRwczovL3d3dy5obDcub3JnL2ZoaXIvY29kZXN5c3RlbS1hbGxlcmd5LWludG9sZXJhbmNlLWNyaXRpY2FsaXR5Lmh0bWwiDQogIA0KICBzOkwgPT0gdDpsb3cNCiAgczpIID09IHQ6aGlnaA0KICBzOk0gPT0gdDp1bmFibGVfdG9fYXNzZXNzDQp9DQoNCg0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9DbGluaWNhbERvY3VtZW50IiBhbGlhcyBDbGluaWNhbERvY3VtZW50IGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Bc3NpZ25lZEF1dGhvciIgYWxpYXMgQXNzaWduZWRBdXRob3IgYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Bc3NpZ25lZEVudGl0eSIgYWxpYXMgQXNzaWduZWRFbnRpdHkgYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Bc3NvY2lhdGVkRW50aXR5IiBhbGlhcyBBc3NvY2lhdGVkRW50aXR5IGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQ3VzdG9kaWFuT3JnYW5pemF0aW9uIiBhbGlhcyBDdXN0b2RpYW5Pcmdhbml6YXRpb24gYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Pcmdhbml6YXRpb25QYXJ0T2YiIGFsaWFzIE9yZ2FuaXphdGlvblBhcnRPZiBhcyBxdWVyaWVkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL09yZ2FuaXphdGlvbiIgYWxpYXMgcmFwcmVzZW50ZWRPcmdhbml6YXRpb24gYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9TZWN0aW9uIiBhbGlhcyBTZWN0aW9uIGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vUGF0aWVudFJvbGUiIGFsaWFzIFBhdGllbnRSb2xlIGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQUQiIGFsaWFzIEFEIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0J1bmRsZSIgYWxpYXMgQnVuZGxlIGFzIHRhcmdldA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NvbXBvc2l0aW9uIiBhbGlhcyBDb21wb3NpdGlvbiBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BhdGllbnQiIGFsaWFzIFBhdGllbnQgYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIiIGFsaWFzIEVuY291bnRlciBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BlcnNvbiIgYWxpYXMgUGF0aWVudCBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1ByYWN0aXRpb25lciIgYWxpYXMgUHJhY3RpdGlvbmVyIGFzIHByb2R1Y2VkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vT3JnYW5pemF0aW9uIiBhbGlhcyBPcmdhbml6YXRpb24gYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQWN0IiBhbGlhcyBBY3QgYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vSVZMLVBRIiBhbGlhcyBJVkxfUFEgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BRIiBhbGlhcyBQUSBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9TaW1wbGVRdWFudGl0eSIgYWxpYXMgU2ltcGxlUXVhbnRpdHkgYXMgdGFyZ2V0DQoNCg0KaW1wb3J0cyAiaHR0cDovL3NhbHV0ZS5nb3YuaXQvaWcvY2RhLWZoaXItbWFwcy9TdHJ1Y3R1cmVNYXAvQ2RhVG9GaGlyRGF0YVR5cGVzIg0KaW1wb3J0cyAiaHR0cDovL3NhbHV0ZS5nb3YuaXQvaWcvY2RhLWZoaXItbWFwcy9TdHJ1Y3R1cmVNYXAvRlVMTEhFQURFUiINCg0KZ3JvdXAgQ2RhVG9CdW5kbGUoc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUpIHsNCiAgY2RhIC0+ICBidW5kbGUuZW50cnkgYXMgZSwgZS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGUucmVzb3VyY2UgPSBjcmVhdGUoJ0NvbXBvc2l0aW9uJykgYXMgY29tcG9zaXRpb24sICBjb21wb3NpdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0NvbXBvc2l0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnQ29tcG9zaXRpb24nLCAgYnVuZGxlLmVudHJ5IGFzIGUyLCBlMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0UEFULCByZXF1ZXN0UEFULm1ldGhvZCA9ICdQVVQnLCBlMi5yZXNvdXJjZSA9IGNyZWF0ZSgnUGF0aWVudCcpIGFzIHBhdGllbnQsICBwYXRpZW50LmlkID0gdXVpZCgpIGFzIHV1aWQyLCAgZTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJywgdXVpZDIpLCBidW5kbGUuZW50cnkgYXMgZTMsIGUzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTMucmVzb3VyY2UgPSBjcmVhdGUoJ0VuY291bnRlcicpIGFzIGVuY291bnRlciwgIGVuY291bnRlci5pZCA9IHV1aWQoKSBhcyB1dWlkMywgIGUzLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJywgdXVpZDMpLHJlcXVlc3QudXJsID0gJ0VuY291bnRlcicsDQogIGJ1bmRsZS5lbnRyeSBhcyBlNSwgZTUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICBlNS5yZXNvdXJjZSA9IGNyZWF0ZSgnRG9jdW1lbnRSZWZlcmVuY2UnKSBhcyBEb2N1bWVudFJlZmVyZW5jZSwgIERvY3VtZW50UmVmZXJlbmNlLmlkID0gdXVpZCgpIGFzIHV1aWQ1LCAgZTUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0RvY3VtZW50UmVmZXJlbmNlLycsIHV1aWQ1KSwgcmVxdWVzdC51cmwgPSAnRG9jdW1lbnRSZWZlcmVuY2UnIHRoZW4gew0KICBjZGEgdGhlbiBDbGluaWNhbERvY3VtZW50VG9CdW5kbGUoY2RhLCBwYXRpZW50LCBjb21wb3NpdGlvbiwgZW5jb3VudGVyLCBidW5kbGUsIERvY3VtZW50UmVmZXJlbmNlKSAiY2RhdG9idW5kbGUiOw0KICAgY2RhLnJlY29yZFRhcmdldCBhcyByZWNvcmRUYXJnZXQgdGhlbnsNCiAgICByZWNvcmRUYXJnZXQucGF0aWVudFJvbGUgYXMgcGF0aWVudCB0aGVuew0KICAgICAgcGF0aWVudC5pZCBhcyBpZCAtPiBwYXRpZW50LmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7DQogICAgICB9InJlY29yZCI7DQogICAgICBwYXRpZW50LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSBvciAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy43JykNCiAgICAgIG9yIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjMnKSBvcihyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjE3JykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMTgnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMC40LjEuMScpDQogICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4yMC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjMwLjQuMS4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjQxLjQuMS4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjQyLjQuMS4xJykNCiAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjUwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNjAuNC4xLjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNzAuNC4xLjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuODAuNC4xLjEnKQ0KICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuOTAuNC4xLjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMDAuNC4xLjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMTAuNC4xLjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMjAuNC4xLjEnKQ0KICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTMwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTQwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTUwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTYwLjQuMS4xJykNCiAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE3MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE4MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE5MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjIwMC40LjEuMScpDQogICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMC40LjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4yMC40LjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4zMC40LjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi40MS40LjEnKQ0KICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNDIuNC4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNTAuNC4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNjAuNC4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNzAuNC4xJykNCiAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjgwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjkwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwMC40LjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMTAuNC4xJykNCiAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEyMC40LjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTMwLjQuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xNDAuNC4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE1MC40LjEnKQ0KICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTYwLjQuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xNzAuNC4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE4MC40LjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTkwLjQuMScpDQogICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4yMDAuNC4xJykgb3IgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMTUnKSAgdGhlbiB7DQogICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcmVxdWVzdFBBVC51cmwgPSBhcHBlbmQoJ1BhdGllbnQ/aWRlbnRpZmllcj0nLGV4dCkgIlVVSUQiOw0KICAgICAgICB9ImV4dCI7DQogICAgfSJyZWNQYXQiOw0KICAgfSJwYXRpZW50IjsNCiB9ICJDbGluaWNhbERvY3VtZW50VG9Cb2R5IjsNCn0NCg0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFRvQnVuZGxlKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQsIHRhcmdldCBjb21wb3NpdGlvbiA6IENvbXBvc2l0aW9uLCB0YXJnZXQgZW5jb3VudGVyIDogRW5jb3VudGVyLCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgRG9jdW1lbnRSZWZlcmVuY2UgOiBEb2N1bWVudFJlZmVyZW5jZSkgew0KICBjZGEgLT4gYnVuZGxlLmlkID0gdXVpZCgpICJpZCI7DQogIGNkYS5pZCAtPiBidW5kbGUuaWRlbnRpZmllciAiaWRlbnRpZmllciI7DQogIGNkYSAtPiBidW5kbGUudHlwZSA9ICd0cmFuc2FjdGlvbicgInR5cGUiOw0KICBjZGEgLT4gYnVuZGxlLnRpbWVzdGFtcD0odGltZXN0YW1wLm5vdygpKSAiZGF0ZSI7DQogIGNkYSB0aGVuIENsaW5pY2FsRG9jdW1lbnRDb21wb3NpdGlvbihjZGEsIGNvbXBvc2l0aW9uLCBwYXRpZW50LCBlbmNvdW50ZXIsIGJ1bmRsZSwgRG9jdW1lbnRSZWZlcmVuY2UpICJjb21wb3NpdGlvbiI7ICANCiAgY2RhLmNvbXBvbmVudCBhcyBjb21wb25lbnQgdGhlbiB7DQogICAgY29tcG9uZW50LnN0cnVjdHVyZWRCb2R5IGFzIGJvZHkgdGhlbiB7DQogICAgICBib2R5LmNvbXBvbmVudCBhcyBjb21wb25lbnQgIHRoZW4gew0KICAgICAgIC8vcHJpbW8gbGl2ZWxsbyBkaSBjb21wb25lbnQgDQoJICAgICBjb21wb25lbnQuc2VjdGlvbiBhcyBzcmNTZWN0aW9uIHRoZW4gew0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc0NjI0MS02JykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uTW90aXZvUmljb3Zlcm8oY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAibW90aXZvUmljb3Zlcm8iOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc0NzAzOS0zJykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uSW5xdWFkcmFtZW50b0NsaW5pY28oY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiaW5xdWFkcmFtZW50b0NsaW5pY28iOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc4NjQ4LTgnKSAgLT4gIGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBDbGluaWNhbERvY3VtZW50U2VjdGlvbkRlY29yc29Pc3BlZGFsaWVybyhjZGEsIHNyY1NlY3Rpb24sIHBhdGllbnQsIHRndFNlY3Rpb24sIGJ1bmRsZSxlbmNvdW50ZXIpICJEZWNvcnNvT3NwZWRhbGllcm8iOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc1NTEwOS0zJykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uQ29tcGxpY2FuemUoY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiQ29tcGxpY2F6aW9uaSI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzExNDkzLTQnKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25SaXNjb250cmkoY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiSG9zcGl0YWxEaXNjaGFyZ2VTdHVkaWVzU3VtbWFyeSI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzM0MTA0LTAnKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25Db25zdWxlbnphKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIkhvc3BpdGFsRGlzY2hhcmdlU3R1ZGllc1N1bW1hcnkiOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICczMDk1NC0yJykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uRXNhbWlFc2VndWl0aVJpY292ZXJvKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIkVzYW1pRXNlZ3VpdGlEdXJhbnRlaWxSaWNvdmVybyI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzQ3NTE5LTQnKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25Qcm9jZWR1cmVFc2VndWl0ZVJpY292ZXJvKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIkhpc3RvcnlPZlByb2NlZHVyZXNEb2N1bWVudCI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzQ4NzY1LTInKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25BbGxlcmdpZShjZGEsIHNyY1NlY3Rpb24sIHBhdGllbnQsIHRndFNlY3Rpb24sIGJ1bmRsZSxlbmNvdW50ZXIpICJFc2FtaUVzZWd1aXRpRHVyYW50ZUlsUmljb3Zlcm8iOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICcxMDE2MC0wJykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uVGVyYXBpYUZhcm1hY29sb2dpY2FEdXJhbnRlUmljb3Zlcm8oY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiVGVyYXBpYUZhcm1hY29sb2dpY2FBbGxhRGltaXNzaW9uZSI7ICAgICAgIA0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICcxMTUzNS0yJykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uRGlhZ25vc2lEaW1pc3Npb25lKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIkRpYWdub3NpRGlEaW1pc3Npb25lIjsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnMTg3NzYtNScpIC0+IGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBDbGluaWNhbERvY3VtZW50U2VjdGlvbklzdHJ1emlvbmlGb2xsb3dVcChjZGEsIHNyY1NlY3Rpb24sIHBhdGllbnQsIHRndFNlY3Rpb24sIGJ1bmRsZSxlbmNvdW50ZXIpICJEaWFnbm9zaURpRGltaXNzaW9uZSI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzEwMTgzLTInKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25UZXJhcGlhRGltaXNzaW9uZShjZGEsIHNyY1NlY3Rpb24sIHBhdGllbnQsIHRndFNlY3Rpb24sIGJ1bmRsZSxlbmNvdW50ZXIpICJUZXJhcGlhRmFybWFjb2xvZ2ljYUFsbGFEaW1pc3Npb25lIjsNCiAgICAgICB9Ow0KICAgICAgfTsNCiAgICB9ICJib2R5IjsNCiAgfTsNCn0NCg0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25Nb3Rpdm9SaWNvdmVybyhzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlcil7DQogIHNyYy50aXRsZSBhcyB0IC0+IHRndC50aXRsZSA9ICh0LmRhdGFTdHJpbmcpOw0KICBzcmMuY29kZSAtPiB0Z3QuY29kZTsNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKSB0aGVuIHsNCiAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICBjZGFUZXh0IC0+IGZoaXJUZXh0LnN0YXR1cyA9ICdnZW5lcmF0ZWQnICJuYXJyYXRpdmVTdGF0dXMiOw0KICAgIGNkYVRleHQgYXMgdCAtPiBmaGlyVGV4dC5kaXYgPSB0ICJuYXJyYXRpdmVUZXh0IjsgICAgDQogICAgIH0gImNkYVRleHQiOw0KICAgfSAiY1RleHQiOw0KIHNyYy5lbnRyeSBhcyBlbnRyeTEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICx0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgdGhlbiB7DQogICAgZW50cnkxLm9ic2VydmF0aW9uIGFzIG9icyB0aGVuIE9ic2VydmF0aW9uKG9icywgcGF0aWVudCAsZW5jICxvYnNlcnZhdGlvbiwgYnVuZGxlKSAiYWN0IjsNCiAgIH0gImVudHJ5IjsNCg0KICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gYnVuZGxlLmVudHJ5IGFzIGU4LCBlOC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTgucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgT2JzZXJ2YXRpb24sICBPYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkOCwgIGU4LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkOCksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlT2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgc3JjIC0+IE9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjIC0+IE9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgc3JjLmNvZGUgLT4gT2JzZXJ2YXRpb24uY29kZTsNCiAgICAgICAgc3JjIHdoZXJlIG9ic2VydmF0aW9uLnN0YXR1c0NvZGUuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgc3JjLT5PYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgICAgfSJzdGF0dXNjb2RlIjsNCiAgICAgICAgY2RhVGV4dCAtPiBPYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICBjZGFUZXh0IGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7DQogICAgICAgIH0icmVmZXJlbmNlIjsNCiAgICAgIH0iY2RhVGV4dCI7DQogIH0id2hlcmUiOw0KfQ0KDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvbklucXVhZHJhbWVudG9DbGluaWNvKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+YnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCksIHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgIGNkYVRleHQgLT4gb2JzZXJ2YXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgY2RhVGV4dCAtPiBvYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgDQogICAgY2RhVGV4dCAtPiBmaGlyVGV4dC5zdGF0dXMgPSAnZ2VuZXJhdGVkJyAibmFycmF0aXZlU3RhdHVzIjsNCiAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogICAgc3JjLmNvZGUgLT4gb2JzZXJ2YXRpb24uY29kZTsNCiAgICBzcmMgd2hlcmUgb2JzZXJ2YXRpb24uc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgIHNyYy0+b2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgICB9InN0YXR1c2NvZGUiOw0KICAgIGNkYVRleHQtPm9ic2VydmF0aW9uLm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgY2RhVGV4dCBhcyB0IC0+bm90ZS50ZXh0ID10ICJyZWZlcmVuY2UiOw0KICAgIH0icmVmZXJlbmNlIjsNCiAgfSAiY2RhVGV4dCI7DQogIHNyYy5jb21wb25lbnQgYXMgY29tcG9uZW50IHRoZW4gew0KICAgIGNvbXBvbmVudC5zZWN0aW9uIGFzIHNlY3Rpb24yIHRoZW57DQogICAgICAvLyBBTkFNTkVTSQ0KICAgICAgc2VjdGlvbjIgLT4gdGd0LnNlY3Rpb24gYXMgc2VjMiB0aGVuew0KICAgICAgc2VjdGlvbjIuY29kZSB3aGVyZShjb2RlID0gJzExMzI5LTAnKSAtPiAgc2VjMi5jb2RlOw0KICAgICAgICBzZWN0aW9uMi50aXRsZSBhcyB0IC0+IHNlYzIudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgICAgICAgLy9zZWN0aW9uMi5jb2RlIC0+IHNlYzIuY29kZTsNCiAgICAgICAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKSB0aGVuew0KICAgICAgICAgIHNlY3Rpb24yLnRleHQgYXMgY2RhVGV4dCAtPiBzZWMyLnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgICAgICAgICBjZGFUZXh0IC0+IGZoaXJUZXh0LnN0YXR1cyA9ICdnZW5lcmF0ZWQnICJuYXJyYXRpdmVTdGF0dXMiOw0KICAgICAgICAgICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOyAgICAgICAgICANCiAgICAgICAgICB9ICJjZGFUZXh0IjsgIA0KICAgICAgICB9ImV4aXN0IjsNCg0KICAgICAgICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgIHNlY3Rpb24yLnRleHQgYXMgY2RhVGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBjb25kaXRpb24sIGNvbmRpdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgc2VjMi5lbnRyeSA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlY29uZGl0aW9uLmlkKSB0aGVuIHsNCiAgICAgICAgICAgICAgc2VjdGlvbjIuY29kZSAtPiBjb25kaXRpb24uY29kZTsNCiAgICAgICAgICAgICAgc3JjIHdoZXJlIGNvbmRpdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICAgIHNyYy0+Y29uZGl0aW9uLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgICBjZGFUZXh0IC0+IGNvbmRpdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgICBjZGFUZXh0LT5jb25kaXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGNkYVRleHQtPmNvbmRpdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgICAgICAgDQogICAgICAgICAgICAgICAgY2RhVGV4dCBhcyB0IC0+bm90ZS50ZXh0ID10ICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgICAgfSJjZGFUZXh0IjsNCiAgICAgICAgfSJ3aGVyZSI7DQoNCiAgICAgICAgc2VjdGlvbjIuZW50cnkgYXMgZW50cnkxIHRoZW4gew0KICAgICAgICAgIGVudHJ5MS5vYnNlcnZhdGlvbiBhcyBvYnMgdGhlbiB7DQogICAgICAgICAgICAvL0VudHJ5UmVsYXRpb25zaGlwIFByb2JsZW0NCiAgICAgICAgICAgIG9icy5jb2RlIHdoZXJlIChjb2RlID0gJzc1MzI2LTknKSAgdGhlbiB7DQogICAgICAgICAgICBvYnMtPmJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxLnJlc291cmNlID0gY3JlYXRlKCdDb25kaXRpb24nKSBhcyBjb25kaXRpb24sIGNvbmRpdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Db25kaXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdDb25kaXRpb24nLCBzZWMyLmVudHJ5ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvQ29uZGl0aW9uLycgKyAlY29uZGl0aW9uLmlkKSB0aGVuew0KICAgICAgICAgICAgb2JzLmNvZGUgLT4gY29uZGl0aW9uLmNhdGVnb3J5Ow0KICAgICAgICAgICAgb2JzLT5jb25kaXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICBvYnMtPmNvbmRpdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgDQogICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXMgd2hlcmUgKGNvZGU9J2NvbXBsZXRlZCcpIC0+IGNvbmRpdGlvbi52ZXJpZmljYXRpb25TdGF0dXMgYXMgc3RhdHVzMiB0aGVuIHsNCiAgICAgICAgICAgICAgc3RhdHVzIC0+ICBzdGF0dXMyLmNvZGluZyBhcyBzdGF0dXMzIHRoZW57DQogICAgICAgICAgICAgICAgc3RhdHVzIC0+IHN0YXR1czMuY29kZSA9J2NvbmZpcm1lZCcgImZpbmFsZCI7DQogICAgICAgICAgICAgICAgc3RhdHVzIC0+IHN0YXR1czMuc3lzdGVtPSdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICB9InN0MyI7DQogICAgICAgICAgICB9InN0YXR1cyI7DQogICAgICAgICAgICBvYnMuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmUxIHRoZW4gew0KICAgICAgICAgICAgICBlZmZlY3RpdmUxIHdoZXJlIGVmZmVjdGl2ZTEubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZTEuaGlnaC5leGlzdHMoKSB0aGVuew0KICAgICAgICAgICAgICAgIGVmZmVjdGl2ZTEgIC0+IGNvbmRpdGlvbi5vbnNldD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZG9uc2V0IHRoZW4gSVZMVFNQZXJpb2QoZWZmZWN0aXZlMSxwZXJpb2RvbnNldCkib25zZXRwZXJpb2QiOw0KICAgICAgICAgICAgICAgIH0iZWYiOw0KICAgICAgICAgICAgICB9ImVmZmVjdGl2ZXRpbWUxIjsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgb2JzLnZhbHVlOkNEIGFzIHZhbCB0aGVuew0KICAgICAgICAgICAgICB2YWwtPmNvbmRpdGlvbi5jb2RlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgIHZhbC5vcmlnaW5hbFRleHQgLT4gY2UudGV4dDsNCiAgICAgICAgICAgICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgIH0iY29kaW5nIjsgIA0KICAgICAgICAgICAgICB9IkNlIjsgDQogICAgICAgICAgICB9IlZhbHVlIjsNCiAgICAgICAgICAgIG9icy5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyaVJlbCAgdGhlbnsNCiAgICAgICAgICAgICAgZW50cmlSZWwgLT4gY29uZGl0aW9uLmV2aWRlbmNlID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyBldmlkZW5jZSB0aGVuew0KICAgICAgICAgICAgICBlbnRyaVJlbC5vYnNlcnZhdGlvbiBhcyBvYnNlcnZhdGlvbjIgdGhlbiB7DQogICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLmNvZGUgYXMgY29kZSB0aGVuIHsNCiAgICAgICAgICAgICAgICBjb2RlLmNvZGUgd2hlcmUgKGNvZGUuY29kZSA9ICc4OTI2MS0yJykgdGhlbiB7IA0KICAgICAgICAgICAgICAgICAgb2JzIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxLnJlc291cmNlID0gY3JlYXRlKCdPYnNlcnZhdGlvbicpIGFzIG9ic2VydmF0aW9uLCBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyB0aGVuIHsNCiAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgZW50cmlSZWwgLT4gZXZpZGVuY2UuZGV0YWlsICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpICJyZWYiOw0KICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLmNvZGUgLT4gb2JzZXJ2YXRpb24uY29kZTsNCiAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMiB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjItPm9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgICAgICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOyAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnRleHQgYXMgdGV4dCAtPiBvYnNlcnZhdGlvbi5ub3RlID0gY3JlYXRlKCdBbm5vdGF0aW9uJykgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICB0ZXh0LnJlZmVyZW5jZSBhcyByZWYgLT4gbm90ZS50ZXh0ID0gKHJlZi52YWx1ZSkgInZhbCI7DQogICAgICAgICAgICAgICAgICB9IkFubm9udGF0aW9uIjsgDQogICAgICAgICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgICAgICAgb2JzLT5vYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYi5zdGF0dXMgPSdmaW5hbCc7DQogICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhY3RpdmUnKSAtPiBvYi5zdGF0dXMgPSdyZWdpc3RlcmVkJzsNCiAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2Fib3J0ZWQnKSAtPiBvYi5zdGF0dXMgPSdjYW5jZWxsZWQnOw0KICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2Iuc3RhdHVzID0ncGFydGlhbCc7DQogICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIudmFsdWU6SU5UIGFzIGludC0+b2IudmFsdWU9KGludC52YWx1ZSkgInZhbHVlIjsNCiAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi52YWx1ZTpCTCBhcyBib29sZWFuIC0+b2IudmFsdWU9KGJvb2xlYW4udmFsdWUpImJvb2xlYW4iOw0KICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnZhbHVlOkNEIGFzIHZhbCB0aGVuew0KICAgICAgICAgICAgICAgICAgICB2YWwtPm9iLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5vcmlnaW5hbFRleHQgYXMgb3JpZ2luYWxUZXh0IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFRleHQucmVmZXJlbmNlIGFzIHJlZmVyZW5jZS0+IGNlLnRleHQ9cmVmZXJlbmNlOw0KICAgICAgICAgICAgICAgICAgICAgIH0ib3JpZ2lubHRleHQiOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbCAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIH0iY29kZSI7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLnRyYW5zbGF0aW9uIGFzIHRyYW5zbGF0aW9uIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnF1YWxpZmllciBhcyBxdWFsaWZpZXIgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGlmaWVyLnZhbHVlIGFzIHZhbHVlIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSJxdWFsaWZpZXIiOw0KICAgICAgICAgICAgICAgICAgICAgIH0idHJhbnNsYXRpb24iOw0KICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICB9InZhbCI7DQogICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIudmFsdWU6UFEgYXMgdmFsIHRoZW57DQogICAgICAgICAgICAgICAgICAgIHZhbC0+b2IudmFsdWUgPSBjcmVhdGUoJ1F1YW50aXR5JykgYXMgcXVhbnRpdHkgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLnZhbHVlIGFzIHZhbHVlLT5xdWFudGl0eS52YWx1ZSA9IHZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC51bml0IGFzIHVuaXQtPiBxdWFudGl0eS51bml0ID0gdW5pdCAidW5pdCI7DQogICAgICAgICAgICAgICAgICAgIH0icXVhbnRpdHkiOw0KICAgICAgICAgICAgICAgICAgfSJ2YWx1ZVF1YW50aXR5IjsNCiAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi52YWx1ZTpTVCBhcyB2YWx1ZS0+b2IudmFsdWUgPWNyZWF0ZSgnc3RyaW5nJyksb2IudmFsdWU9ICh2YWx1ZS5kYXRhU3RyaW5nKSAidmFsdWUiOw0KICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnZhbHVlOkNFIGFzIHZhbCB0aGVuew0KICAgICAgICAgICAgICAgICAgICB2YWwtPm9ic2VydmF0aW9uLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5vcmlnaW5hbFRleHQgLT4gY2UudGV4dDsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsgIA0KICAgICAgICAgICAgICAgICAgICB9IkNlIjsgDQogICAgICAgICAgICAgICAgICB9IlZhbHVlIjsgDQogICAgICAgICAgICAgICAgIH0ib2JzZXIiOw0KICAgICAgICAgICAgICAgIH0id2hlcmVEZWNvcnNvQ2xpbmljbyI7DQogICAgICAgICAgICAgICAgfSJjb2RlIjsNCiAgICAgICAgICAgICAgfSJPYnNlcnZhdGlvbjIiOw0KICAgICAgICAgICAgfSJldmlkZW5jZSI7DQogICAgICAgICB9IkVudHJ5UmVsYXRpb25zaGlwMSI7DQogICAgICAgICBvYnMuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cmlSZWwgIHRoZW57DQogICAgICAgICAgZW50cmlSZWwub2JzZXJ2YXRpb24gYXMgb2JzZXJ2YXRpb24yIHRoZW4gew0KICAgICAgICAgICAgb2JzZXJ2YXRpb24yLmNvZGUgYXMgY29kZSB0aGVuIHsNCiAgICAgICAgICAgICBjb2RlLmNvZGUgd2hlcmUgKGNvZGUuY29kZSA9JzMzOTk5LTQnKSB0aGVuew0KICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yIC0+IGNvbmRpdGlvbi5jbGluaWNhbFN0YXR1cyA9IGNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgc3RhdHVzIHRoZW4gew0KICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi50ZXh0IGFzIHRleHQgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHRleHQucmVmZXJlbmNlIGFzIHJlZnN0YXQgLT4gc3RhdHVzLnRleHQ9KHJlZnN0YXQudmFsdWUpInN0YXRyZWYiOw0KICAgICAgICAgICAgICAgICAgfSJ0ZXh0c3RhdCI7DQogICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMiAgLT4gc3RhdHVzLmNvZGluZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW57DQogICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnZhbHVlIGFzIHZhbHVlIHRoZW57DQogICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlICB3aGVyZSAodmFsdWUuY29kZSA9ICdMQTE2NjY2LTInKS0+IGNvZGluZy5jb2RlID0gJ2FjdGl2ZSciYWN0aXZlIjsNCiAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGUgIHdoZXJlICh2YWx1ZS5jb2RlID0gJ0xBMTg2MzItMicpLT4gY29kaW5nLmNvZGUgPSAnaW5hY3RpdmUnImluYWN0aXZlIjsNCiAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi1jbGluaWNhbCcic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUxIjsNCiAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgfSJjb2RlIjsgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgIH0id2hlcmVEZWNvcnNvQ2xpbmljbyI7IA0KICAgICAgICAgICAgfSJjb2Rlc3RhdHVzIjsgIA0KICAgICAgICAgICB9Im9ic2VydmF0aW9uc3RhdHVzIjsgDQogICAgICAgICAgfSJlbnRyeXJlbGF0aW9uc2hpcHN0YXR1cyI7ICAgICAgICAgICANCiAgICAgICAgICB9IndoZXJlRW50cnlQYXRvbG9naWNhUHJvc3NpbWEiOw0KICAgICAgICB9ICJvYnNlcnZhdGlvbmNvbmRpdGlvbiI7DQogICAgICAgIH0iZW50cnkiOw0KICAgIH0ic3Vic2VjdGlvbjEiOw0KIA0KICAvLyBFU0FNRSBQQklFVFRJVk8NCiAgc2VjdGlvbjIuY29kZSB3aGVyZShjb2RlID0gJzI5NTQ1LTEnKSB0aGVuIENsaW5pY2FsRG9jdW1lbnRTb3R0b1NlY3Rpb25PQlMoc2VjdGlvbjIsIHNlYzIsIGJ1bmRsZSxlbmMscGF0aWVudCkgImVzYW1lT2JpZXR0aXZvIjsNCiAgLy8gVEVUQVBJQSBGQVJNQUNPTE9HSUNBDQogICBzZWN0aW9uMi5jb2RlIHdoZXJlKGNvZGUgPSAnNDIzNDYtNycpIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNvdHRvU2VjdGlvbk1TKHNlY3Rpb24yLCBzZWMyLCBidW5kbGUscGF0aWVudCxlbmMpICJUZXJhcGlhRmFybWFjb2xvZ2ljYUFsbEluZ3Jlc3NvIjsNCiAgICB9InNlYzJmaGlyIjsNCiAgfSJjb21wb25lbnRTZWMiOw0KIH07DQp9DQoNCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uRGVjb3Jzb09zcGVkYWxpZXJvKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+YnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICx0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCksIHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOyAgICAgICAgICANCiAgICBzcmMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgc3JjLT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgIH0ic3RhdHVzY29kZSI7DQogICAgICBzcmMtPm9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjLT5vYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICBjZGFUZXh0LT5vYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICB9InJlZmVyZW5jZSI7DQogIH0gImNkYVRleHQiOw0KICBzcmMuY29tcG9uZW50IGFzIGNvbXBvbmVudCB0aGVuIHsNCiAgICBjb21wb25lbnQuc2VjdGlvbiBhcyBzZWN0aW9uMiB0aGVuew0KICAgICAgc3JjIHRoZW4gIENsaW5pY2FsRG9jdW1lbnRTb3R0b1NlY3Rpb25PQlMgKHNlY3Rpb24yLCB0Z3QsIGJ1bmRsZSxlbmMscGF0aWVudCkgIkRlY29yc28iOw0KICAgIH0iMSI7DQogIH0iMiI7DQogIA0KfQ0KDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvbkNvbXBsaWNhbnplKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpIHRoZW57DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogICAgfSAiY2RhVGV4dCI7ICANCiAgfSJleGlzdCI7DQoNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgc3JjIC0+IG9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjIC0+IG9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICBzcmMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICBzcmMtPm9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgY2RhVGV4dCAtPiBvYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgIH0iY2RhVGV4dCI7DQogICAgICB9IndoZXJlIjsNCg0KICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgIGVudHJ5MS5vYnNlcnZhdGlvbiBhcyBvYnMgdGhlbiBPYnNlcnZhdGlvbihvYnMsIHBhdGllbnQgLGVuYyAsb2JzZXJ2YXRpb24sIGJ1bmRsZSkgImFjdCI7DQogIH0iZW50cnkiOw0KDQp9DQoNCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uUmlzY29udHJpKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+YnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCksIHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOyAgICAgICAgICANCiAgICBzcmMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgc3JjLT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgIH0ic3RhdHVzY29kZSI7DQogICAgICBzcmMtPm9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjLT5vYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICAgIGNkYVRleHQtPm9ic2VydmF0aW9uLm5vdGUgYXMgbm90ZSB0aGVuIHsNCiAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICB9InJlZmVyZW5jZSI7DQogIH0gImNkYVRleHQiOw0KICBzcmMuY29tcG9uZW50IGFzIGNvbXBvbmVudCB0aGVuIHsNCiAgICBjb21wb25lbnQuc2VjdGlvbiBhcyBzZWN0aW9uMiB0aGVuew0KICAgICAgc3JjIHRoZW4gIENsaW5pY2FsRG9jdW1lbnRTb3R0b1NlY3Rpb25PQlMoc2VjdGlvbjIsIHRndCwgYnVuZGxlLGVuYyxwYXRpZW50KSAiRGVjb3JzbyI7DQogICAgfSIxIjsNCiAgfSIyIjsNCn0NCg0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25Db25zdWxlbnphKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpIHRoZW57DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogICAgfSAiY2RhVGV4dCI7ICANCiAgfSJleGlzdCI7DQoNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgc3JjIC0+IG9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjIC0+IG9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICBzcmMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICBzcmMtPm9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgY2RhVGV4dCAtPiBvYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgIH0iY2RhVGV4dCI7DQogICAgICB9IndoZXJlIjsNCg0KICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgIGVudHJ5MS5vYnNlcnZhdGlvbiBhcyBvYnMgdGhlbiBPYnNlcnZhdGlvbkNvbnN1bGVuemEob2JzLCBwYXRpZW50ICxlbmMgLG9ic2VydmF0aW9uLCBidW5kbGUpICJhY3QiOw0KICB9ImVudHJ5IjsNCg0KfQ0KDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvbkVzYW1pRXNlZ3VpdGlSaWNvdmVybyhzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlcil7DQogIHNyYy50aXRsZSBhcyB0IC0+IHRndC50aXRsZSA9ICh0LmRhdGFTdHJpbmcpOw0KICBzcmMuY29kZSAtPiB0Z3QuY29kZTsNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKSB0aGVuew0KICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gdGd0LnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgICBjZGFUZXh0IC0+IGZoaXJUZXh0LnN0YXR1cyA9ICdnZW5lcmF0ZWQnICJuYXJyYXRpdmVTdGF0dXMiOw0KICAgICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICAgIH0gImNkYVRleHQiOyAgDQogIH0iZXhpc3RzIjsNCg0KICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgdGhlbiB7DQogICAgICBzcmMgLT4gb2JzZXJ2YXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICBzcmMgLT4gb2JzZXJ2YXRpb24uZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7IA0KICAgICAgICAgIHNyYy5jb2RlIC0+IG9ic2VydmF0aW9uLmNvZGU7DQogICAgICAgICAgc3JjIHdoZXJlIG9ic2VydmF0aW9uLnN0YXR1c0NvZGUuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgICAgIHNyYy0+b2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgICAgICAgICAgIH0ic3RhdHVzY29kZSI7DQogICAgICAgICAgICBjZGFUZXh0IC0+IG9ic2VydmF0aW9uLm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgY2RhVGV4dCBhcyB0IC0+bm90ZS50ZXh0ID10ICJyZWZlcmVuY2UiOw0KICAgICAgICAgIH0icmVmZXJlbmNlIjsNCiAgICAgICAgfSJjZGFUZXh0IjsNCiAgICAgIH0id2hlcmUiOw0KDQogIHNyYy5lbnRyeSBhcyBlbnRyeTEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgdGhlbiB7DQogICAgZW50cnkxLm9ic2VydmF0aW9uIGFzIG9icyB0aGVuIE9ic2VydmF0aW9uRXNhbWlEdXJhbnRlUmljb3Zlcm8ob2JzLCBwYXRpZW50ICxlbmMgLG9ic2VydmF0aW9uLCBidW5kbGUpICJhY3QiOw0KICB9ImVudHJ5IjsNCg0KfQ0KDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvblByb2NlZHVyZUVzZWd1aXRlUmljb3Zlcm8oc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHNvdXJjZSBzcmMgOiBTZWN0aW9uLCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQsIHRhcmdldCB0Z3QsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUsIHRhcmdldCBlbmMgOiBFbmNvdW50ZXIpew0KICBzcmMudGl0bGUgYXMgdCAtPiB0Z3QudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkgdGhlbnsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgICAgY2RhVGV4dCAtPiBmaGlyVGV4dC5zdGF0dXMgPSAnZ2VuZXJhdGVkJyAibmFycmF0aXZlU3RhdHVzIjsNCiAgICAgIGNkYVRleHQgYXMgdCAtPiBmaGlyVGV4dC5kaXYgPSB0ICJuYXJyYXRpdmVUZXh0IjsNCiAgICB9ICJjZGFUZXh0IjsgIA0KICB9ImV4aXN0cyI7DQogDQogIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcm9jZWR1cmUnKSBhcyBwcm9jZWR1cmUsICBwcm9jZWR1cmUuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJvY2VkdXJlLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnUHJvY2VkdXJlJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1Byb2NlZHVyZS8nICsgJXByb2NlZHVyZS5pZCkgdGhlbiB7DQogICAgICBzcmMgLT4gcHJvY2VkdXJlLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjIC0+IHByb2NlZHVyZS5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgICAgICAgIA0KICAgICAgc3JjLT5wcm9jZWR1cmUuc3RhdHVzID0ndW5rbm93bicic3RhdHVzY29kZSI7DQogICAgICBjZGFUZXh0IC0+IHByb2NlZHVyZS5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgY2RhVGV4dCBhcyB0IC0+bm90ZS50ZXh0ID10ICJyZWZlcmVuY2UiOw0KICAgICAgfSJyZWZlcmVuY2UiOw0KICAgIH0iY2RhVGV4dCI7DQogIH0id2hlcmUiOyAgDQoNCiAgc3JjLmVudHJ5IGFzIGVudHJ5MSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcm9jZWR1cmUnKSBhcyBwcm9jZWR1cmUsICBwcm9jZWR1cmUuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJvY2VkdXJlLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnUHJvY2VkdXJlJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1Byb2NlZHVyZS8nICsgJXByb2NlZHVyZS5pZCkgdGhlbiB7DQogICAgc3JjIC0+IHByb2NlZHVyZS5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICBzcmMgLT4gcHJvY2VkdXJlLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOw0KICAgIGVudHJ5MS5wcm9jZWR1cmUgYXMgcHJvY2VkdXJlc3JjIHRoZW57DQogICAgICBwcm9jZWR1cmVzcmMuY29kZSAtPiBwcm9jZWR1cmUuY29kZTsNCiAgICAgIHByb2NlZHVyZXNyYy50ZXh0IGFzIHR4dCAtPiBwcm9jZWR1cmUubm90ZSBhcyBub3RlIHRoZW4gew0KICAgICAgICB0eHQucmVmZXJlbmNlIGFzIHJlZiAtPiBub3RlLnRleHQgPSAocmVmLnZhbHVlKTsNCiAgICAgIH0idGV4dCI7DQogICAgICANCiAgICAgIHByb2NlZHVyZXNyYyB3aGVyZSBwcm9jLnN0YXR1c0NvZGUgLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgcHJvY2VkdXJlc3JjLT5wcm9jZWR1cmUuc3RhdHVzID0ndW5rbm93bicic3RhdHVzY29kZSI7DQogICAgICB9InN0YXR1cyI7DQogICAgICBwcm9jZWR1cmVzcmMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBwcm9jZWR1cmUuc3RhdHVzID0nY29tcGxldGVkJzsNCiAgICAgIHByb2NlZHVyZXNyYy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IHByb2NlZHVyZS5zdGF0dXMgPSdpbi1wcm9ncmVzcyc7DQogICAgICBwcm9jZWR1cmVzcmMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gcHJvY2VkdXJlLnN0YXR1cyA9J3N0b3BwZWQnOw0KICAgICAgcHJvY2VkdXJlc3JjLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gcHJvY2VkdXJlLnN0YXR1cyA9J29uLWhvbGQnOw0KICAgICAgcHJvY2VkdXJlc3JjLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nY2FuY2VsbGVkJykgLT4gcHJvY2VkdXJlLnN0YXR1cyA9J25vdC1kb25lJzsNCiAgICAgIHByb2NlZHVyZXNyYy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2hlbGQnKSAtPiBwcm9jZWR1cmUuc3RhdHVzID0nb24taG9sZCc7DQogICAgICBwcm9jZWR1cmVzcmMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSduZXcnKSAtPiBwcm9jZWR1cmUuc3RhdHVzID0ncHJlcGFyYXRpb24nOw0KICAgICAgcHJvY2VkdXJlc3JjLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nb2Jzb2xldGUnKSAtPiBwcm9jZWR1cmUuc3RhdHVzID0nZW50ZXJlZC1pbi1lcnJvcic7DQogICAgICBwcm9jZWR1cmVzcmMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdudWxsaWZpZWQnKSAtPiBwcm9jZWR1cmUuc3RhdHVzID0ndW5rbm93bic7DQogICAgICBwcm9jZWR1cmVzcmMuZWZmZWN0aXZlVGltZSBhcyBlZmZ0IC0+IHByb2NlZHVyZS5wZXJmb3JtZWQgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZnQscGVyaW9kKTsNCiAgICAgIHByb2NlZHVyZXNyYy5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyaVJlbCAtPiAgYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCBwcm9jZWR1cmUucmVhc29uUmVmZXJlbmNlICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW57DQogICAgICAgIGVudHJpUmVsLT5vYnNlcnZhdGlvbi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgZW50cmlSZWwtPm9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgZW50cmlSZWwub2JzZXJ2YXRpb24gYXMgb2JzIHRoZW57DQogICAgICAgICAgb2JzLmNvZGUgLT4gb2JzZXJ2YXRpb24uY29kZTsNCiAgICAgICAgICBvYnMgd2hlcmUgb2JzZXJ2YXRpb24uc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgICAgIG9icy0+b2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgICAgICAgICB9InN0YXR1c2NvZGUiOyAgICAgICAgICAgDQogICAgICAgIH0iT2JzZXJ2YXRpb25WYWx1ZSI7DQogICAgICB9Ik9ic2VydmF0aW9uIjsgDQogICAgfSJQcm9jZWR1cmUiOw0KICB9IkVudHJ5IjsNCn0NCg0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25BbGxlcmdpZShzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlcil7DQogIHNyYy50aXRsZSBhcyB0IC0+IHRndC50aXRsZSA9ICh0LmRhdGFTdHJpbmcpOw0KICBzcmMuY29kZSAtPiB0Z3QuY29kZTsNCiAgDQogIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkgdGhlbnsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgICAgY2RhVGV4dCAtPiBmaGlyVGV4dC5zdGF0dXMgPSAnZ2VuZXJhdGVkJyAibmFycmF0aXZlU3RhdHVzIjsNCiAgICAgIGNkYVRleHQgYXMgdCAtPiBmaGlyVGV4dC5kaXYgPSB0ICJuYXJyYXRpdmVUZXh0IjsNCiAgICB9ICJjZGFUZXh0IjsgIA0KICB9ImV4aXN0cyI7DQoNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ0FsbGVyZ3lJbnRvbGVyYW5jZScpIGFzIGFsbGVyZ3ksICBhbGxlcmd5LmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0FsbGVyZ3lJbnRvbGVyYW5jZS8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ0FsbGVyZ3lJbnRvbGVyYW5jZScsIHRndC5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9BbGxlcmd5SW50b2xlcmFuY2UvJyArICVhbGxlcmd5LmlkKSB0aGVuIHsNCiAgICAgIHNyYyAtPiBhbGxlcmd5LnBhdGllbnQ9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjIC0+IGFsbGVyZ3kuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7DQogICAgICBzcmMgLT4gYWxsZXJneS5jbGluaWNhbFN0YXR1cyA9IGNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgc3RhdHVzIHRoZW4gew0KICAgICAgICBzcmMgLT4gc3RhdHVzLnRleHQgPSAnc3RyaW5nJyAidGV4dCI7DQogICAgICAgIHNyYyAtPiBzdGF0dXMuY29kaW5nID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbnsNCiAgICAgICAgICBzcmMgLT4gY29kaW5nLmNvZGUgPSAnYWN0aXZlJyJhY3RpdmUiOw0KICAgICAgICAgIHNyYyAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hbGxlcmd5aW50b2xlcmFuY2UtY2xpbmljYWwnInN5c3RlbSI7DQogICAgICAgIH0iY29kaW5nIjsNCiAgICAgIH0iYWxsZXJneSI7DQogICAgICAgIHNyYy5jb2RlIC0+IGFsbGVyZ3kuY29kZTsNCiAgICAgICAgY2RhVGV4dCAtPiBhbGxlcmd5Lm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgfSJyZWZlcmVuY2UiOw0KICAgIH0iY2RhVGV4dCI7DQogIH0id2hlcmUiOyAgDQoNCg0KICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ0FsbGVyZ3lJbnRvbGVyYW5jZScpIGFzIGFsbGVyZ3ksICBhbGxlcmd5LmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0FsbGVyZ3lJbnRvbGVyYW5jZS8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ0FsbGVyZ3lJbnRvbGVyYW5jZScsIHRndC5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9BbGxlcmd5SW50b2xlcmFuY2UvJyArICVhbGxlcmd5LmlkKSB0aGVuIHsNCiAgICBzcmMgLT4gYWxsZXJneS5wYXRpZW50PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICBzcmMgLT4gYWxsZXJneS5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICBlbnRyeTEuYWN0IGFzIGFjdGFsbGludCB0aGVuIHsNCiAgYWN0YWxsaW50LmVmZmVjdGl2ZVRpbWUgYXMgZWZmIC0+IGFsbGVyZ3kub25zZXQgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlciB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXIpOw0KICBhY3RhbGxpbnQuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlhY3QgdGhlbiB7DQogICAgZW50cnlhY3Qub2JzZXJ2YXRpb24gYXMgZW50cnlvYnMgdGhlbiB7DQogICAgICBlbnRyeW9icy52YWx1ZSBhcyBjb2RlIHRoZW57DQogICAgICAgIGNvZGUuY29kZSBhcyBjb2RlMS0+IGFsbGVyZ3kudHlwZSA9IHRyYW5zbGF0ZShjb2RlMSwnI0FsbGVyZ3lUeXBlTWFwJywnY29kZScpICJ0eXBlIjsNCiAgICAgICAgY29kZS5jb2RlIGFzIGNvZGUyIC0+IGFsbGVyZ3kuY2F0ZWdvcnkgPSB0cmFuc2xhdGUoY29kZTIsJyNBbGxlcmd5Q2F0ZWdvcnlNYXAnLCdjb2RlJykgImNhdGVnb3J5IjsgIA0KICAgICAgfSJjb2RlIjsNCiAgICANCiAgICAgIGVudHJ5b2JzLnBhcnRpY2lwYW50IGFzIHBhcnRpYyB0aGVuIHsNCiAgICAgICAgcGFydGljLnBhcnRpY2lwYW50Um9sZSBhcyBwcmF0Um9sZSB0aGVuIHsNCiAgICAgICAgICAgcHJhdFJvbGUucGxheWluZ0VudGl0eSBhcyBwcmF0ZW50IHRoZW4gew0KICAgICAgICAgICAgICAgcHJhdGVudCAtPiBhbGxlcmd5LnJlYWN0aW9uID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZWFjdGlvbiB0aGVuew0KICAgICAgICAgICAgICAgcHJhdGVudC5jb2RlIC0+IHJlYWN0aW9uLnN1YnN0YW5jZSAic3VicyI7DQogICAgICAgICAgIGVudHJ5b2JzLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5b2JzMSB3aGVyZSAodHlwZUNvZGU9J01GU1QnKSB0aGVuIHsNCiAgICAgICAgICAgZW50cnlvYnMxLm9ic2VydmF0aW9uIGFzIGVudG9icyB0aGVuIHsNCiAgICAgICAgICAgICBlbnRvYnMuZWZmZWN0aXZlVGltZSBhcyBlZmYgIHRoZW57DQogICAgICAgICAgICBlZmYubG93IGFzIGwgLT4gcmVhY3Rpb24ub25zZXQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgc3RhcnQgdGhlbiBUU0RhdGVUaW1lKGwsc3RhcnQpICJ2YWwiOw0KICAgICAgICAgICAgfSJlZmYiOw0KICAgICAgICAgICAgZW50b2JzLnZhbHVlLT5yZWFjdGlvbi5tYW5pZmVzdGF0aW9uICJtYW5pZmVzdCI7DQogICAgICAgICAgICAgICAgICAgICB9Im9ic2VydiI7DQogICAgICAgICAgICAgICAgICAgfSJlbnRyeSI7DQogICAgICAgICAgICAgICB9ImNvZCI7ICANCiAgICAgICAgICB9InJlYWN0IjsNCiAgICAgICAgfSJwcmF0ZW50aXQiOw0KICAgICAgIH0iUHJhdFJvbGUiOw0KDQogICAgICAgZW50cnlvYnMuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlvYnMyIHRoZW4gew0KICAgICAgICBlbnRyeW9iczIub2JzZXJ2YXRpb24gYXMgZW50b2JzIHRoZW4gew0KICAgICAgICAgIGVudG9icy5jb2RlIGFzIGNvZGUgd2hlcmUgKGNvZGU9J1NFVicpIHRoZW4gew0KICAgICAgICAgIGVudG9icy52YWx1ZSBhcyB2YWx1ZSB0aGVuew0KICAgICAgICAgICAgIHZhbHVlLmNvZGUgd2hlcmUodmFsdWUuY29kZSA9ICdNJykgLT5hbGxlcmd5LmNyaXRpY2FsaXR5ID0gJ3VuYWJsZS10by1hc3Nlc3MnImFjdGl2ZSI7DQogICAgICAgICAgICAgdmFsdWUuY29kZSB3aGVyZSh2YWx1ZS5jb2RlID0gJ0wnKSAtPmFsbGVyZ3kuY3JpdGljYWxpdHkgPSAnbG93JyJhY3RpdmUiOyANCiAgICAgICAgICAgICB2YWx1ZS5jb2RlIHdoZXJlKHZhbHVlLmNvZGUgPSAnSCcpIC0+YWxsZXJneS5jcml0aWNhbGl0eSA9ICdoaWdoJyJhY3RpdmUiOyANCiAgICAgICAgICAgICAgfSJlbnRvYnMiOw0KICAgICAgICAgICAgIH0gInNldiI7DQogICAgICAgICAgICB9InNldmVyaXR5IjsNCiAgICAgICAgICB9Im9ic2VydiI7DQogICAgICAgDQoNCiAgICAgICBlbnRyeW9icy5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeW9iczMgdGhlbiB7DQogICAgICAgIGVudHJ5b2JzMy5vYnNlcnZhdGlvbiBhcyBlbnRvYnMgdGhlbiB7DQogICAgICAgICAgZW50b2JzLmNvZGUgYXMgY29kZSB3aGVyZSAoY29kZT0nMzM5OTktNCcpIHRoZW4gew0KICAgICAgICAgICBlbnRvYnMgLT4gYWxsZXJneS5jbGluaWNhbFN0YXR1cyA9IGNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgc3RhdHVzIHRoZW4gew0KICAgICAgICAgICBlbnRvYnMgIC0+IHN0YXR1cy5jb2RpbmcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuew0KICAgICAgICAgICAgZW50b2JzLnZhbHVlIGFzIHZhbHVlIHRoZW57DQogICAgICAgICAgICAgICAgdmFsdWUuY29kZSAgd2hlcmUgKHZhbHVlLmNvZGUgPSAnTEExNjY2Ni0yJyktPiBjb2RpbmcuY29kZSA9ICdhY3RpdmUnImFjdGl2ZSI7DQogICAgICAgICAgICAgICAgdmFsdWUuY29kZSAgd2hlcmUgKHZhbHVlLmNvZGUgPSAnTEExODYzMi0yJyktPiBjb2RpbmcuY29kZSA9ICdpbmFjdGl2ZSciYWN0aXZlIjsNCiAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hbGxlcmd5aW50b2xlcmFuY2UtY2xpbmljYWwnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICB9InZhbHVlMSI7DQogICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgfSJjbGluaWNhbFN0YXR1cyI7DQogICAgICAgICAgICB9InN0YXQiOw0KICAgICAgICAgIH0ib2JvYnMzc2VydiI7DQogICAgICAgfSJlbnRyeTMiOw0KDQogICAgICAgIGVudHJ5b2JzLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5b2JzNCB0aGVuIHsNCiAgICAgICAgIGVudHJ5b2JzNC5hY3QgYXMgZW50YWN0IHRoZW4gew0KICAgICAgICAgIGVudGFjdC50ZXh0IGFzIGFjdGV4dCB0aGVuIHsNCiAgICAgICAgICAgICAgYWN0ZXh0LnJlZmVyZW5jZSBhcyByZWZ0eHQgLT4gYWxsZXJneS5ub3RlID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyBub3RlICB0aGVuIHsNCiAgICAgICAgICAgICAgcmVmdHh0IGFzIHJlZi0+bm90ZS50ZXh0PSAocmVmLnZhbHVlKSAibm90eHQiOw0KICAgICAgICAgICAgICAgIH0ibm90ZXR4dCI7DQogICAgICAgICAgICAgIH0idHh0YWN0IjsNCiAgICAgICAgICB9Im9ib2JzNHNlcnYiOw0KICAgICAgIH0iZW50cnk0IjsNCg0KICAgICAgICAgfSJwYXJ0aWMiOw0KICAgICAgICB9Ow0KICAgICAgIH07DQogICAgICB9ImFsbGVyZ3kiOw0KfQ0KDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvbkRpYWdub3NpRGltaXNzaW9uZShzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlcil7DQogIHNyYy50aXRsZSBhcyB0IC0+IHRndC50aXRsZSA9ICh0LmRhdGFTdHJpbmcpOw0KICBzcmMuY29kZSAtPiB0Z3QuY29kZTsNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKSB0aGVuew0KICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gdGd0LnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgICBjZGFUZXh0IC0+IGZoaXJUZXh0LnN0YXR1cyA9ICdnZW5lcmF0ZWQnICJuYXJyYXRpdmVTdGF0dXMiOw0KICAgICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICAgIH0gImNkYVRleHQiOyAgDQogIH0iZXhpc3RzIjsNCg0KICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICwgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgc3JjIC0+IG9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjIC0+IG9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICBzcmMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICBzcmMtPm9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgY2RhVGV4dCAtPiBvYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgIH0iY2RhVGV4dCI7DQogICAgICB9IndoZXJlIjsNCg0KICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsIHRndC5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9ic2VydmF0aW9uLmlkKSB0aGVuIHsNCiAgICBlbnRyeTEub2JzZXJ2YXRpb24gYXMgb2JzIHRoZW4gT2JzZXJ2YXRpb24ob2JzLCBwYXRpZW50ICxlbmMgLG9ic2VydmF0aW9uLCBidW5kbGUpICJhY3QiOw0KICB9ImVudHJ5IjsNCn0NCg0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25Jc3RydXppb25pRm9sbG93VXAoc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHNvdXJjZSBzcmMgOiBTZWN0aW9uLCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQsIHRhcmdldCB0Z3QsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUsIHRhcmdldCBlbmMgOiBFbmNvdW50ZXIpew0KICBzcmMudGl0bGUgYXMgdCAtPiB0Z3QudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gdGd0LnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgY2RhVGV4dCAtPiBmaGlyVGV4dC5zdGF0dXMgPSAnZ2VuZXJhdGVkJyAibmFycmF0aXZlU3RhdHVzIjsNCiAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogIH0gImNkYVRleHQiOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ0NhcmVQbGFuJykgYXMgY2FyZVBsYW4sICBjYXJlUGxhbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9DYXJlUGxhbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ0NhcmVQbGFuJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0NhcmVQbGFuLycgKyAlY2FyZVBsYW4uaWQpIHRoZW4gew0KICAgIGNkYVRleHQtPiBjYXJlUGxhbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICB9InJlZmVyZW5jZSI7DQogICAgc3JjLT4gY2FyZVBsYW4uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICBzcmMtPiBjYXJlUGxhbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICBzcmMgLT4gY2FyZVBsYW4uc3RhdHVzPSdhY3RpdmUnInN0YXR1cyI7DQogICAgc3JjIC0+IGNhcmVQbGFuLmludGVudD0nb3JkZXInImludGVudCI7DQogIH0iZW50cnkiOw0KfQ0KDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvblRlcmFwaWFGYXJtYWNvbG9naWNhRHVyYW50ZVJpY292ZXJvKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpIHRoZW57DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogICAgfSAiY2RhVGV4dCI7ICANCiAgfSJleGlzdHMiOw0KDQogIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdNZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24nKSBhcyBtZWRpY2F0aW9uQWRtLCAgbWVkaWNhdGlvbkFkbS5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdNZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24nLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uLycgKyAlbWVkaWNhdGlvbkFkbS5pZCkgdGhlbiB7DQogICAgICBjZGFUZXh0LT5tZWRpY2F0aW9uQWRtLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogICAgICBjZGFUZXh0LT5tZWRpY2F0aW9uQWRtLmNvbnRleHQ9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICAgIGNkYVRleHQtPm1lZGljYXRpb25BZG0ubWVkaWNhdGlvbiA9IGNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgY29kZWNvbiB0aGVuew0KICAgICAgICBjZGFUZXh0IC0+IGNvZGVjb24udGV4dCA9ICdzdHJpbmcnICJ0ZXh0IjsNCiAgICAgIH0iY29kZSI7DQogICAgICBzcmMgLT5tZWRpY2F0aW9uQWRtLmVmZmVjdGl2ZSA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW57DQogICAgICAgIHNyYy0+cGVyaW9kLnN0YXJ0PShzdGFydC5ub3coKSkibG93IjsNCiAgICAgICAgc3JjLT5wZXJpb2QuZW5kPShlbmQubm93KCkpImhpZ2giOw0KICAgICAgICB9IlBlcmlvZCI7DQogICAgICAgIHNyYyB3aGVyZSBzdWIuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgICBzcmMtPm1lZGljYXRpb25BZG0uc3RhdHVzID0nY29tcGxldGVkJyJzdGF0dXMiOw0KICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICBjZGFUZXh0IC0+IG1lZGljYXRpb25BZG0ubm90ZSBhcyBub3RlIHRoZW57DQogICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgIH0icmVmZXJlbmNlIjsNCiAgICB9ImNkYVRleHQiOw0KICB9IndoZXJlIjsgIA0KDQogIHNyYy5lbnRyeSBhcyBlbnRyeTEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uJykgYXMgbWVkaWNhdGlvbkFkbSwgIG1lZGljYXRpb25BZG0uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25BZG1pbmlzdHJhdGlvbi8nICsgJW1lZGljYXRpb25BZG0uaWQpIHRoZW4gew0KICAgIGVudHJ5MS0+bWVkaWNhdGlvbkFkbS5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsgICAgIA0KICAgIGVudHJ5MS0+bWVkaWNhdGlvbkFkbS5jb250ZXh0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICBlbnRyeTEuc3Vic3RhbmNlQWRtaW5pc3RyYXRpb24gYXMgc2EgdGhlbnsNCiAgICAgICAgICAgICAgICBzYS50ZXh0IGFzIHR4IC0+IG1lZGljYXRpb25BZG0ubm90ZSBhcyBub3RlIHRoZW57DQogICAgICAgICAgICAgICAgICBzYS5wZXJmb3JtZXIgYXMgcGVyZm9ybWVyIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyIHRoZW57DQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1lci50aW1lIGFzIHRpIC0+IG5vdGUudGltZSA9ICh0aS52YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1lci5hc3NpZ25lZEVudGl0eSBhcyBhc3NFbnR5IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgYXNzRW50eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc0VudHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGFzc0VudHkgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGFzc0VudHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvVGVyYXBpYUZhcm1hY29sb2dpY2FSaWNvdmVyby9wZXJmb3JtZXInImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgIGFzc0VudHkuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7IA0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gJ1ByYWN0aXRpb25lcicsIG1lZGljYXRpb25BZG0ucGVyZm9ybWVyIGFzIHBlcmYsICBwZXJmLmFjdG9yICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkiYXV0IjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgICAgICAgIGFzc0VudHkuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgICAgICAgIGFzc0VudHkuaWQgYXMgaWQgd2hlcmUgKHJvb3QhPScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICAgICAgICAgICAgfSJkaXZlcnNvIjsNCiAgICAgICAgICAgICAgICAgICAgYXNzRW50eS5hc3NpZ25lZFBlcnNvbiBhcyBhc3NpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzaS5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgICAgICAgICAgIH0iYXNzaSI7DQogICAgICAgICAgICAgICAgICAgIH0iYXNzRW50aXR5IjsNCiAgICAgICAgICAgICAgICAgIH0icGVyZiI7DQogICAgICAgICAgICAgIHR4LnJlZmVyZW5jZSBhcyByZWYgLT4gbm90ZS50ZXh0ID0gKHJlZi52YWx1ZSk7DQogICAgICAgICAgICB9InR4IjsgDQogICAgICBzYS5zdGF0dXNDb2RlIGFzIHN0IC0+IG1lZGljYXRpb25BZG0uc3RhdHVzID0gKHN0LmNvZGUpOw0KICAgICAgc2EuZWZmZWN0aXZlVGltZSBhcyBlZmYgLT4gbWVkaWNhdGlvbkFkbS5lZmZlY3RpdmUgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXJpb2QpICJwZXJpb2QiOw0KICAgICAgDQogICAgICBzYSAtPiAgbWVkaWNhdGlvbkFkbS5kb3NhZ2UgYXMgZG9zIHRoZW4gew0KICAgICAgICBzYS5yb3V0ZUNvZGUgLT4gZG9zLnJvdXRlOyAgICAgICAgDQogICAgICB9ImRvcyI7DQogICAgICBzYSAtPiAgbWVkaWNhdGlvbkFkbS5kb3NhZ2UgYXMgZG9zIHRoZW4gew0KICAgICAgICBzYS5hcHByb2FjaFNpdGVDb2RlIC0+IGRvcy5zaXRlOyAgICAgICAgDQogICAgICB9ImRvcyI7DQogICAgICANCg0KICAgICAgc2EuZG9zZVF1YW50aXR5IGFzIGRvc2VRdWFudCAtPiAgYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvblJlcXVlc3QnKSBhcyBtZWRpY2F0aW9uUnEsICBtZWRpY2F0aW9uUnEuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvblJlcXVlc3QvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdNZWRpY2F0aW9uUmVxdWVzdCcsIG1lZGljYXRpb25BZG0ucmVxdWVzdCAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uUmVxdWVzdC8nICsgJW1lZGljYXRpb25ScS5pZCkgdGhlbnsNCiAgICAgICAgZG9zZVF1YW50IC0+IG1lZGljYXRpb25ScS5kb3NhZ2VJbnN0cnVjdGlvbiA9IGNyZWF0ZSgnRG9zYWdlJykgYXMgZG9zYWdlSW5zdHJ1Y3Rpb24gdGhlbnsNCiAgICAgICAgICBkb3NlUXVhbnQub3JpZ2luYWxUZXh0IGFzIG90IHRoZW57DQogICAgICAgICAgICBvdC5yZWZlcmVuY2UgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24udGV4dDsNCiAgICAgICAgICB9Im90IjsNCiAgICAgICAgICBkb3NlUXVhbnQgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24uZG9zZUFuZFJhdGUgYXMgZG9zYWdlUmF0ZSB0aGVuew0KICAgICAgICAgICAgZG9zZVF1YW50IC0+IGRvc2FnZVJhdGUuZG9zZSA9IGNyZWF0ZSgnUmFuZ2UnKSBhcyBkIHRoZW57DQogICAgICAgICAgICAgIGRvc2VRdWFudCAtPiBkLmxvdyA9IGNyZWF0ZSgnU2ltcGxlUXVhbnRpdHknKSBhcyBsIHRoZW57DQogICAgICAgICAgICAgICAgZG9zZVF1YW50LmxvdyBhcyBsbyAtPiBsLnZhbHVlID0gKGxvLnZhbHVlKTsgDQogICAgICAgICAgICAgICAgZG9zZVF1YW50LmxvdyBhcyBsbyAtPiBsLnVuaXQgPSAobG8udW5pdCk7IA0KICAgICAgICAgICAgICB9ImxvdyI7DQogICAgICAgICAgICAgIGRvc2VRdWFudCAtPiBkLmhpZ2ggPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgaCB0aGVuew0KICAgICAgICAgICAgICAgIGRvc2VRdWFudC5oaWdoIGFzIGhpIC0+IGgudmFsdWUgPSAoaGkudmFsdWUpOw0KICAgICAgICAgICAgICAgIGRvc2VRdWFudC5oaWdoIGFzIGhpIC0+IGgudW5pdCA9IChoaS51bml0KTsgDQogICAgICAgICAgICAgIH0ibG93IjsNCiAgICAgICAgICAgIH0iZCI7DQogICAgICAgICAgfSJkb3NhZ2VSYXRlIjsNCiAgICAgICAgfSJEb3NhZ2UiOw0KICAgICAgICBzYS0+IG1lZGljYXRpb25ScS5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsgICAgIA0KICAgICAgICBzYS0+IG1lZGljYXRpb25ScS5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgc2EgLT4gbWVkaWNhdGlvblJxLnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgICAgICBzYSAtPiBtZWRpY2F0aW9uUnEuaW50ZW50PSdvcmRlciciaW50ZW50IjsNCiAgICAgICAgc2EucmF0ZVF1YW50aXR5IGFzIHJhdGVRdWFudGl0eSAtPiBtZWRpY2F0aW9uUnEuZG9zYWdlSW5zdHJ1Y3Rpb24gPSBjcmVhdGUoJ0Rvc2FnZScpIGFzIGRvc2FnZUluc3RydWN0aW9uMSB0aGVuew0KICAgICAgICAgIHJhdGVRdWFudGl0eS5vcmlnaW5hbFRleHQgYXMgb3QgdGhlbnsNCiAgICAgICAgICAgIG90LnJlZmVyZW5jZSAtPiBkb3NhZ2VJbnN0cnVjdGlvbjEudGV4dDsNCiAgICAgICAgICB9Im90IjsNCiAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24xLmRvc2VBbmRSYXRlIGFzIGRvc2FnZVJhdGUgdGhlbnsNCiAgICAgICAgICAgIHJhdGVRdWFudGl0eSAtPiBkb3NhZ2VSYXRlLnJhdGUgPSBjcmVhdGUoJ1JhbmdlJykgYXMgZCB0aGVuew0KICAgICAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZC5sb3cgPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgbCB0aGVuew0KICAgICAgICAgICAgICAgIHJhdGVRdWFudGl0eS5sb3cgYXMgbG8gLT4gbC52YWx1ZSA9IChsby52YWx1ZSk7IA0KICAgICAgICAgICAgICAgIHJhdGVRdWFudGl0eS5sb3cgYXMgbG8gLT4gbC51bml0ID0gKGxvLnVuaXQpOyANCiAgICAgICAgICAgICAgfSJsb3ciOw0KICAgICAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZC5oaWdoID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIGggdGhlbnsNCiAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkuaGlnaCBhcyBoaSAtPiBoLnZhbHVlID0gKGhpLnZhbHVlKTsNCiAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkuaGlnaCBhcyBoaSAtPiBoLnVuaXQgPSAoaGkudW5pdCk7IA0KICAgICAgICAgICAgICB9ImxvdyI7DQogICAgICAgICAgICB9ImQiOw0KICAgICAgICAgIH0iZG9zYWdlUmF0ZSI7DQogICAgICAgIH0iRG9zYWdlIjsNCg0KICAgICAgIA0KICAgICAgICBzYSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdNZWRpY2F0aW9uJykgYXMgbWVkaWNhdGlvbiwgIG1lZGljYXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ01lZGljYXRpb24nLCBtZWRpY2F0aW9uQWRtLm1lZGljYXRpb24gID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvbi8nICsgJW1lZGljYXRpb24uaWQpIHRoZW57DQogICAgICAgIHNhLT4gbWVkaWNhdGlvblJxLm1lZGljYXRpb249Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvbi8nICsgJW1lZGljYXRpb24uaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgIHNhLmFkbWluaXN0cmF0aW9uVW5pdENvZGUgLT4gbWVkaWNhdGlvbi5mb3JtOw0KICAgICAgICAgIHNhLmNvbnN1bWFibGUgYXMgY29uc3VtYWJsZSB0aGVuIHsNCiAgICAgICAgICAgIGNvbnN1bWFibGUubWFudWZhY3R1cmVkUHJvZHVjdCBhcyBtYW51ZmFjIHRoZW57DQogICAgICAgICAgICAgICAgbWFudWZhYy5tYW51ZmFjdHVyZWRNYXRlcmlhbCBhcyBtYW51cHJvZCB0aGVuew0KICAgICAgICAgICAgICAgICAgbWFudXByb2QuY29kZSAtPiBtZWRpY2F0aW9uLmNvZGU7DQogICAgICAgICAgICAgDQogICAgICAgICAgfSJtYW51ZmFjdHByb2R1Y3QiOyANCiAgICAgICAgfSJtYW51ZmFjIjsNCiAgICAgIH0iY29uc3VtYWJsZSI7DQoNCiAgICAgICAgICBzYS5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeVJSIHRoZW57DQogICAgICAgICAgICBlbnRyeVJSLm9ic2VydmF0aW9uIGFzIG9ic2VydmF0aW9uIHRoZW57DQogICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi5jb2RlIHdoZXJlIGRpc3BsYXlOYW1lPSdHcmFtbWF0dXJhJyAtPiBtZWRpY2F0aW9uLmluZ3JlZGllbnQgYXMgaW5ncmVkaWVudCB0aGVuew0KICAgICAgICAgICAgICAgICAgICBzYS5jb25zdW1hYmxlIGFzIGNvbnN1bWFibGUgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdW1hYmxlLm1hbnVmYWN0dXJlZFByb2R1Y3QgYXMgbWFudWZhY3R1cmVkUHJvZHVjdCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZWRQcm9kdWN0Lm1hbnVmYWN0dXJlZE1hdGVyaWFsIGFzIG1hbnVmYWN0dXJlZE1hdGVyaWFsIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZWRNYXRlcmlhbC5jb2RlIGFzIGNvZGUgLT4gaW5ncmVkaWVudC5pdGVtID0gY3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyB2YWx1ZSB0aGVuIENFQ29kZWFibGVDb25jZXB0KGNvZGUsdmFsdWUpICJDRSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0ibWF0ZXJpYWwiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0icHJvZHVjdCI7DQogICAgICAgICAgICAgICAgICAgICAgICB9ImNvbnN1bWFibGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24udmFsdWUgYXMgdmFsdWUgLT4gaW5ncmVkaWVudC5zdHJlbmd0aCBhcyBzdHJlbmd0aCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IHN0cmVuZ3RoLm51bWVyYXRvciBhcyBudW1lcmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gbnVtZXJhdG9yLnZhbHVlID0gKHZhbHVlLnZhbHVlKSAidmFsdWVOIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICJudW1lcmF0b3IiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IHN0cmVuZ3RoLmRlbm9taW5hdG9yIGFzIGRlbm9taW5hdG9yIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IGRlbm9taW5hdG9yLnZhbHVlID0gMSAidmFsdWVEIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICJkZW5vbWluYXRvciI7DQogICAgICAgICAgICAgICAgICAgICAgfSJzdHJlbmdodCI7DQogICAgICAgICAgICAgICAgICAgIH0iaW5ncmVkaWVudCI7DQogICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLmNvZGUgd2hlcmUgZGlzcGxheU5hbWU9J1F1YW50aXTDoCBuZWxsYSBDb25mZXppb25lJyB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24udmFsdWUgYXMgdmFsdWUgLT4gbWVkaWNhdGlvbi5hbW91bnQgYXMgYW1vdW50IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gYW1vdW50Lm51bWVyYXRvciAgYXMgbnVtZXJhdG9yIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IG51bWVyYXRvci52YWx1ZSA9ICh2YWx1ZS52YWx1ZSkgInZhbHVlTiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAibnVtZXJhdG9yIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBhbW91bnQuZGVub21pbmF0b3IgYXMgZGVub21pbmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gZGVub21pbmF0b3IudmFsdWUgPSAxICJ2YWx1ZUQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gImRlbm9taW5hdG9yIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0iYW1vdW50IjsNCiAgICAgICAgICAgICAgICAgIH0icXVhbnRpdGEiOw0KICAgICAgICAgICAgICB9Im9icyI7DQogICAgICAgICAgfSJlbnRyeVJyIjsNCg0KICAgICAgICB9Im1lZGljYXRpb24iOw0KICAgICAgICAgIHNhLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5UmVsYXRpb25zaGlwIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIGVudHJ5UmVsYXRpb25zaGlwLnN1cHBseSBhcyBzdXAgLT4gbWVkaWNhdGlvblJxLmRpc3BlbnNlUmVxdWVzdCBhcyBkaXNwcmVxIHRoZW4geyAgICAgICAgICAgICAgDQogICAgICAgICAgICAgIHN1cCAtPiBkaXNwcmVxLnF1YW50aXR5ID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIHF1YW50aXR5IHRoZW57DQogICAgICAgICAgICAgICAgc3VwLnF1YW50aXR5IGFzIHEgLT4gcXVhbnRpdHkudmFsdWUgPSAocS52YWx1ZSk7DQogICAgICAgICAgICAgIH0icXVhbnRpdHkiOyAgICAgICAgICAgICAgDQogICAgICAgICAgICB9InN1YiI7ICAgICAgICAgICANCiAgICAgICAgICB9ImVudHJ5UiI7DQogICAgICANCiAgICAgIHNhLnBhcnRpY2lwYW50IGFzIHBhcnRpY2lwYW50IHRoZW4gew0KICAgICAgICBwYXJ0aWNpcGFudC50aW1lIGFzIHQgLT4gbWVkaWNhdGlvblJxLmF1dGhvcmVkT24gPSAodC52YWx1ZSk7ICAgICANCiAgICAgICAgcGFydGljaXBhbnQucGFydGljaXBhbnRSb2xlIGFzIHBhcnRpY2lwYW50UiAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciAgdGhlbnsNCiAgICAgICAgICBwYXJ0aWNpcGFudFItPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICBwYXJ0aWNpcGFudFItPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgIHBhcnRpY2lwYW50UiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgcGFydGljaXBhbnRSIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L1RlcmFwaWFGYXJtYWNvbG9naWNhUmljb3Zlcm8vcGFydGljaXBhbnQnImNvZGUiOw0KICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgICAgcGFydGljaXBhbnRSLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0OyANCiAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgLG1lZGljYXRpb25ScS5yZXF1ZXN0ZXIgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSJhdXQiOw0KICAgICAgICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgICAgICAgcGFydGljaXBhbnRSLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICAgICAgICBwYXJ0aWNpcGFudFIucGxheWluZ0VudGl0eSBhcyBhc3NpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgYXNzaS5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgICAgIH0iYXNzaSI7DQogICAgICAgICAgICB9InBlcmYiOw0KICAgICAgIA0KICAgICAgICBzYS5lZmZlY3RpdmVUaW1lOiBFSVZMIGFzIGVmZiAtPiBtZWRpY2F0aW9uUnEuZG9zYWdlSW5zdHJ1Y3Rpb24gPSBjcmVhdGUoJ0Rvc2FnZScpIGFzIGRvc2FnZSB0aGVuew0KICAgICAgICAgIGVmZiAtPiBkb3NhZ2UudGltaW5nID0gY3JlYXRlKCdUaW1pbmcnKSBhcyB0aW1pbmcgdGhlbiB7DQogICAgICAgICAgICBlZmYgLT4gdGltaW5nLnJlcGVhdCBhcyByZXAgdGhlbiB7DQogICAgICAgICAgICAgIGVmZi5ldmVudCBhcyBldiAtPiByZXAud2hlcmUgPSAoZXYuY29kZSk7DQogICAgICAgICAgICB9InJlcCI7DQogICAgICAgICAgfSJ0aW1pbmciOw0KICAgICAgICB9InBlcmlvZCI7DQogIA0KICAgICAgICBzYS5lZmZlY3RpdmVUaW1lOiBUUyBhcyBlZmYgLT4gbWVkaWNhdGlvblJxLmRvc2FnZUluc3RydWN0aW9uID0gY3JlYXRlKCdEb3NhZ2UnKSBhcyBkb3NhZ2UsIGRvc2FnZS50aW1pbmcgPSBjcmVhdGUoJ1RpbWluZycpIGFzIHRpbWluZywgdGltaW5nLmV2ZW50ID0gKGVmZi52YWx1ZSkgInRpbSI7DQogIA0KICAgICAgICAgIA0KICAgICAgICBzYS5lZmZlY3RpdmVUaW1lOiBQSVZMX1RTIGFzIGVmZiAtPiBtZWRpY2F0aW9uQWRtLmRvc2FnZSA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgZG9zYWdlIHRoZW57DQogICAgICAgICAgZWZmIC0+IGRvc2FnZS5yYXRlID0gY3JlYXRlKCdSYXRpbycpIGFzIHJhdGlvIHRoZW57DQogICAgICAgICAgICBlZmYgLT4gcmF0aW8ubnVtZXJhdG9yID0gY3JlYXRlKCdRdWFudGl0eScpIGFzIHF1YW4gdGhlbnsNCiAgICAgICAgICAgICAgZWZmLnBlcmlvZCBhcyBwZXIgLT4gIHF1YW4udmFsdWUgPSAocGVyLnZhbHVlKTsNCiAgICAgICAgICAgICAgZWZmLnBlcmlvZCBhcyBwZXIgLT4gIHF1YW4udW5pdCA9IChwZXIudW5pdCk7DQogICAgICAgICAgICB9InF1YW50aSI7DQogICAgICAgICAgICBlZmYgLT4gcmF0aW8uZGVub21pbmF0b3IgPSBjcmVhdGUoJ1F1YW50aXR5JykgYXMgcXVhbiB0aGVuew0KICAgICAgICAgICAgICBlZmYucGVyaW9kIC0+ICBxdWFuLnZhbHVlID0gJzEnOw0KICAgICAgICAgICAgICBlZmYucGVyaW9kIGFzIHBlciAtPiAgcXVhbi51bml0ID0gKHBlci51bml0KTsNCiAgICAgICAgICAgIH0icXVhbnRpIjsNCiAgICAgICAgICB9InJhdGlvIjsNCiAgICAgICAgfSJlZmYiOyAgICAgDQoNCiAgICAgIH0iTWVkaWNhdGlvbnJlcXVlc3QiOw0KICAgIH0ic2EiOw0KDQogIH0iZW50cnkiOw0KfSJzYSI7DQp9DQoNCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRTb3R0b1NlY3Rpb25PQlMoc291cmNlIHNyYyA6IFNlY3Rpb24sICB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyICwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50KXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+YnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpLCB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICBjZGFUZXh0IC0+IGZoaXJUZXh0LnN0YXR1cyA9ICdnZW5lcmF0ZWQnICJuYXJyYXRpdmVTdGF0dXMiOw0KICAgIGNkYVRleHQgYXMgdCAtPiBmaGlyVGV4dC5kaXYgPSB0ICJuYXJyYXRpdmVUZXh0IjsNCiAgIA0KICAgIHNyYy5jb2RlIC0+IG9ic2VydmF0aW9uLmNvZGU7DQogICAgc3JjLT5vYnNlcnZhdGlvbi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICBzcmMtPm9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOw0KICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgc3JjLT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgIH0ic3RhdHVzY29kZSI7DQogICAgY2RhVGV4dC0+b2JzZXJ2YXRpb24ubm90ZSBhcyBub3RlIHRoZW57DQogICAgICBjZGFUZXh0IGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7ICAgICAgDQogICAgfSJyZWZlcmVuY2UiOw0KICB9ICJjZGFUZXh0IjsNCn0NCg0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNvdHRvU2VjdGlvbk1TKHNvdXJjZSBzcmMgOiBTZWN0aW9uLCAgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LHRhcmdldCBlbmMgOiBFbmNvdW50ZXIpew0KICBzcmMudGl0bGUgYXMgdCAtPiB0Z3QudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogIHNyYy50ZXh0IGFzIGNkYVRleHQgLT5idW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvblN0YXRlbWVudCcpIGFzIE1lZGljYXRpb25zdGF0ZW1lbnQsICBNZWRpY2F0aW9uc3RhdGVtZW50LmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25TdGF0ZW1lbnQvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdNZWRpY2F0aW9uU3RhdGVtZW50JywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25TdGF0ZW1lbnQvJyArICVNZWRpY2F0aW9uc3RhdGVtZW50LmlkKSwgdGd0LnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgY2RhVGV4dC0+TWVkaWNhdGlvbnN0YXRlbWVudC5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgIGNkYVRleHQgYXMgdC0+IE1lZGljYXRpb25zdGF0ZW1lbnQubWVkaWNhdGlvbj0gY3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBtZWRpY2F0aW9uLCBtZWRpY2F0aW9uLnRleHQ9dCJ0ZXh0IjsNCiAgICB9InJlZmVyZW5jZSI7DQogICAgc3JjLT5NZWRpY2F0aW9uc3RhdGVtZW50LnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICBzcmMtPk1lZGljYXRpb25zdGF0ZW1lbnQuc3RhdHVzID0ndW5rbm93bicic3RhdHVzIjsNCiAgfSAiY2RhVGV4dCI7DQp9DQoNCg0KZ3JvdXAgT2JzZXJ2YXRpb24gKHNvdXJjZSBvYnMgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgZW5jb3VudGVyIDogRW5jb3VudGVyLCB0YXJnZXQgb2IgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSkgew0KDQogIG9icy0+b2Iuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgb2JzLT5vYi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAicmVmZXJlbmNlIjsgIA0KICBvYnMuY29kZSAtPiBvYi5jb2RlOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYi5zdGF0dXMgPSdmaW5hbCc7DQogIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9iLnN0YXR1cyA9J3JlZ2lzdGVyZWQnOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gb2Iuc3RhdHVzID0nY2FuY2VsbGVkJzsNCiAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2Iuc3RhdHVzID0ncGFydGlhbCc7DQogIG9icyB3aGVyZSBvYnMuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgb2JzLT5vYi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgfSJzdGF0dXNjb2RlIjsNCiAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZlVGltZSAtPiBvYi5lZmZlY3RpdmUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsIHZhbHVlKSAidmFsdWUyIjsNCiAgb2JzIHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKSB0aGVuIHsNCiAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmIC0+IG9iLmVmZmVjdGl2ZSA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCkgInZhbHVlMyI7DQogIH0id2hlcmUiOw0KICBvYnMudmFsdWU6SU5UIGFzIGludC0+b2IudmFsdWU9KGludC52YWx1ZSkgInZhbHVlIjsNCiAgb2JzLnZhbHVlOkJMIGFzIGJvb2xlYW4gLT5vYi52YWx1ZT0oYm9vbGVhbi52YWx1ZSkiYm9vbGVhbiI7DQogIG9icy52YWx1ZTpDRCBhcyB2YWwgdGhlbnsNCiAgICB2YWwtPm9iLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgIHZhbC5vcmlnaW5hbFRleHQgLT4gY2UudGV4dDsNCiAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgIH0gImNvZGUiOw0KICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgdHJhbnNsYXRpb24uY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgIHZhbHVlLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgfSAidmFsdWUiOw0KICAgICAgICB9Ow0KICAgICAgfSAidHJhbnNsYXRpb24iOw0KICAgIH0iY29kaW5nIjsNCiAgfSJ2YWwiOw0KICBvYnMudmFsdWU6Q0UgYXMgdmFsIHRoZW57DQogICAgdmFsLT5vYi52YWx1ZSA9Y3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBjZSB0aGVuIHsNCiAgICB2YWwub3JpZ2luYWxUZXh0IC0+IGNlLnRleHQ7DQogICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICB9ICJjb2RlIjsNCiAgICB2YWwudHJhbnNsYXRpb24gYXMgdHJhbnNsYXRpb24gLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgdHJhbnNsYXRpb24uZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICBxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgIH0gInZhbHVlIjsNCiAgICAgICAgfTsNCiAgICAgIH0gInRyYW5zbGF0aW9uIjsNCiAgICB9ImNvZGluZyI7DQogIH0idmFsIjsNCiAgb2JzLnZhbHVlOlBRIGFzIHZhbCB0aGVuew0KICAgIHZhbC0+b2IudmFsdWUgPSBjcmVhdGUoJ1F1YW50aXR5JykgYXMgcXVhbnRpdHkgdGhlbiB7DQogICAgdmFsLnZhbHVlIGFzIHZhbHVlLT5xdWFudGl0eS52YWx1ZSA9IHZhbHVlOw0KICAgIHZhbC51bml0IGFzIHVuaXQtPiBxdWFudGl0eS51bml0ID0gdW5pdCAidW5pdCI7DQogICAgfSJxdWFudGl0eSI7DQogIH0idmFsdWVRdWFudGl0eSI7DQogIG9icy52YWx1ZTpTVCBhcyB2YWx1ZS0+b2IudmFsdWUgPWNyZWF0ZSgnc3RyaW5nJyksb2IudmFsdWU9ICh2YWx1ZS5kYXRhU3RyaW5nKSAidmFsdWUiOw0KICBvYnMuaW50ZXJwcmV0YXRpb25Db2RlIC0+IG9iLmludGVycHJldGF0aW9uOw0KICAgIG9icy5tZXRob2RDb2RlIC0+IG9iLm1ldGhvZDsNCiAgICBvYnMucmVmZXJlbmNlUmFuZ2UgYXMgcmVmUmFuZ2UgLT4gb2IucmVmZXJlbmNlUmFuZ2UgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlZiB0aGVuIHsNCiAgICAgIHJlZlJhbmdlLm9ic2VydmF0aW9uUmFuZ2UgYXMgb2JzUmFuZ2UgLT4gcmVmLmxvdyA9IGNyZWF0ZSgnU2ltcGxlUXVhbnRpdHknKSBhcyBMb3cgIHRoZW4gew0KICAgICAgICAgIG9ic1JhbmdlLnZhbHVlOiBJVkxfUFEgYXMgdiAgdGhlbiB7DQogICAgICAgICAgICB2LmxvdyBhcyBsMSB0aGVuIHsNCiAgICAgICAgICAgICAgbDEudmFsdWUgYXMgZGVjVmFsdWUtPiBMb3cudmFsdWUgPSBkZWNWYWx1ZTsNCiAgICAgICAgICAgICAgbDEudW5pdCBhcyBVbml0LT4gTG93LnVuaXQgPSBVbml0Ow0KICAgICAgICAgICAgfSJkZWNWYWx1ZSI7ICAgICAgICAgIA0KICAgICAgICAgIH0iSVZMUFEiOyAgICAgICAgICAgICAgICAgICAgICANCiAgICAgIH0ib2JzUmFuZ2UiOyAgICAgICAgICAgICAgDQogICAgfSJyZWZSYW5nZSI7ICANCn0NCg0KDQpncm91cCBPYnNlcnZhdGlvbkNvbnN1bGVuemEgKHNvdXJjZSBvYnMgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgZW5jb3VudGVyIDogRW5jb3VudGVyLCB0YXJnZXQgb2IgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSkgew0KICAgIA0KICBvYnMtPm9iLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogIG9icy0+b2IuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgInJlZmVyZW5jZSI7ICANCiAgb2JzLmNvZGUgLT4gb2IuY29kZTsNCiAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nY29tcGxldGVkJykgLT4gb2Iuc3RhdHVzID0nZmluYWwnOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhY3RpdmUnKSAtPiBvYi5zdGF0dXMgPSdyZWdpc3RlcmVkJzsNCiAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nYWJvcnRlZCcpIC0+IG9iLnN0YXR1cyA9J2NhbmNlbGxlZCc7DQogIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J3N1c3BlbmRlZCcpIC0+IG9iLnN0YXR1cyA9J3BhcnRpYWwnOw0KICBvYnMgd2hlcmUgb2JzLnN0YXR1c0NvZGUuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgb2JzLT5vYi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICB9InN0YXR1c2NvZGUiOw0KICBvYnMuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIC0+IG9iLmVmZmVjdGl2ZSA9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB2YWx1ZSB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZlVGltZSwgdmFsdWUpICJ2YWx1ZTJjIjsNCiAgb2JzIHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKSB0aGVuIHsNCiAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmIC0+IG9iLmVmZmVjdGl2ZSA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCkgInZhbHVlM2MiOw0KICAgfSJ3aGVyZSI7DQogIG9icy52YWx1ZTpJTlQgYXMgaW50LT5vYi52YWx1ZT0oaW50LnZhbHVlKSAidmFsdWUiOw0KICBvYnMudmFsdWU6QkwgYXMgYm9vbGVhbiAtPm9iLnZhbHVlPShib29sZWFuLnZhbHVlKSJib29sZWFuIjsNCiAgb2JzLnZhbHVlOkNFIGFzIHZhbCB0aGVuew0KICAgIHZhbC0+b2IudmFsdWUgPWNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgY2UgdGhlbiB7DQogICAgICB2YWwub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgICAgICBvcmlnaW5hbFRleHQucmVmZXJlbmNlIGFzIHJlZmVyZW5jZS0+IGNlLnRleHQ9cmVmZXJlbmNlOw0KICAgICAgfSJvcmlnaW5sdGV4dCI7DQogICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICB2YWwuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICB2YWwuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgfSJjb2RlIjsNCiAgICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICB0cmFuc2xhdGlvbi5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgdmFsdWUuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgfSJ2YWx1ZSI7DQogICAgICAgIH0icXVhbGlmaWVyIjsNCiAgICAgIH0idHJhbnNsYXRpb24iOw0KICAgIH0iY29kaW5nIjsNCiAgfSJ2YWwiOw0KICBvYnMudmFsdWU6Q0QgYXMgdmFsIHRoZW57DQogICAgdmFsLT5vYi52YWx1ZSA9Y3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBjZSB0aGVuIHsNCiAgICB2YWwub3JpZ2luYWxUZXh0IC0+IGNlLnRleHQ7DQogICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICB9ICJjb2RlIjsNCiAgICB2YWwudHJhbnNsYXRpb24gYXMgdHJhbnNsYXRpb24gLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgdHJhbnNsYXRpb24uZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICBxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgIH0gInZhbHVlIjsNCiAgICAgICAgfTsNCiAgICAgIH0gInRyYW5zbGF0aW9uIjsNCiAgICB9ImNvZGluZyI7DQogIH0idmFsIjsNCg0KICBvYnMudmFsdWU6UFEgYXMgdmFsIHRoZW57DQogICAgdmFsLT5vYi52YWx1ZSA9IGNyZWF0ZSgnUXVhbnRpdHknKSBhcyBxdWFudGl0eSB0aGVuIHsNCiAgICB2YWwudmFsdWUgYXMgdmFsdWUtPnF1YW50aXR5LnZhbHVlID0gdmFsdWU7DQogICAgdmFsLnVuaXQgYXMgdW5pdC0+IHF1YW50aXR5LnVuaXQgPSB1bml0ICJ1bml0IjsNCiAgICB9InF1YW50aXR5IjsNCiAgfSJ2YWx1ZVF1YW50aXR5IjsNCg0KICBvYnMudmFsdWU6U1QgYXMgdmFsdWUtPm9iLnZhbHVlID1jcmVhdGUoJ3N0cmluZycpLG9iLnZhbHVlPSAodmFsdWUuZGF0YVN0cmluZykgInZhbHVlIjsNCg0KICAgIG9icy0+b2Iuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgb2JzLT5vYi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAicmVmZXJlbmNlIjsNCiAgICBvYnMuaW50ZXJwcmV0YXRpb25Db2RlIC0+IG9iLmludGVycHJldGF0aW9uOw0KICAgIG9icy5tZXRob2RDb2RlIC0+IG9iLm1ldGhvZDsNCiAgICBvYnMucmVmZXJlbmNlUmFuZ2UgYXMgcmVmUmFuZ2UgLT4gb2IucmVmZXJlbmNlUmFuZ2UgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlZiB0aGVuIHsNCiAgICAgIHJlZlJhbmdlLm9ic2VydmF0aW9uUmFuZ2UgYXMgb2JzUmFuZ2UgLT4gcmVmLmxvdyA9IGNyZWF0ZSgnU2ltcGxlUXVhbnRpdHknKSBhcyBMb3cgIHRoZW4gew0KICAgICAgICAgIG9ic1JhbmdlLnZhbHVlOiBJVkxfUFEgYXMgdiAgdGhlbiB7DQogICAgICAgICAgICB2LmxvdyBhcyBsMSB0aGVuIHsNCiAgICAgICAgICAgICAgbDEudmFsdWUgYXMgZGVjVmFsdWUtPiBMb3cudmFsdWUgPSBkZWNWYWx1ZTsNCiAgICAgICAgICAgICAgbDEudW5pdCBhcyBVbml0LT4gTG93LnVuaXQgPSBVbml0Ow0KICAgICAgICAgICAgfSJkZWNWYWx1ZSI7ICAgICAgICAgIA0KICAgICAgICAgIH0iSVZMUFEiOyAgICAgICAgICAgICAgICAgICAgICANCiAgICAgIH0ib2JzUmFuZ2UiOyAgICAgICAgICAgICAgDQogICAgfSJyZWZSYW5nZSI7ICANCg0KDQogICAgb2JzLnBlcmZvcm1lciBhcyBwZXJmb3JtZXIgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEgdGhlbnsNCiAgICAgIHBlcmZvcm1lci5hc3NpZ25lZEVudGl0eSBhcyBhc3NFbnRpdHkgdGhlbiB7DQoNCiAgICAgICAgYXNzRW50aXR5LT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgIGFzc0VudGl0eS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgIGFzc0VudGl0eSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgIGFzc0VudGl0eSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9Db25zdWxlbnphL3BlcmZvcm1lciciY29kZSI7DQogICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICB9Im1ldGEiOw0KDQogICAgICAgIGFzc0VudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0OyANCiAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBvYi5wZXJmb3JtZXIgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSJhdXQiOw0KICAgICAgICAgIH0iciI7DQogICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgYXNzRW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgIGFzc0VudGl0eS5hc3NpZ25lZFBlcnNvbiBhcyBhc3NpIHRoZW4gew0KICAgICAgICAgIGFzc2kubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgfSJhc3NpIjsNCiAgICAgIH0iYXNzRW50aXR5IjsNCiAgICB9InBlcmYiOw0KDQogICAgb2JzLnBhcnRpY2lwYW50IGFzIHBhcnRpY2lwYW50IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1NlcnZpY2VSZXF1ZXN0JykgYXMgc2VydmljZVJlcXVlc3QsICBzZXJ2aWNlUmVxdWVzdC5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9TZXJ2aWNlUmVxdWVzdC8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ1NlcnZpY2VSZXF1ZXN0Jywgb2IuYmFzZWRPbiAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9TZXJ2aWNlUmVxdWVzdC8nICsgJXNlcnZpY2VSZXF1ZXN0LmlkKSB0aGVuew0KICAgICAgcGFydGljaXBhbnQudGltZSBhcyB0IC0+IHNlcnZpY2VSZXF1ZXN0LmF1dGhvcmVkT24gPSAodC52YWx1ZSk7DQogICAgICBvYnMtPnNlcnZpY2VSZXF1ZXN0LnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogICAgICBvYnMtPnNlcnZpY2VSZXF1ZXN0LmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgb2JzIC0+IHNlcnZpY2VSZXF1ZXN0LnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgICAgb2JzIC0+IHNlcnZpY2VSZXF1ZXN0LmludGVudD0nb3JkZXInImludGVudCI7DQogICAgICBwYXJ0aWNpcGFudC5wYXJ0aWNpcGFudFJvbGUgYXMgcGFydGljaXBhbnRSb2xlIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyIHRoZW57DQogICAgICAgIHBhcnRpY2lwYW50Um9sZS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvQ29uc3VsZW56YS9wYXJ0aWNpcGFudCciY29kZSI7DQogICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICB9Im1ldGEiOw0KDQogICAgICAgIHBhcnRpY2lwYW50Um9sZS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0OyANCiAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMywgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDMpLCBzZXJ2aWNlUmVxdWVzdC5wZXJmb3JtZXIgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSJhdXQiOw0KICAgICAgICAgIH0iciI7DQogICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgcGFydGljaXBhbnRSb2xlLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgIHBhcnRpY2lwYW50Um9sZS5wbGF5aW5nRW50aXR5IGFzIHBlIHRoZW57DQogICAgICAgICAgcGUubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgfSJwZSI7DQogICAgICB9InBhcnRpY2lwYW50Um9sZSI7DQogICAgfSJwYXJ0aWNpcGFudCI7DQp9DQoNCmdyb3VwIE9ic2VydmF0aW9uRXNhbWlEdXJhbnRlUmljb3Zlcm8gKHNvdXJjZSBvYnMgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgZW5jb3VudGVyIDogRW5jb3VudGVyLCB0YXJnZXQgb2IgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSkgew0KICAgIA0KICBvYnMtPm9iLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogIG9icy0+b2IuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgInJlZmVyZW5jZSI7ICANCiAgb2JzLmNvZGUgLT4gb2IuY29kZTsNCiAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nY29tcGxldGVkJykgLT4gb2Iuc3RhdHVzID0nZmluYWwnOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhY3RpdmUnKSAtPiBvYi5zdGF0dXMgPSdyZWdpc3RlcmVkJzsNCiAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nYWJvcnRlZCcpIC0+IG9iLnN0YXR1cyA9J2NhbmNlbGxlZCc7DQogIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J3N1c3BlbmRlZCcpIC0+IG9iLnN0YXR1cyA9J3BhcnRpYWwnOw0KICBvYnMgd2hlcmUgb2JzLnN0YXR1c0NvZGUuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogIG9icy0+b2Iuc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgfSJzdGF0dXNjb2RlIjsNCiAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZlVGltZSAtPiBvYi5lZmZlY3RpdmUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsIHZhbHVlKSAidmFsdWUyciI7DQogIG9icyB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkgdGhlbiB7DQogIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZiAtPiBvYi5lZmZlY3RpdmUgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXJpb2QpICJ2YWx1ZTNyIjsNCiAgfSJ3aGVyZSI7DQogIG9icy52YWx1ZTpJTlQgYXMgaW50LT5vYi52YWx1ZT0oaW50LnZhbHVlKSAidmFsdWUiOw0KICBvYnMudmFsdWU6QkwgYXMgYm9vbGVhbiAtPm9iLnZhbHVlPShib29sZWFuLnZhbHVlKSJib29sZWFuIjsNCiAgb2JzLnZhbHVlOkNFIGFzIHZhbCB0aGVuew0KICAgIHZhbC0+b2IudmFsdWUgPWNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgY2UgdGhlbiB7DQogICAgICB2YWwub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgICAgICBvcmlnaW5hbFRleHQucmVmZXJlbmNlIGFzIHJlZmVyZW5jZS0+IGNlLnRleHQ9cmVmZXJlbmNlOw0KICAgICAgfSJvcmlnaW5sdGV4dCI7DQogICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICB2YWwuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICB2YWwuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgfSJjb2RlIjsNCiAgICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICB0cmFuc2xhdGlvbi5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgdmFsdWUuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgfSJ2YWx1ZSI7DQogICAgICAgIH0icXVhbGlmaWVyIjsNCiAgICAgIH0idHJhbnNsYXRpb24iOw0KICAgIH0iY29kaW5nIjsNCiAgfSJ2YWwiOw0KICBvYnMudmFsdWU6Q0QgYXMgdmFsIHRoZW57DQogICAgdmFsLT5vYi52YWx1ZSA9Y3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBjZSB0aGVuIHsNCiAgICB2YWwub3JpZ2luYWxUZXh0IC0+IGNlLnRleHQ7DQogICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICB9ICJjb2RlIjsNCiAgICB2YWwudHJhbnNsYXRpb24gYXMgdHJhbnNsYXRpb24gLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgdHJhbnNsYXRpb24uZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICBxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgIH0gInZhbHVlIjsNCiAgICAgICAgfTsNCiAgICAgIH0gInRyYW5zbGF0aW9uIjsNCiAgICB9ImNvZGluZyI7DQogIH0idmFsIjsNCg0KICBvYnMudmFsdWU6UFEgYXMgdmFsIHRoZW57DQogICAgdmFsLT5vYi52YWx1ZSA9IGNyZWF0ZSgnUXVhbnRpdHknKSBhcyBxdWFudGl0eSB0aGVuIHsNCiAgICB2YWwudmFsdWUgYXMgdmFsdWUtPnF1YW50aXR5LnZhbHVlID0gdmFsdWU7DQogICAgdmFsLnVuaXQgYXMgdW5pdC0+IHF1YW50aXR5LnVuaXQgPSB1bml0ICJ1bml0IjsNCiAgICB9InF1YW50aXR5IjsNCiAgfSJ2YWx1ZVF1YW50aXR5IjsNCiAgb2JzLnZhbHVlOlNUIGFzIHZhbHVlLT5vYi52YWx1ZSA9Y3JlYXRlKCdzdHJpbmcnKSxvYi52YWx1ZT0gKHZhbHVlLmRhdGFTdHJpbmcpICJ2YWx1ZSI7DQogICAgb2JzLT5vYi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICBvYnMtPm9iLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpICJyZWZlcmVuY2UiOw0KICAgIG9icy5pbnRlcnByZXRhdGlvbkNvZGUgLT4gb2IuaW50ZXJwcmV0YXRpb247DQogICAgb2JzLm1ldGhvZENvZGUgLT4gb2IubWV0aG9kOw0KICAgIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZiAtPiBvYi5lZmZlY3RpdmUgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlciB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXIpOw0KICAgIG9icy5yZWZlcmVuY2VSYW5nZSBhcyByZWZSYW5nZSAtPiBvYi5yZWZlcmVuY2VSYW5nZSA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVmIHRoZW4gew0KICAgICAgcmVmUmFuZ2Uub2JzZXJ2YXRpb25SYW5nZSBhcyBvYnNSYW5nZSAtPiByZWYubG93ID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIExvdyAgdGhlbiB7DQogICAgICAgICAgb2JzUmFuZ2UudmFsdWU6IElWTF9QUSBhcyB2ICB0aGVuIHsNCiAgICAgICAgICAgIHYubG93IGFzIGwxIHRoZW4gew0KICAgICAgICAgICAgICBsMS52YWx1ZSBhcyBkZWNWYWx1ZS0+IExvdy52YWx1ZSA9IGRlY1ZhbHVlOw0KICAgICAgICAgICAgICBsMS51bml0IGFzIFVuaXQtPiBMb3cudW5pdCA9IFVuaXQ7DQogICAgICAgICAgICB9ImRlY1ZhbHVlIjsgICAgICAgICAgDQogICAgICAgICAgfSJJVkxQUSI7ICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgfSJvYnNSYW5nZSI7ICAgICAgICAgICAgICANCiAgICB9InJlZlJhbmdlIjsgIA0KDQogICAgb2JzLnBlcmZvcm1lciBhcyBwZXJmb3JtZXIgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEgdGhlbnsNCiAgICAgIHBlcmZvcm1lci5hc3NpZ25lZEVudGl0eSBhcyBhc3NFbnRpdHkgdGhlbiB7DQoNCiAgICAgICAgYXNzRW50aXR5LT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgIGFzc0VudGl0eS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgIGFzc0VudGl0eSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgIGFzc0VudGl0eSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9Fc2FtaUR1cmFudGVSaWNvdmVyby9wZXJmb3JtZXInImNvZGUiOw0KICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgfSJtZXRhIjsNCg0KICAgICAgICBhc3NFbnRpdHkuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsgDQogICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgb2IucGVyZm9ybWVyICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkiYXV0IjsNCiAgICAgICAgICB9InIiOw0KICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgIGFzc0VudGl0eS5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICBhc3NFbnRpdHkuYXNzaWduZWRQZXJzb24gYXMgYXNzaSB0aGVuIHsNCiAgICAgICAgICBhc3NpLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgIH0iYXNzaSI7DQogICAgICB9ImFzc0VudGl0eSI7DQogICAgfSJwZXJmIjsNCiAgICANCiAgICBvYnMucGFydGljaXBhbnQgYXMgcGFydGljaXBhbnQgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnU2VydmljZVJlcXVlc3QnKSBhcyBzZXJ2aWNlUmVxdWVzdCwgIHNlcnZpY2VSZXF1ZXN0LmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1NlcnZpY2VSZXF1ZXN0LycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnU2VydmljZVJlcXVlc3QnLCBvYi5iYXNlZE9uICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1NlcnZpY2VSZXF1ZXN0LycgKyAlc2VydmljZVJlcXVlc3QuaWQpIHRoZW57DQogICAgICBwYXJ0aWNpcGFudC50aW1lIGFzIHQgLT4gc2VydmljZVJlcXVlc3QuYXV0aG9yZWRPbiA9ICh0LnZhbHVlKTsNCiAgICAgIG9icy0+c2VydmljZVJlcXVlc3Quc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICAgIG9icy0+c2VydmljZVJlcXVlc3QuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgInJlZmVyZW5jZSI7DQogICAgICBvYnMgLT4gc2VydmljZVJlcXVlc3Quc3RhdHVzPSdhY3RpdmUnInN0YXR1cyI7DQogICAgICBvYnMgLT4gc2VydmljZVJlcXVlc3QuaW50ZW50PSdvcmRlciciaW50ZW50IjsNCg0KICAgICAgcGFydGljaXBhbnQucGFydGljaXBhbnRSb2xlIGFzIHBhcnRpY2lwYW50Um9sZSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuew0KICAgICAgICBwYXJ0aWNpcGFudFJvbGUtPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgcGFydGljaXBhbnRSb2xlLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgcGFydGljaXBhbnRSb2xlIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgcGFydGljaXBhbnRSb2xlIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0VzYW1pRHVyYW50ZVJpY292ZXJvL3BhcnRpY2lwYW50JyJjb2RlIjsNCiAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgIH0ibWV0YSI7DQoNCiAgICAgICAgcGFydGljaXBhbnRSb2xlLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7IA0KICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQzLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMyksIHNlcnZpY2VSZXF1ZXN0LnBlcmZvcm1lciAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpImF1dCI7DQogICAgICAgICAgfSJyIjsNCiAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICBwYXJ0aWNpcGFudFJvbGUuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgICAgcGFydGljaXBhbnRSb2xlLnBsYXlpbmdFbnRpdHkgYXMgcGUgdGhlbnsNCiAgICAgICAgICBwZS5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICB9InBlIjsNCiAgICAgIH0icGFydGljaXBhbnRSb2xlIjsNCiAgIH0icGFydGljaXBhbnQiOw0KfQ0KDQpncm91cCBwZXJpb2RUaW1pbmcoc291cmNlIGVmZmVjdGl2ZVRpbWU6IFBJVkxfVFMsIHRhcmdldCB0aW1pbmc6IFRpbWluZyl7DQogIGVmZmVjdGl2ZVRpbWUgLT4gdGltaW5nLnJlcGVhdCBhcyByIHRoZW57DQogICAgZWZmZWN0aXZlVGltZS5wZXJpb2QgYXMgcCAtPiByLnBlcmlvZCA9IChwLnZhbHVlKTsgDQogICAgZWZmZWN0aXZlVGltZS5wZXJpb2QgYXMgcCAtPiByLnBlcmlvZFVuaXQgPSAocC51bml0KTsgICANCiAgfSJyZXBlYXQiOw0KfQ0KDQpncm91cCBBY3QgKHNvdXJjZSBjZGE6IEFjdCwgdGFyZ2V0IHBhdCA6IFBhdGllbnQsIHRhcmdldCBhYyA6IERpYWdub3N0aWNSZXBvcnQsIHRhcmdldCBlbmMgOiBFbmNvdW50ZXIsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUpew0KICBjZGEuY29kZSAtPiBhYy5jb2RlOw0KICBjZGEuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYi5zdGF0dXMgPSdmaW5hbCc7DQogIGNkYS5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9iLnN0YXR1cyA9J3JlZ2lzdGVyZWQnOw0KICBjZGEuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gb2Iuc3RhdHVzID0nY2FuY2VsbGVkJzsNCiAgY2RhLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2Iuc3RhdHVzID0ncGFydGlhbCc7DQogIGNkYS5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gYWMuZWZmZWN0aXZlID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShlZmZlY3RpdmVUaW1lLCB2YWx1ZSkgInZhbHVlMmEiOw0KICBvYnMgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpIHRoZW4gew0KICBjZGEuZWZmZWN0aXZlVGltZSBhcyBlZmYgLT4gYWMuZWZmZWN0aXZlID0gY3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmYscGVyaW9kKSAidmFsdWUzYSI7DQogICB9IndoZXJlIjsNCiAgY2RhIC0+IGFjLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvJyArICVwYXQuaWQpICJyZWZlcmVuY2UiOw0KICBjZGEgLT4gYWMuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgY2RhLnBhcnRpY2lwYW50ICBhcyBwYXJ0LT4gIGVuYy5wYXJ0aWNpcGFudCBhcyBwYXJ0aWNpcGFudCB0aGVuew0KICAgICBwYXJ0ICAtPiBwYXJ0aWNpcGFudC50eXBlIGFzIHR5cGUgdGhlbiB7IA0KICAgICAgICAgIHBhcnQgLT4gdHlwZS5jb2RpbmcgYXMgY29kaW5nIHRoZW57DQogICAgICAgICAgICBwYXJ0LT4gY29kaW5nLmNvZGUgPSAocGFydC50eXBlQ29kZSkgImNvZGljZSI7DQogICAgICAgICAgICBwYXJ0LT4gY29kaW5nLnN5c3RlbSA9ICdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVBhcnRpY2lwYXRpb25UeXBlJyAic3lzdGVtIjsNCiAgICAgICAgICB9ICJjb2RlVHlwZSI7IA0KICAgICAgICB9InR5cGUiOw0KICAgIHBhcnQucGFydGljaXBhbnRSb2xlIGFzIHBhcnRpY2lwYW50Um9sZSAtPiAgcGFydGljaXBhbnQuaW5kaXZpZHVhbCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlIHRoZW4gew0KICAgICAgcGFydGljaXBhbnRSb2xlIC0+ICBidW5kbGUuZW50cnkgYXMgZSwgZS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDEpLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgdGhlbiB7IA0KDQogICAgICBwYXJ0aWNpcGFudFJvbGUtPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgIHBhcnRpY2lwYW50Um9sZS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgcGFydGljaXBhbnRSb2xlIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0FjdC9wYXJ0aWNpcGFudCciY29kZSI7DQogICAgICAgIH0iY29kaW5nIjsNCiAgICAgIH0ibWV0YSI7DQogICAgICBwYXJ0aWNpcGFudFJvbGUuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7DQogICAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgfSJleHQiOw0KICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOw0KICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICBwYXJ0aWNpcGFudFJvbGUucGxheWluZ0VudGl0eSAgYXMgcGxheWluZ0VudGl0eSB0aGVuew0KICAgICAgICAgIHBsYXlpbmdFbnRpdHkubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgfSJwbGF5aW5nRW50aXR5IjsNCiAgICAgICAgIH0icGFydGljaXBhblJvbGVCdW5kIjsgIA0KICAgIH0icGFydGljaXBhbnRSb2xlIjsNCiAgfSJwYXJ0aWNpcGFudCI7DQogIGNkYS5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeVJlbGF0aW9uc2hpcCB0aGVuIHsNCiAgICBlbnRyeVJlbGF0aW9uc2hpcC5vYnNlcnZhdGlvbiBhcyBvYnNlcnZhdGlvbiAtPiAgYnVuZGxlLmVudHJ5IGFzIGUsIGUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzLCAgb2JzLmlkID0gdXVpZCgpIGFzIHV1aWQyLCAgZS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJywgdXVpZDIpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT2JzZXJ2YXRpb24vJywgdXVpZDIpLCBhYy5yZXN1bHQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9icy5pZCkgdGhlbiBPYnNlcnZhdGlvbihvYnNlcnZhdGlvbixwYXQsZW5jLG9icyxidW5kbGUpICJPQlMiOw0KICB9ImVudHJ5UmVsYXRpb25zaGlwIjsNCn0NCg0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25UZXJhcGlhRGltaXNzaW9uZSAoc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHNvdXJjZSBzcmMgOiBTZWN0aW9uLCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQsIHRhcmdldCB0Z3QsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUsIHRhcmdldCBlbmMgOiBFbmNvdW50ZXIpew0KICBzcmMudGl0bGUgYXMgdCAtPiB0Z3QudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkgdGhlbiB7DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogICAgfSAiY2RhVGV4dCI7ICANCiAgfSJleGlzdCI7DQoNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ01lZGljYXRpb25SZXF1ZXN0JykgYXMgbWVkaWNhdGlvblJxLCAgbWVkaWNhdGlvblJxLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25SZXF1ZXN0LycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnTWVkaWNhdGlvblJlcXVlc3QnLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvblJlcXVlc3QvJyArICVtZWRpY2F0aW9uUnEuaWQpIHRoZW4gew0KICAgICAgc3JjLT4gbWVkaWNhdGlvblJxLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogICAgICBzcmMtPiBtZWRpY2F0aW9uUnEuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7DQogICAgICBzcmMgLT4gbWVkaWNhdGlvblJxLnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgICAgc3JjIC0+IG1lZGljYXRpb25ScS5pbnRlbnQ9J29yZGVyJyJpbnRlbnQiOw0KICAgICAgY2RhVGV4dC0+bWVkaWNhdGlvblJxLm1lZGljYXRpb24gPSBjcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNvZGVjb24gdGhlbnsNCiAgICAgICAgY2RhVGV4dCAtPiBjb2RlY29uLnRleHQgPSAnc3RyaW5nJyAidGV4dCI7DQogICAgICB9ImNvZGUiOw0KICAgICAgY2RhVGV4dCAtPiBtZWRpY2F0aW9uUnEubm90ZSBhcyBub3RlIHRoZW57DQogICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgIH0icmVmZXJlbmNlIjsNCiAgICB9ImNkYVRleHQiOw0KICB9IndoZXJlIjsNCg0KICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ01lZGljYXRpb25SZXF1ZXN0JykgYXMgbWVkaWNhdGlvblJxLCAgbWVkaWNhdGlvblJxLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25SZXF1ZXN0LycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnTWVkaWNhdGlvblJlcXVlc3QnLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvblJlcXVlc3QvJyArICVtZWRpY2F0aW9uUnEuaWQpIHRoZW4gew0KICAgICAgICBzcmMtPiBtZWRpY2F0aW9uUnEuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICAgICAgc3JjLT4gbWVkaWNhdGlvblJxLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICBzcmMgLT4gbWVkaWNhdGlvblJxLnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgICAgICBzcmMgLT4gbWVkaWNhdGlvblJxLmludGVudD0nb3JkZXInImludGVudCI7DQogICAgICAgIGVudHJ5MS5zdWJzdGFuY2VBZG1pbmlzdHJhdGlvbiBhcyBzdWJzdHJhY3QgdGhlbnsgICAgICANCiAgICAgICAgICBzdWJzdHJhY3QuY29uc3VtYWJsZSBhcyBjb25zIHRoZW57DQogICAgICAgICAgICBjb25zLm1hbnVmYWN0dXJlZFByb2R1Y3QgYXMgbWFuMSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdNZWRpY2F0aW9uJykgYXMgbWVkaWNhdGlvbiwgIG1lZGljYXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ01lZGljYXRpb24nLCBtZWRpY2F0aW9uUnEubWVkaWNhdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgbWVkcmVmLCAgbWVkcmVmLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb24vJyArICVtZWRpY2F0aW9uLmlkKSB0aGVuIHsNCiAgICAgICAgICAgICAgbWFuMS5tYW51ZmFjdHVyZWRNYXRlcmlhbCBhcyBtbSB0aGVuew0KICAgICAgICAgICAgICAgIG1tLmNvZGUgLT4gbWVkaWNhdGlvbi5jb2RlOw0KICAgICAgICAgICAgICB9Im1tIjsNCiAgICAgICAgICAgICAgc3Vic3RyYWN0LmFkbWluaXN0cmF0aW9uVW5pdENvZGUgLT4gbWVkaWNhdGlvbi5mb3JtOw0KICAgICAgICAgICAgICBzdWJzdHJhY3QuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlSIHRoZW57DQogICAgICAgICAgICAgICAgZW50cnlSLm9ic2VydmF0aW9uIGFzIG9ic2VydmF0aW9uIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLmNvZGUgd2hlcmUgZGlzcGxheU5hbWU9J0dyYW1tYXR1cmEnIC0+IG1lZGljYXRpb24uaW5ncmVkaWVudCBhcyBpbmdyZWRpZW50IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBzdWJzdHJhY3QuY29uc3VtYWJsZSBhcyBjb25zdW1hYmxlIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bWFibGUubWFudWZhY3R1cmVkUHJvZHVjdCBhcyBtYW51ZmFjdHVyZWRQcm9kdWN0IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZWRQcm9kdWN0Lm1hbnVmYWN0dXJlZE1hdGVyaWFsIGFzIG1hbnVmYWN0dXJlZE1hdGVyaWFsIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFudWZhY3R1cmVkTWF0ZXJpYWwuY29kZSBhcyBjb2RlIC0+IGluZ3JlZGllbnQuaXRlbSA9IGNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgdmFsdWUgdGhlbiBDRUNvZGVhYmxlQ29uY2VwdChjb2RlLHZhbHVlKSAiQ0UiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJtYXRlcmlhbCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0icHJvZHVjdCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJjb25zdW1hYmxlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi52YWx1ZSBhcyB2YWx1ZSAtPiBpbmdyZWRpZW50LnN0cmVuZ3RoIGFzIHN0cmVuZ3RoIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IHN0cmVuZ3RoLm51bWVyYXRvciBhcyBudW1lcmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IG51bWVyYXRvci52YWx1ZSA9ICh2YWx1ZS52YWx1ZSkgInZhbHVlTiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gIm51bWVyYXRvciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IHN0cmVuZ3RoLmRlbm9taW5hdG9yIGFzIGRlbm9taW5hdG9yIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBkZW5vbWluYXRvci52YWx1ZSA9IDEgInZhbHVlRCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gImRlbm9taW5hdG9yIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0ic3RyZW5naHQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSJpbmdyZWRpZW50IjsNCiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLmNvZGUgd2hlcmUgZGlzcGxheU5hbWU9J1F1YW50aXTDoCBuZWxsYSBDb25mZXppb25lJyB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLnZhbHVlIGFzIHZhbHVlIC0+IG1lZGljYXRpb24uYW1vdW50IGFzIGFtb3VudCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBhbW91bnQubnVtZXJhdG9yICBhcyBudW1lcmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IG51bWVyYXRvci52YWx1ZSA9ICh2YWx1ZS52YWx1ZSkgInZhbHVlTiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gIm51bWVyYXRvciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IGFtb3VudC5kZW5vbWluYXRvciBhcyBkZW5vbWluYXRvciB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gZGVub21pbmF0b3IudmFsdWUgPSAxICJ2YWx1ZUQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICJkZW5vbWluYXRvciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJhbW91bnQiOw0KICAgICAgICAgICAgICAgICAgICAgICB9InF1YW50aXRhIjsNCiAgICAgICAgICAgICAgICAgICB9Im9icyI7DQogICAgICAgICAgICAgIH0iZW50cnlSIjsNCiAgICAgIA0KICAgICAgICAgICAgICBzdWJzdHJhY3QuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlSZWxhdGlvbnNoaXAgdGhlbnsNCiAgICAgICAgICAgICAgICBlbnRyeVJlbGF0aW9uc2hpcC5zdXBwbHkgYXMgc3VwIC0+IG1lZGljYXRpb25ScS5kaXNwZW5zZVJlcXVlc3QgYXMgZGlzcHJlcSB0aGVuIHsgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBzdXAgLT4gZGlzcHJlcS5xdWFudGl0eSA9IGNyZWF0ZSgnU2ltcGxlUXVhbnRpdHknKSBhcyBxdWFudGl0eSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIHN1cC5xdWFudGl0eSBhcyBxIC0+IHF1YW50aXR5LnZhbHVlID0gKHEudmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICB9InF1YW50aXR5IjsgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIH0ic3ViIjsNCiAgICAgICAgICAgICAgfSJlbnRyeSI7DQogICAgICAgICAgICB9Im1hbjEiOw0KICAgICAgICAgIH0iY29ucyI7DQogICAgICAgICAgc3Vic3RyYWN0LnRleHQgYXMgdHggLT4gbWVkaWNhdGlvblJxLm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgIHR4LnJlZmVyZW5jZSBhcyByZWYgLT4gbm90ZS50ZXh0ID0gKHJlZi52YWx1ZSk7DQogICAgICAgICAgfSJ0eCI7IA0KICAgICAgICAgIHN1YnN0cmFjdC5zdGF0dXNDb2RlIGFzIHN0IC0+IG1lZGljYXRpb25ScS5zdGF0dXMgPSAoc3QuY29kZSk7DQogICAgICAgICAgc3Vic3RyYWN0LmVmZmVjdGl2ZVRpbWU6IElWTF9UUyBhcyBlZmYgLT4gbWVkaWNhdGlvblJxLmRvc2FnZUluc3RydWN0aW9uID0gY3JlYXRlKCdEb3NhZ2UnKSBhcyBkb3NhZ2UgdGhlbnsNCiAgICAgICAgICAgIGVmZiAtPiBkb3NhZ2UudGltaW5nID0gY3JlYXRlKCdUaW1pbmcnKSBhcyB0aW1pbmcgdGhlbiB7DQogICAgICAgICAgICAgIGVmZiAtPiB0aW1pbmcucmVwZWF0IGFzIHJlcCB0aGVuIHsNCiAgICAgICAgICAgICAgICBlZmYgLT4gcmVwLmJvdW5kcyA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCkicGVyaW9kIjsNCiAgICAgICAgICAgICAgfSJyZXAiOw0KICAgICAgICAgICAgfSJ0aW1pbmciOw0KICAgICAgICAgIH0icGVyaW9kIjsNCiAgICAgICAgICBzdWJzdHJhY3QuZWZmZWN0aXZlVGltZTogRUlWTF9UUyBhcyBlZmYgLT4gbWVkaWNhdGlvblJxLmRvc2FnZUluc3RydWN0aW9uID0gY3JlYXRlKCdEb3NhZ2UnKSBhcyBkb3NhZ2UgdGhlbnsNCiAgICAgICAgICAgIGVmZiAtPiBkb3NhZ2UudGltaW5nID0gY3JlYXRlKCdUaW1pbmcnKSBhcyB0aW1pbmcgdGhlbiB7DQogICAgICAgICAgICAgIGVmZiAtPiB0aW1pbmcucmVwZWF0IGFzIHJlcCB0aGVuIHsNCiAgICAgICAgICAgICAgICBlZmYuZXZlbnQgYXMgZXYgLT4gcmVwLndoZW4gPSAoZXYuY29kZSk7DQogICAgICAgICAgICAgIH0icmVwIjsNCiAgICAgICAgICAgIH0idGltaW5nIjsNCiAgICAgICAgICB9InBlcmlvZCI7DQogICAgICAgICAgc3Vic3RyYWN0LmVmZmVjdGl2ZVRpbWU6IElWTF9UUyBhcyBlZmYgLT4gbWVkaWNhdGlvblJxLmRvc2FnZUluc3RydWN0aW9uID0gY3JlYXRlKCdEb3NhZ2UnKSBhcyBkb3NhZ2UsIGRvc2FnZS50aW1pbmcgPSBjcmVhdGUoJ1RpbWluZycpIGFzIHRpbWluZywgdGltaW5nLmV2ZW50ID0gKGVmZi52YWx1ZSkgInRpbSI7DQogICAgICAgICAgc3Vic3RyYWN0LmVmZmVjdGl2ZVRpbWU6IFBJVkxfVFMgYXMgZWZmIC0+IG1lZGljYXRpb25ScS5kb3NhZ2VJbnN0cnVjdGlvbiA9IGNyZWF0ZSgnRG9zYWdlJykgYXMgZG9zYWdlIHRoZW57DQogICAgICAgICAgICBlZmYgLT4gZG9zYWdlLnRpbWluZyA9IGNyZWF0ZSgnVGltaW5nJykgYXMgdGltaW5nIHRoZW4gcGVyaW9kVGltaW5nKGVmZix0aW1pbmcpICJjb2QiOw0KICAgICAgICAgIH0iZWZmIjsNCiAgICAgICAgICBzdWJzdHJhY3QgLT4gbWVkaWNhdGlvblJxLmRvc2FnZUluc3RydWN0aW9uID0gY3JlYXRlKCdEb3NhZ2UnKSBhcyBkb3NhZ2UgdGhlbnsNCiAgICAgICAgICAgIHN1YnN0cmFjdC5yb3V0ZUNvZGUgLT4gZG9zYWdlLnJvdXRlOyAgICAgICAgDQogICAgICAgICAgfSJkb3NhZ2UiOw0KICAgICAgICAgIHN1YnN0cmFjdCAtPiBtZWRpY2F0aW9uUnEuZG9zYWdlSW5zdHJ1Y3Rpb24gPSBjcmVhdGUoJ0Rvc2FnZScpIGFzIGRvc2FnZSB0aGVuew0KICAgICAgICAgICAgc3Vic3RyYWN0LmFwcHJvYWNoU2l0ZUNvZGUgLT4gZG9zYWdlLnNpdGU7ICAgICAgICANCiAgICAgICAgICB9ImRvc2FnZSI7DQogICAgICAgICAgc3Vic3RyYWN0LmRvc2VRdWFudGl0eSBhcyBkb3NlUXVhbnQgLT4gbWVkaWNhdGlvblJxLmRvc2FnZUluc3RydWN0aW9uID0gY3JlYXRlKCdEb3NhZ2UnKSBhcyBkb3NhZ2VJbnN0cnVjdGlvbiB0aGVuew0KICAgICAgICAgICAgZG9zZVF1YW50Lm9yaWdpbmFsVGV4dCBhcyBvdCB0aGVuew0KICAgICAgICAgICAgICBvdC5yZWZlcmVuY2UgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24udGV4dDsNCiAgICAgICAgICAgIH0ib3QiOw0KICAgICAgICAgICAgZG9zZVF1YW50IC0+IGRvc2FnZUluc3RydWN0aW9uLmRvc2VBbmRSYXRlIGFzIGRvc2FnZVJhdGUgdGhlbnsNCiAgICAgICAgICAgICAgZG9zZVF1YW50IC0+IGRvc2FnZVJhdGUuZG9zZSA9IGNyZWF0ZSgnUmFuZ2UnKSBhcyBkIHRoZW57DQogICAgICAgICAgICAgICAgZG9zZVF1YW50IC0+IGQubG93ID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIGwgdGhlbnsNCiAgICAgICAgICAgICAgICAgIGRvc2VRdWFudC5sb3cgYXMgbG8gLT4gbC52YWx1ZSA9IChsby52YWx1ZSk7IA0KICAgICAgICAgICAgICAgICAgZG9zZVF1YW50LmxvdyBhcyBsbyAtPiBsLnVuaXQgPSAobG8udW5pdCk7IA0KICAgICAgICAgICAgICAgIH0ibG93IjsNCiAgICAgICAgICAgICAgICBkb3NlUXVhbnQgLT4gZC5oaWdoID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIGggdGhlbnsNCiAgICAgICAgICAgICAgICAgIGRvc2VRdWFudC5oaWdoIGFzIGhpIC0+IGgudmFsdWUgPSAoaGkudmFsdWUpOyANCiAgICAgICAgICAgICAgICAgIGRvc2VRdWFudC5oaWdoIGFzIGhpIC0+IGgudW5pdCA9IChoaS51bml0KTsNCiAgICAgICAgICAgICAgICB9ImxvdyI7DQogICAgICAgICAgICAgIH0iZCI7DQogICAgICAgICAgICB9ImRvc2FnZVJhdGUiOw0KICAgICAgICAgIH0iRG9zYWdlIjsNCiAgICAgICAgICANCiAgICAgICAgICBzdWJzdHJhY3QucmF0ZVF1YW50aXR5IGFzIHJhdGVRdWFudGl0eSAtPiBtZWRpY2F0aW9uUnEuZG9zYWdlSW5zdHJ1Y3Rpb24gPSBjcmVhdGUoJ0Rvc2FnZScpIGFzIGRvc2FnZUluc3RydWN0aW9uMSB0aGVuew0KICAgICAgICAgICAgcmF0ZVF1YW50aXR5Lm9yaWdpbmFsVGV4dCBhcyBvdCB0aGVuew0KICAgICAgICAgICAgICBvdC5yZWZlcmVuY2UgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24xLnRleHQ7DQogICAgICAgICAgICB9Im90IjsNCiAgICAgICAgICAgIHJhdGVRdWFudGl0eSAtPiBkb3NhZ2VJbnN0cnVjdGlvbjEuZG9zZUFuZFJhdGUgYXMgZG9zYWdlUmF0ZSB0aGVuew0KICAgICAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZG9zYWdlUmF0ZS5yYXRlID0gY3JlYXRlKCdSYW5nZScpIGFzIGQgdGhlbnsNCiAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZC5sb3cgPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgbCB0aGVuew0KICAgICAgICAgICAgICAgICAgcmF0ZVF1YW50aXR5LmxvdyBhcyBsbyAtPiBsLnZhbHVlID0gKGxvLnZhbHVlKTsgDQogICAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkubG93IGFzIGxvIC0+IGwudW5pdCA9IChsby51bml0KTsgDQogICAgICAgICAgICAgICAgfSJsb3ciOw0KICAgICAgICAgICAgICAgIHJhdGVRdWFudGl0eSAtPiBkLmhpZ2ggPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgaCB0aGVuew0KICAgICAgICAgICAgICAgICAgcmF0ZVF1YW50aXR5LmhpZ2ggYXMgaGkgLT4gaC52YWx1ZSA9IChoaS52YWx1ZSk7DQogICAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkuaGlnaCBhcyBoaSAtPiBoLnVuaXQgPSAoaGkudW5pdCk7IA0KICAgICAgICAgICAgICAgIH0ibG93IjsNCiAgICAgICAgICAgICAgfSJkIjsNCiAgICAgICAgICAgIH0iZG9zYWdlUmF0ZSI7DQogICAgICAgICAgfSJyYXRlcSI7DQogICAgICAgICAgDQogICAgICAgICAgc3Vic3RyYWN0LnBhcnRpY2lwYW50IGFzIHBhcnQgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIgIHRoZW57DQogICAgICAgICAgICBwYXJ0LnRpbWUgYXMgdGltZSAtPiBtZWRpY2F0aW9uUnEuYXV0aG9yZWRPbiA9ICh0aW1lLnZhbHVlKTsNCiAgICAgICAgICAgIHBhcnQucGFydGljaXBhbnRSb2xlIGFzIHBhcnRSb2xlIHRoZW57DQogICAgICAgICAgICAgIHBhcnRSb2xlLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgICAgICAgIHBhcnRSb2xlLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgcGFydFJvbGUgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICBwYXJ0Um9sZSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9UZXJhcGlhRmFybWFjb2xvZ2ljYVJpY292ZXJvL3BhcnRpY2lwYW50JyJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsgDQogICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDEpICxtZWRpY2F0aW9uUnEucGVyZm9ybWVyICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkiYXV0IjsNCiAgICAgICAgICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgICAgICAgIHBhcnRSb2xlLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgICAgICAgICAgICBwYXJ0Um9sZS5wbGF5aW5nRW50aXR5IGFzIGFzc2kgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGFzc2kubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgICAgICAgICAgIH0iYXNzaSI7DQogICAgICAgICAgICAgIH0icGVyZiI7DQogICAgICAgICAgIH0icGFydFJvbGUiOw0KICAgICAgICB9InBhcnRpY2lwYW50IjsgDQogICAgfSJzdWJzdHJhY3QiOw0KfQ==", "subType": "00"}}, "filename": "LetteraDimissioneOspedaliera_v2.8.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:43:51.592Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f44dbe0517258e7dfb93"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/ProfiloSanitarioSinteticoBody", "version": "1.9", "template_id_root": ["2.16.840.1.113883.2.9.10.1.4.1.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "ProfiloSanitarioSinteticoBody_v1.9.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:43:57.193Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f44fbe0517258e7dfb94"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodilaboratorioFULLBODY", "version": "2.2", "template_id_root": ["2.16.840.1.113883.2.9.10.1.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "RefertodiLaboratorioFULLBODY_v2.2.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:43:59.229Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f454be0517258e7dfb95"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodiRadiologiaBody", "version": "2.2", "template_id_root": ["2.16.840.1.113883.2.9.10.1.7.1"], "content": {"$binary": {"base64": "bWFwICJodHRwOi8vc2FsdXRlLmdvdi5pdC9pZy9jZGEtZmhpci1tYXBzL1N0cnVjdHVyZU1hcC9SZWZlcnRvZGlSYWRpb2xvZ2lhQm9keSIgPSAiUmVmZXJ0b2RpUmFkaW9sb2dpYUJvZHkiDQoNCmNvbmNlcHRtYXAgIk9CU3N0YXR1cyIgew0KICAgIHByZWZpeCBzID0gImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL1ZhbHVlU2V0L3YzLXN0YXR1c0NvZGUiDQogICAgcHJlZml4IHQgPSAiaHR0cDovL2hsNy5vcmcvZmhpci9vYnNlcnZhdGlvbi1zdGF0dXMiDQoNCiAgICBzOmNvbXBsZXRlZCA9PSB0OmZpbmFsDQogICAgczphY3RpdmUgPT0gdDpyZWdpc3RlcmVkDQogICAgczphYm9ydGVkID09IHQ6Y2FuY2VsbGVkDQogICAgczpzdXNwZW5kZWQgPT0gdDpwYXJ0aWFsDQogIH0NCiAgY29uY2VwdG1hcCAiY20tdjMtYWRtaW5pc3RyYXRpdmUtZ2VuZGVyIiB7DQogICAgcHJlZml4IHMgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvVmFsdWVTZXQvdjMtQWRtaW5pc3RyYXRpdmVHZW5kZXIiDQogICAgcHJlZml4IHQgPSAiaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hZG1pbmlzdHJhdGl2ZS1nZW5kZXIiDQogIA0KICAgIHM6TSA9PSB0Om1hbGUNCiAgICBzOkYgPT0gdDpmZW1hbGUNCiAgfQ0KICBjb25jZXB0bWFwICJBbGxlcmd5VHlwZU1hcCIgew0KICAgIHByZWZpeCBzID0gImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL1ZhbHVlU2V0L3YzLXR5cGUiDQogICAgcHJlZml4IHQgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hbGxlcmd5aW50b2xlcmFuY2UtY2xpbmljYWwiDQoNCiAgICBzOk9JTlQgPT0gdDppbnRvbGVyYW5jZQ0KICAgIHM6QUxHID09IHQ6YWxsZXJneQ0KICAgIHM6REFMRyA9PSB0OmFsbGVyZ3kNCiAgICBzOkVBTEcgPT0gdDphbGxlcmd5DQogICAgczpGQUxHID09IHQ6YWxsZXJneQ0KICAgIHM6TkFJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICAgIHM6Rk5BSU5UID09IHQ6aW50b2xlcmFuY2UNCiAgICBzOkROQUlOVCA9PSB0OmludG9sZXJhbmNlDQogICAgczpFTkFJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICAgIHM6RklOVCA9PSB0OmludG9sZXJhbmNlDQogICAgczpESU5UID09IHQ6aW50b2xlcmFuY2UNCiAgICBzOkVJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICB9DQogIGNvbmNlcHRtYXAgIkFsbGVyZ3lDYXRlZ29yeU1hcCIgew0KICAgIHByZWZpeCBzID0gImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL1ZhbHVlU2V0L3YzLXR5cGUiDQogICAgcHJlZml4IHQgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hbGxlcmd5aW50b2xlcmFuY2UtY2xpbmljYWwiDQoNCiAgICBzOkRBTEcgPT0gdDptZWRpY2F0aW9uDQogICAgczpFQUxHID09IHQ6ZW52aXJvbWVudA0KICAgIHM6RkFMRyA9PSB0OmZvb2QNCiAgICBzOkZOQUlOVCA9PSB0OmludG9sZXJhbmNlDQogICAgczpETkFJTlQgPT0gdDptZWRpY2F0aW9uDQogICAgczpFTkFJTlQgPT0gdDplbnZpcm9tZW50DQogICAgczpGSU5UID09IHQ6Zm9vZA0KICAgIHM6RElOVCA9PSB0Om1lZGljYXRpb24NCiAgICBzOkVJTlQgPT0gdDplbnZpcm9tZW50DQogIH0NCg0KY29uY2VwdG1hcCAiQ3JpY2FsaXR5TWFwIiB7DQogICAgcHJlZml4IHMgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1PYnNlcnZhdGlvblZhbHVlIg0KICAgIHByZWZpeCB0ID0gImh0dHA6Ly9obDcub3JnL2ZoaXIvYWxsZXJneS1pbnRvbGVyYW5jZS1jcml0aWNhbGl0eSINCg0KICAgIHM6IE0gPT0gdDogbG93DQogICAgczogSCA9PSB0OiBoaWdoDQogICAgczogTCA9PSB0OiBsb3cNCn0NCg0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9DbGluaWNhbERvY3VtZW50IiBhbGlhcyBDbGluaWNhbERvY3VtZW50IGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Bc3NpZ25lZEF1dGhvciIgYWxpYXMgQXNzaWduZWRBdXRob3IgYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Bc3NpZ25lZEVudGl0eSIgYWxpYXMgQXNzaWduZWRFbnRpdHkgYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Bc3NvY2lhdGVkRW50aXR5IiBhbGlhcyBBc3NvY2lhdGVkRW50aXR5IGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQ3VzdG9kaWFuT3JnYW5pemF0aW9uIiBhbGlhcyBDdXN0b2RpYW5Pcmdhbml6YXRpb24gYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Pcmdhbml6YXRpb25QYXJ0T2YiIGFsaWFzIE9yZ2FuaXphdGlvblBhcnRPZiBhcyBxdWVyaWVkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL09yZ2FuaXphdGlvbiIgYWxpYXMgcmFwcmVzZW50ZWRPcmdhbml6YXRpb24gYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9TZWN0aW9uIiBhbGlhcyBTZWN0aW9uIGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vUGF0aWVudFJvbGUiIGFsaWFzIFBhdGllbnRSb2xlIGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQUQiIGFsaWFzIEFEIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0J1bmRsZSIgYWxpYXMgQnVuZGxlIGFzIHRhcmdldA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NvbXBvc2l0aW9uIiBhbGlhcyBDb21wb3NpdGlvbiBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BhdGllbnQiIGFsaWFzIFBhdGllbnQgYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIiIGFsaWFzIEVuY291bnRlciBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BlcnNvbiIgYWxpYXMgUGF0aWVudCBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0xpc3QiIGFsaWFzIExpc3QgYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QcmFjdGl0aW9uZXIiIGFsaWFzIFByYWN0aXRpb25lciBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL09yZ2FuaXphdGlvbiIgYWxpYXMgT3JnYW5pemF0aW9uIGFzIHByb2R1Y2VkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0FjdCIgYWxpYXMgQWN0IGFzIHByb2R1Y2VkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0lWTC1QUSIgYWxpYXMgSVZMX1BRIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9QUSIgYWxpYXMgUFEgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vU2ltcGxlUXVhbnRpdHkiIGFsaWFzIFNpbXBsZVF1YW50aXR5IGFzIHRhcmdldA0KDQppbXBvcnRzICJodHRwOi8vc2FsdXRlLmdvdi5pdC9pZy9jZGEtZmhpci1tYXBzL1N0cnVjdHVyZU1hcC9DZGFUb0ZoaXJEYXRhVHlwZXMiDQppbXBvcnRzICJodHRwOi8vc2FsdXRlLmdvdi5pdC9pZy9jZGEtZmhpci1tYXBzL1N0cnVjdHVyZU1hcC9GVUxMSEVBREVSIg0KDQpncm91cCBDZGFUb0J1bmRsZShzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSkgew0KICAgIGNkYSAtPiAgYnVuZGxlLmVudHJ5IGFzIGUsIGUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICBlLnJlc291cmNlID0gY3JlYXRlKCdDb21wb3NpdGlvbicpIGFzIGNvbXBvc2l0aW9uLCAgY29tcG9zaXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Db21wb3NpdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ0NvbXBvc2l0aW9uJywgIGJ1bmRsZS5lbnRyeSBhcyBlMiwgZTIucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdFBBVCwgcmVxdWVzdFBBVC5tZXRob2QgPSAnUFVUJywgZTIucmVzb3VyY2UgPSBjcmVhdGUoJ1BhdGllbnQnKSBhcyBwYXRpZW50LCAgcGF0aWVudC5pZCA9IHV1aWQoKSBhcyB1dWlkMiwgIGUyLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycsIHV1aWQyKSwgYnVuZGxlLmVudHJ5IGFzIGUzLCBlMy5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGUzLnJlc291cmNlID0gY3JlYXRlKCdFbmNvdW50ZXInKSBhcyBlbmNvdW50ZXIsICBlbmNvdW50ZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDMsICBlMy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycsIHV1aWQzKSxyZXF1ZXN0LnVybCA9ICdFbmNvdW50ZXInLCBidW5kbGUuZW50cnkgYXMgZTQsIGU0LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTQucmVzb3VyY2UgPSBjcmVhdGUoJ0RvY3VtZW50UmVmZXJlbmNlJykgYXMgRG9jdW1lbnRSZWZlcmVuY2UsICBEb2N1bWVudFJlZmVyZW5jZS5pZCA9IHV1aWQoKSBhcyB1dWlkNCwgIGU0LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Eb2N1bWVudFJlZmVyZW5jZS8nLCB1dWlkNCkscmVxdWVzdC51cmwgPSAnRG9jdW1lbnRSZWZlcmVuY2UnIHRoZW4gew0KICAgIGNkYSB0aGVuIENsaW5pY2FsRG9jdW1lbnRUb0J1bmRsZShjZGEsIHBhdGllbnQsIGNvbXBvc2l0aW9uLCBlbmNvdW50ZXIsIGJ1bmRsZSwgRG9jdW1lbnRSZWZlcmVuY2UpICJjZGF0b2J1bmRsZSI7DQogICAgY2RhLnJlY29yZFRhcmdldCBhcyByZWNvcmRUYXJnZXQgdGhlbnsNCiAgICAgICAgcmVjb3JkVGFyZ2V0LnBhdGllbnRSb2xlIGFzIHBhdGllbnQgdGhlbnsNCiAgICAgICAgcGF0aWVudC5pZCBhcyBpZCAtPiBwYXRpZW50LmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0MSAtPiBpZGVudGlmaWVyLnZhbHVlID0gZXh0MSAidmFsdWUiOw0KICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICB9ImlkZnIiOw0KICAgICAgICBwYXRpZW50LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSBvciAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy43JykNCiAgICAgICAgb3IgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMycpIG9yKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMTcnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4xOCcpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwLjQuMS4xJykNCiAgICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMjAuNC4xLjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4zMC40LjEuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi40MS40LjEuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi40Mi40LjEuMScpDQogICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjUwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNjAuNC4xLjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNzAuNC4xLjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuODAuNC4xLjEnKQ0KICAgICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi45MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwMC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjExMC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEyMC40LjEuMScpDQogICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEzMC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE0MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE1MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE2MC40LjEuMScpDQogICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE3MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE4MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE5MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjIwMC40LjEuMScpDQogICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjIwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjMwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjQxLjQuMScpDQogICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjQyLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjUwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjYwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjcwLjQuMScpDQogICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjgwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjkwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwMC40LjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMTAuNC4xJykNCiAgICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTIwLjQuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMzAuNC4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE0MC40LjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTUwLjQuMScpDQogICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE2MC40LjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTcwLjQuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xODAuNC4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE5MC40LjEnKQ0KICAgICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4yMDAuNC4xJykgb3IgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMTUnKSAgdGhlbiB7DQogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiByZXF1ZXN0UEFULnVybCA9IGFwcGVuZCgnUGF0aWVudD9pZGVudGlmaWVyPScsZXh0KSAiVVVJRCI7DQogICAgICAgICAgfSJleHQiOw0KICAgICAgICB9InJlY1BhdCI7DQogICAgfSJwYXRpZW50IjsNCiAgIH0gIkNsaW5pY2FsRG9jdW1lbnRUb0JvZHkiOw0KICB9DQogIA0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFRvQnVuZGxlKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQsIHRhcmdldCBjb21wb3NpdGlvbiA6IENvbXBvc2l0aW9uLCB0YXJnZXQgZW5jb3VudGVyIDogRW5jb3VudGVyLCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgRG9jdW1lbnRSZWZlcmVuY2UgOiBEb2N1bWVudFJlZmVyZW5jZSkgew0KICAgIGNkYSAtPiBidW5kbGUuaWQgPSB1dWlkKCkgImlkIjsNCiAgICBjZGEuaWQgLT4gYnVuZGxlLmlkZW50aWZpZXIgImlkZW50aWZpZXIiOw0KICAgIGNkYSAtPiBidW5kbGUudHlwZSA9ICd0cmFuc2FjdGlvbicgInR5cGUiOw0KICAgIGNkYSAtPiBidW5kbGUudGltZXN0YW1wPSh0aW1lc3RhbXAubm93KCkpICJkYXRlIjsNCiAgICBjZGEgdGhlbiBDbGluaWNhbERvY3VtZW50Q29tcG9zaXRpb24oY2RhLCBjb21wb3NpdGlvbiwgcGF0aWVudCwgZW5jb3VudGVyLCBidW5kbGUsIERvY3VtZW50UmVmZXJlbmNlKSAiY29tcG9zaXRpb24iOw0KICAgIGNkYSAtPiBidW5kbGUuZW50cnkgYXMgZSwgZS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGUucmVzb3VyY2UgPSBjcmVhdGUoJ0RpYWdub3N0aWNSZXBvcnQnKSBhcyBkaWFnbm9zdGljUmVwb3J0LCAgZGlhZ25vc3RpY1JlcG9ydC5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0RpYWdub3N0aWNSZXBvcnQvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdEaWFnbm9zdGljUmVwb3J0JyB0aGVuew0KICAgICAgICBjZGEuY29kZSAtPiBkaWFnbm9zdGljUmVwb3J0LmNvZGUgImRpYWdub3N0aWNDb2RlIjsNCiAgICAgICAgY2RhIC0+IGRpYWdub3N0aWNSZXBvcnQuc3RhdHVzID0gJ3JlZ2lzdGVyZWQnICJzdGF0cyI7DQogICAgY2RhLmNvbXBvbmVudCBhcyBjb21wb25lbnQgdGhlbiB7DQogICAgICBjb21wb25lbnQuc3RydWN0dXJlZEJvZHkgYXMgYm9keSB0aGVuIHsNCiAgICAgICAgYm9keS5jb21wb25lbnQgYXMgY29tcG9uZW50ICB0aGVuIHsNCiAgICAgICAgICAgY29tcG9uZW50LnNlY3Rpb24gYXMgc3JjU2VjdGlvbiB0aGVuIHsNCiAgICAgICAgICBzcmNTZWN0aW9uLmNvZGUgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlciwgZGlhZ25vc3RpY1JlcG9ydCk7ICAgICAgIA0KICAgICAgICAgfSAic2VjdGlvbiI7DQogICAgICAgIH0gImNvbXBvbmVudCI7DQogICAgfSJib2R5IjsNCiAgICB9Ow0KICAgIH0iZGlhZ25vc3RpYyI7DQogIH0NCiAgDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvbihzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlciwgdGFyZ2V0IGRSZXBvcnQgOiBEaWFnbm9zdGljUmVwb3J0KSB7DQogICAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogICAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogICAgc3JjIC0+IHRndC5lbnRyeSA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0RpYWdub3N0aWNSZXBvcnQvJyArICVkUmVwb3J0LmlkKSAicmVmZXJlbmNlIjsgDQogICAgc3JjLmVudHJ5IGFzIGVudHJ5IHRoZW57DQogICAgICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gdGd0LnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgICAgICAgICBjZGFUZXh0IC0+IGZoaXJUZXh0LnN0YXR1cyA9ICdnZW5lcmF0ZWQnICJuYXJyYXRpdmVTdGF0dXMiOw0KICAgICAgICAgICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICAgICAgICB9ICJjZGFUZXh0IjsNCiAgICAgICAgZW50cnkgdGhlbiBEaWFnbm9zdGljUmVwb3J0RnVuY3Rpb24oc3JjLCBlbnRyeSwgZFJlcG9ydCwgYnVuZGxlLCBlbmMsIHBhdGllbnQpICJkcmVwb3J0IjsNCiAgICB9ImVudHJ5IjsNCiAgICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpLm5vdCgpIHRoZW4gIERpYWdub3N0aWNSZXBvcnRGdW5jdGlvbihzcmMsIGNkYSwgZFJlcG9ydCwgYnVuZGxlLCBlbmMsIHBhdGllbnQpICJuYXJyYXRpdmUiOw0KICAgIHNyYy5jb21wb25lbnQgYXMgY29tcG9uZW50IHRoZW4gew0KICAgICAgICBjb21wb25lbnQuc2VjdGlvbiBhcyBzZWMgLT4gdGd0LnNlY3Rpb24gYXMgdGd0U2VjdGlvbiB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uKGNkYSwgc2VjLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsIGVuYywgZFJlcG9ydCk7DQogICAgfSJjb21wb25lbnQiOw0KfQ0KDQpncm91cCBEaWFnbm9zdGljUmVwb3J0RnVuY3Rpb24oc291cmNlIHNlY3Rpb246IHNlY3Rpb24sIHNvdXJjZSBzcmM6IGVudHJ5LCB0YXJnZXQgZFJlcG9ydDogRGlhZ25vc3RpY1JlcG9ydCwgdGFyZ2V0IGJ1bmRsZTogQnVuZGxlLCB0YXJnZXQgZW5jb3VudGVyIDogRW5jb3VudGVyLCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQpew0KICAgIHNyYy5hY3QgYXMgYWN0MSB0aGVuew0KICAgICAgICBzZWN0aW9uIHdoZXJlIChjb2RlLmNvZGUgPSAnMTIxMTgxJykgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ0ltYWdpbmdTdHVkeScpIGFzIGltYWdlUywgIGltYWdlUy5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9JbWFnaW5nU3R1ZHkvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdJbWFnaW5nU3R1ZHknLCBkUmVwb3J0LmltYWdpbmdTdHVkeSA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0ltYWdpbmdTdHVkeS8nICsgJWltYWdlUy5pZCkgdGhlbiBJbWFnaW5nU3R1ZHkoYWN0MSxzZWN0aW9uLCBpbWFnZVMscGF0aWVudCxlbmNvdW50ZXIpICJpbWFnaW5nU3R1ZHkiOw0KICAgICAgICBzZWN0aW9uIHdoZXJlIChjb2RlLmNvZGUgPSAnNDg3NjUtMicpIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMiwgZTIucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUyLnJlc291cmNlID0gY3JlYXRlKCdPYnNlcnZhdGlvbicpIGFzIG9iczEsICBvYnMxLmlkID0gdXVpZCgpIGFzIHV1aWQyLCAgZTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nDQogICAgICAgICwgZFJlcG9ydC5yZXN1bHQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9iczEuaWQpIHRoZW57IA0KICAgICAgICAgICAgc2VjdGlvbiAtPiBvYnMxLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICAicmVmZXJlbmNlIjsgICAgDQogICAgICAgICAgICBzZWN0aW9uIC0+IG9iczEuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgICJyZWZlcmVuY2UiOyAgDQogICAgICAgICAgICBzZWN0aW9uIC0+IG9iczEuc3RhdHVzID0gJ2ZpbmFsJyAiU1RhdHVzb2JzZSI7DQogICAgICAgICAgICBzZWN0aW9uLmNvZGUgLT4gb2JzMS5jb2RlOw0KICAgICAgICAgICAgYWN0MS5zdGF0dXNDb2RlIGFzIHMgdGhlbiB7DQogICAgICAgICAgICAgICAgcy5jb2RlIGFzIGNvcy0+IG9iczEuc3RhdHVzID0gdHJhbnNsYXRlKGNvcywgJyNPQlNzdGF0dXMnLCAnY29kZScpICJjb2RlUyI7DQogICAgICAgICAgICB9InN0YXR1cyI7DQogICAgICAgICAgICBzZWN0aW9uIC0+IGJ1bmRsZS5lbnRyeSBhcyBlNCwgZTQucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGU0LnJlc291cmNlID0gY3JlYXRlKCdMaXN0JykgYXMgbGlzdDEsICBsaXN0MS5pZCA9IHV1aWQoKSBhcyB1dWlkNCwgIGU0LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9MaXN0LycsIHV1aWQ0KSwgcmVxdWVzdC51cmwgPSAnTGlzdCcsIG9iczEuZm9jdXMgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9MaXN0LycgKyAlbGlzdDEuaWQpIHRoZW57DQogICAgICAgICAgICAgICAgc2VjdGlvbiAtPiBsaXN0MS5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAgInJlZmVyZW5jZSI7ICAgIA0KICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gbGlzdDEuc3RhdHVzID0gJ2N1cnJlbnQnICJsaXN0YXR1cyI7DQogICAgICAgICAgICAgICAgc2VjdGlvbiAtPiBsaXN0MS5tb2RlID0gJ3dvcmtpbmcnICJsc3Rtb2QiOw0KICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gbGlzdDEuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgICJyZWZlcmVuY2UiOyAgDQogICAgICAgICAgICAgICAgc3JjIC0+IGxpc3QxLmVudHJ5IGFzIGVudHJ5TGlzdDEgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgYWN0MSAtPiBidW5kbGUuZW50cnkgYXMgZTUsIGU1LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlNS5yZXNvdXJjZSA9IGNyZWF0ZSgnQWxsZXJneUludG9sZXJhbmNlJykgYXMgYWxsZXJneSwgIGFsbGVyZ3kuaWQgPSB1dWlkKCkgYXMgdXVpZDUsICBlNS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvQWxsZXJneUludG9sZXJhbmNlLycsIHV1aWQ1KSwgcmVxdWVzdC51cmwgPSAnQWxsZXJneUludG9sZXJhbmNlJywgZW50cnlMaXN0MS5pdGVtID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvQWxsZXJneUludG9sZXJhbmNlLycgKyAlYWxsZXJneS5pZCkgdGhlbiBhbGxlcmd5RnVuY3Rpb24oYWN0MSwgYWxsZXJneSwgcGF0aWVudCxlbmNvdW50ZXIpICJhbGxlcmd5IjsNCiAgICAgICAgICAgICAgICB9Iml0ZW0iOw0KICAgICAgICAgICAgfSJsaXN0IjsNCiAgICAgICAgfSJhbGxlcmd5QWN0IjsNCiAgICAgICAgc2VjdGlvbiB3aGVyZSAoY29kZS5jb2RlID0gJzU1MTExLTknKSAtPiBidW5kbGUuZW50cnkgYXMgZTMsIGUzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMy5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnMyLCAgb2JzMi5pZCA9IHV1aWQoKSBhcyB1dWlkMywgIGUzLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMyksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgZFJlcG9ydC5yZXN1bHQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9iczIuaWQpIHRoZW4gT2JzZXJ2YXRpb24oYWN0MSwgcGF0aWVudCwgZW5jb3VudGVyLCBvYnMyLCBidW5kbGUpICJvYnNlcnZhdGlvbiI7DQogICAgfSJhY3QiOw0KICAgIHNyYy5vYnNlcnZhdGlvbiBhcyBlbnRyeW9icyB0aGVuew0KICAgICAgICBzZWN0aW9uIHdoZXJlIChjb2RlLmNvZGUgPSAnMTEzMjktMCcpIC0+IGJ1bmRsZS5lbnRyeSBhcyBlNiwgZTYucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGU2LnJlc291cmNlID0gY3JlYXRlKCdPYnNlcnZhdGlvbicpIGFzIG9iczYsICBvYnM2LmlkID0gdXVpZCgpIGFzIHV1aWQ2LCAgZTYuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQ2KSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCBkUmVwb3J0LnJlc3VsdCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzNi5pZCkgdGhlbiB7DQogICAgICAgICAgICBzZWN0aW9uIC0+IG9iczYuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJyZWZlcmVuY2UiOyAgICANCiAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzNi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAgInJlZmVyZW5jZSI7ICANCiAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzNi5zdGF0dXMgPSAnZmluYWwnICJ0YXR1c29ic2UiOw0KICAgICAgICAgICAgc2VjdGlvbi5jb2RlIC0+IG9iczYuY29kZTsNCiAgICAgICAgICAgIGVudHJ5b2JzIC0+IGJ1bmRsZS5lbnRyeSBhcyBlNywgZTcucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGU3LnJlc291cmNlID0gY3JlYXRlKCdDb25kaXRpb24nKSBhcyBjb25kaXRpb24xLCAgY29uZGl0aW9uMS5pZCA9IHV1aWQoKSBhcyB1dWlkNywgIGU3LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Db25kaXRpb24vJywgdXVpZDcpLCByZXF1ZXN0LnVybCA9ICdDb25kaXRpb24nLCBvYnM2LmZvY3VzID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvQ29uZGl0aW9uLycgKyAlY29uZGl0aW9uMS5pZCkgdGhlbiBDb25kaXRpb25GdW5jdGlvbihlbnRyeW9icyxjb25kaXRpb24xLCBwYXRpZW50LCBlbmNvdW50ZXIsYnVuZGxlKSAiY29uZGl0aW9uIjsNCiAgICAgICAgfSJvYnNlcnZhdGlvbnN0Y2xpbmljYSI7DQoNCiAgICAgICAgc2VjdGlvbiB3aGVyZSAoY29kZS5jb2RlID0gJzU1MTE0LTMnKSAtPiBidW5kbGUuZW50cnkgYXMgZTksIGU5LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlOS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnM5LCAgb2JzOS5pZCA9IHV1aWQoKSBhcyB1dWlkOSwgIGU5LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkOSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgZFJlcG9ydC5yZXN1bHQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9iczkuaWQpIHRoZW4gT2JzZXJ2YXRpb24oZW50cnlvYnMsIHBhdGllbnQsIGVuY291bnRlciwgb2JzOSwgYnVuZGxlKSAicHJlY2VkZW50aUVzYW1pIjsNCiAgICAgICAgc2VjdGlvbiB3aGVyZSAoY29kZS5jb2RlID0gJzU1MTA5LTMnKSAtPiBidW5kbGUuZW50cnkgYXMgZTgsIGU4LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlOC5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnM4LCBvYnM4LmlkID0gdXVpZCgpIGFzIHV1aWQ4LCBlOC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJywgdXVpZDgpLCByZXF1ZXN0LnVybCA9ICdPYnNlcnZhdGlvbicsIGRSZXBvcnQucmVzdWx0ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnM4LmlkKSB0aGVuIE9ic2VydmF0aW9uKGVudHJ5b2JzLCBwYXRpZW50LCBlbmNvdW50ZXIsIG9iczgsIGJ1bmRsZSkgImNvbXBsaWNhbnplIjsNCiAgICAgICAgc2VjdGlvbiB3aGVyZSAoY29kZS5jb2RlID0gJzE4Nzg1LTYnKSAtPiBidW5kbGUuZW50cnkgYXMgZTE0LCBlMTQucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxNC5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnMxNCwgb2JzMTQuaWQgPSB1dWlkKCkgYXMgdXVpZDE0LCBlMTQuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxNCksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgZFJlcG9ydC5yZXN1bHQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9iczE0LmlkKSB0aGVuIE9ic2VydmF0aW9uKGVudHJ5b2JzLCBwYXRpZW50LCBlbmNvdW50ZXIsIG9iczE0LCBidW5kbGUpICJxdWVzaXRvRGlhZ25vc3RpY28iOw0KICAgIH0gImVudHJ5T2JzIjsNCiAgICBzcmMub3JnYW5pemVyIGFzIG9yZ2FuaXplciB0aGVuIHsNCiAgICAgICAgc3JjIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMTAsIGUxMC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTEwLnJlc291cmNlID0gY3JlYXRlKCdPYnNlcnZhdGlvbicpIGFzIG9iczEwLCAgb2JzMTAuaWQgPSB1dWlkKCkgYXMgdXVpZDEwLCAgZTEwLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMTApLCByZXF1ZXN0LnVybCA9ICdPYnNlcnZhdGlvbicsIGRSZXBvcnQucmVzdWx0ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnMxMC5pZCkgdGhlbnsNCiAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzMTAuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJyZWZlcmVuY2UiOyAgICANCiAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzMTAuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgICJyZWZlcmVuY2UiOyAgDQogICAgICAgICAgICBzZWN0aW9uIC0+IG9iczEwLnN0YXR1cyA9ICdmaW5hbCcgInRhdHVzb2JzZSI7DQogICAgICAgICAgICBzZWN0aW9uLmNvZGUgLT4gb2JzMTAuY29kZSAiY29kZU9icyI7IA0KICAgICAgICAgICAgc2VjdGlvbiAtPiBidW5kbGUuZW50cnkgYXMgZTExLCBlMTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTGlzdCcpIGFzIGxpc3QxMSwgIGxpc3QxMS5pZCA9IHV1aWQoKSBhcyB1dWlkMTEsICBlMTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0xpc3QvJywgdXVpZDExKSwgcmVxdWVzdC51cmwgPSAnTGlzdCcsIG9iczEwLmZvY3VzID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTGlzdC8nICsgJWxpc3QxMS5pZCkgdGhlbnsNCiAgICAgICAgICAgICAgICBzZWN0aW9uIC0+IGxpc3QxMS5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAgInJlZmVyZW5jZSI7ICAgIA0KICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gbGlzdDExLnN0YXR1cyA9ICdjdXJyZW50JyAibGlzdHN0YXQiOw0KICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gbGlzdDExLm1vZGUgPSAnd29ya2luZycgImxpc3RtZCI7DQogICAgICAgICAgICAgICAgc2VjdGlvbiAtPiBsaXN0MTEuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgICJyZWZlcmVuY2UiOyAgDQogICAgICAgICAgICAgICAgb3JnYW5pemVyIC0+IGxpc3QxMS5lbnRyeSBhcyBlbnRyeUxpc3QyIHRoZW57DQogICAgICAgICAgICAgICAgICAgIG9yZ2FuaXplciAtPmJ1bmRsZS5lbnRyeSBhcyBlMTIsIGUxMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTEyLnJlc291cmNlID0gY3JlYXRlKCdGYW1pbHlNZW1iZXJIaXN0b3J5JykgYXMgZmFtaWx5TWVtYmVyLCBmYW1pbHlNZW1iZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEyLCAgZTEyLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9GYW1pbHlNZW1iZXJIaXN0b3J5LycsIHV1aWQxMiksIHJlcXVlc3QudXJsID0gJ0ZhbWlseU1lbWJlckhpc3RvcnknLCBlbnRyeUxpc3QyLml0ZW0gPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0ZhbWlseU1lbWJlckhpc3RvcnkvJyArICVmYW1pbHlNZW1iZXIuaWQpIHRoZW4gRmFtaWx5TWVtYmVyRnVuY3Rpb24ob3JnYW5pemVyLCBmYW1pbHlNZW1iZXIsIHBhdGllbnQpICJmYW1pbHkiOw0KICAgICAgICAgICAgICAgIH0ib3JnIjsNCiAgICAgICAgICAgIH0iTGlzdCI7DQogICAgICAgIH0iZW50cnlPcmdhbml6ZXIiOw0KICAgIH0ib3JnYW5pemVyIjsNCiAgICBzZWN0aW9uIHdoZXJlIHNlY3Rpb24uZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQoNCiAgICAgICAgc2VjdGlvbiB3aGVyZSAoY29kZS5jb2RlID0gJzQ4NzY1LTInKSAtPiBidW5kbGUuZW50cnkgYXMgZTIsIGUyLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMi5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnMxLCAgb2JzMS5pZCA9IHV1aWQoKSBhcyB1dWlkMiwgIGUyLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgZFJlcG9ydC5yZXN1bHQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9iczEuaWQpIHRoZW57IA0KICAgICAgICAgICAgc2VjdGlvbi0+IG9iczEuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJyZWZlcmVuY2UiOyAgICANCiAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzMS5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAgInJlZmVyZW5jZSI7ICANCiAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzMS5zdGF0dXMgPSAnZmluYWwnICJTVGF0dXNvYnNlIjsNCiAgICAgICAgICAgIHNlY3Rpb24uY29kZSAtPiBvYnMxLmNvZGU7DQogICAgICAgICAgICBzZWN0aW9uLnN0YXR1c0NvZGUgYXMgcyB0aGVuIHsNCiAgICAgICAgICAgICAgICBzLmNvZGUgYXMgY29zLT4gb2JzMS5zdGF0dXMgPSB0cmFuc2xhdGUoY29zLCAnI09CU3N0YXR1cycsICdjb2RlJykgImNvZGVTIjsNCiAgICAgICAgICAgIH0ic3RhdHVzIjsNCiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi50ZXh0IGFzIHRleHQgIC0+IGJ1bmRsZS5lbnRyeSBhcyBlNSwgZTUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGU1LnJlc291cmNlID0gY3JlYXRlKCdBbGxlcmd5SW50b2xlcmFuY2UnKSBhcyBhbGxlcmd5LCAgYWxsZXJneS5pZCA9IHV1aWQoKSBhcyB1dWlkNSwgIGU1LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9BbGxlcmd5SW50b2xlcmFuY2UvJywgdXVpZDUpLCByZXF1ZXN0LnVybCA9ICdBbGxlcmd5SW50b2xlcmFuY2UnLCBvYnMxLmZvY3VzID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvQWxsZXJneUludG9sZXJhbmNlLycgKyAlYWxsZXJneS5pZCkgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uIC0+IGFsbGVyZ3kucGF0aWVudD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJyZWZlcmVuY2UiOyAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gYWxsZXJneS5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAgInJlZmVyZW5jZSI7ICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uIC0+IGFsbGVyZ3kuY2xpbmljYWxTdGF0dXMgYXMgY2xpbmljYWxTdGF0dXMgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uIC0+IGNsaW5pY2FsU3RhdHVzLmNvZGluZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gY29kaW5nLmNvZGUgPSAgJ2FjdGl2ZScgImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FsbGVyZ3lpbnRvbGVyYW5jZS1jbGluaWNhbCcgInN5c3RlbSI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICAgICAgICB9InN0YXR1cyI7ICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0IC0+IGFsbGVyZ3kubm90ZSBhcyBub3RlIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCBhcyB0LT4gbm90ZS50ZXh0ID0gY3JlYXRlKCdzdHJpbmcnKSBhcyB0ZXh0Tm90ZSB0aGVuIEVEc3RyaW5nKHQsdGV4dE5vdGUpICJub3RlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gIm5hcnJhdGl2ZSI7IA0KICAgICAgICAgICAgICAgICAgICB9ImFsbGVyZ3l0ZXh0IjsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgfSJhbGxlcmd5QWN0IjsNCg0KICAgICAgICBzZWN0aW9uIHdoZXJlIChjb2RlLmNvZGUgPSAnNTUxMTAtMScpLm5vdCgpIG9yIChjb2RlLmNvZGUgPSAnMTEzMjktMCcpLm5vdCgpIHRoZW57DQogICAgICAgICAgICBzZWN0aW9uLnRleHQgYXMgdGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTEzLCBlMTMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxMy5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnMxMywgIG9iczEzLmlkID0gdXVpZCgpIGFzIHV1aWQxMywgIGUxMy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJywgdXVpZDEzKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCBkUmVwb3J0LnJlc3VsdCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzMTMuaWQpIHRoZW4gew0KICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzMTMuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJyZWZlcmVuY2UiOyAgICANCiAgICAgICAgICAgICAgICBzZWN0aW9uIC0+IG9iczEzLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpICAicmVmZXJlbmNlIjsgIA0KICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzMTMuc3RhdHVzID0gJ3ByZWxpbWluYXJ5JyAib2Jzc3QiOw0KICAgICAgICAgICAgICAgIHNlY3Rpb24uY29kZSAtPiBvYnMxMy5jb2RlICJvYnNjZGUiOw0KICAgICAgICAgICAgICAgIHNlY3Rpb24gLT4gb2JzMTMuc3RhdHVzID0gJ2ZpbmFsJyAic3RhdHVzUyI7DQogICAgICAgICAgICAgICAgdGV4dCAtPiBvYnMxMy5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgdGV4dCBhcyB0LT4gbm90ZS50ZXh0ID0gY3JlYXRlKCdzdHJpbmcnKSBhcyB0ZXh0Tm90ZSB0aGVuIEVEc3RyaW5nKHQsdGV4dE5vdGUpICJub3RlIjsNCiAgICAgICAgICAgICAgICB9ICJuYXJyYXRpdmUiOyAgICANCiAgICAgICAgICAgIH0idHh0c2VjIjsNCiAgICAgICAgICB9ICJOb25Db25jbHVzaW9uIjsNCiAgICAgICAgc2VjdGlvbiB3aGVyZShjb2RlLmNvZGUgPSAnNTUxMTAtMScpIHRoZW4gew0KICAgICAgICAgICAgc2VjdGlvbi50ZXh0IGFzIHQgLT4gZFJlcG9ydC5jb25jbHVzaW9uID0gY3JlYXRlKCdzdHJpbmcnKSAgYXMgdGV4dENvbmNsdXNpb24gdGhlbiBFRHN0cmluZyh0LHRleHRDb25jbHVzaW9uKSAiY29uYyI7DQogICAgICAgIH0iY29uY2x1c2lvbiI7DQogICAgfSJ3aGVyZUNvbmQiOw0KfQ0KDQpncm91cCBPYnNlcnZhdGlvbihzb3VyY2UgY2RhIDogb2JzZXJ2YXRpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IGVuY291bnRlciA6IEVuY291bnRlciwgdGFyZ2V0IG9iIDogT2JzZXJ2YXRpb24sIHRhcmdldCBidW5kbGUgOiBCdW5kbGUpIHsgIA0KICAgIGNkYS0+b2Iuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJyZWZlcmVuY2UiOyAgICANCiAgICBjZGEtPm9iLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpICAicmVmZXJlbmNlIjsgDQogICAgY2RhLmNvZGUgLT4gb2IuY29kZTsNCiAgICBjZGEgLT4gb2Iuc3RhdHVzID0gJ2ZpbmFsJyAiU3RhdHMiOw0KICAgIGNkYS52YWx1ZTpTVCBhcyBzdCAtPiBvYi52YWx1ZSA9Y3JlYXRlKCdzdHJpbmcnKSwgIG9iLnZhbHVlPSAoc3QuZGF0YVN0cmluZykgInZhbHVlIjsNCiAgICBjZGEudmFsdWU6QkwgYXMgYm9vbGVhbiAtPm9iLnZhbHVlPShib29sZWFuLnZhbHVlKSJib29sZWFuIjsNCiAgICBjZGEudmFsdWU6SU5UIGFzIGludC0+b2IudmFsdWU9KGludC52YWx1ZSkgInZhbHVlIjsNCiAgICBjZGEudmFsdWU6Q0UgYXMgdmFsIHRoZW57DQogICAgICAgIHZhbC0+b2IudmFsdWUgPWNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgY2UgdGhlbiB7DQogICAgICAgIHZhbC5vcmlnaW5hbFRleHQgYXMgb3JpZ2luYWxUZXh0IHRoZW57DQogICAgICAgICAgICBvcmlnaW5hbFRleHQucmVmZXJlbmNlIGFzIHJlZmVyZW5jZS0+IGNlLnRleHQgPSAocmVmZXJlbmNlLnZhbHVlKSAicmVmZXJlbmNlIjsNCiAgICAgICAgfSJvcmlnaW5hbFRleHQiOw0KICAgICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICB2YWwuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICB9ICJjb2RlIjsNCiAgICAgICAgdmFsLnRyYW5zbGF0aW9uIGFzIHRyYW5zbGF0aW9uIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgdHJhbnNsYXRpb24uY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgIHRyYW5zbGF0aW9uLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgICAgICBxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgdmFsdWUuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICB9ICJ2YWx1ZSI7DQogICAgICAgICAgICB9Ow0KICAgICAgICAgIH0gInRyYW5zbGF0aW9uIjsNCiAgICAgICAgfSJjb2RpbmciOw0KICAgICAgfSJ2YWwiOw0KICAgICAgY2RhLnZhbHVlOkNEIGFzIHZhbCB0aGVuew0KICAgICAgICB2YWwtPm9iLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICB2YWwub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgICAgICAgICAgb3JpZ2luYWxUZXh0LnJlZmVyZW5jZSBhcyByZWZlcmVuY2UtPiBjZS50ZXh0ID0gKHJlZmVyZW5jZS52YWx1ZSkgInJlZmVyZW5jZSI7DQogICAgICAgIH0ib3JpZ2luYWxUZXh0IjsNCiAgICAgICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgIHZhbC5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgfSAiY29kZSI7DQogICAgICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICAgICAgcXVhbGlmaWVyLnZhbHVlIGFzIHZhbHVlIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgIHZhbHVlLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgIHZhbHVlLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgfSAidmFsdWUiOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgICB9ICJ0cmFuc2xhdGlvbiI7DQogICAgICAgIH0iY29kaW5nIjsNCiAgICAgIH0idmFsIjsNCiAgICBjZGEudmFsdWU6UFEgYXMgdmFsIHRoZW57DQogICAgICAgIHZhbC0+b2IudmFsdWUgPSBjcmVhdGUoJ1F1YW50aXR5JykgYXMgcXVhbnRpdHkgdGhlbiB7DQogICAgICAgICAgICB2YWwudmFsdWUgYXMgdmFsdWUtPnF1YW50aXR5LnZhbHVlID0gdmFsdWU7DQogICAgICAgICAgICB2YWwudW5pdCBhcyB1bml0LT4gcXVhbnRpdHkudW5pdCA9IHVuaXQgInVuaXQiOw0KICAgICAgICB9InF1YW50aXR5IjsNCiAgICB9InZhbHVlUXVhbnRpdHkiOw0KICAgIC8vDQogICAgY2RhLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZlVGltZSAtPiBvYi5lZmZlY3RpdmUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsIHZhbHVlKSAidmFsdWUxIjsNCiAgICBjZGEuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKSB0aGVuIHsNCiAgICAgICAgY2RhLmVmZmVjdGl2ZVRpbWUgYXMgZWZmIC0+IG9iLmVmZmVjdGl2ZSA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmZWN0aXZlVGltZSxwZXJpb2QpICJ2YWx1ZTMiOw0KICAgICAgICB9IndoZXJlIjsNCiAgICANCiAgICBjZGEudGV4dCBhcyB0ZXh0IC0+IG9iLm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICB0ZXh0LnJlZmVyZW5jZSBhcyByZWZlcmVuY2UgLT4gbm90ZS50ZXh0ID0gKHJlZmVyZW5jZS52YWx1ZSkgInRleHQiOw0KICAgIH0gIm5vdGUiOw0KICAgIGNkYS5zdGF0dXNDb2RlIGFzIHMgdGhlbiB7DQogICAgICAgIHMuY29kZSBhcyBjb3MtPiBvYi5zdGF0dXMgPSB0cmFuc2xhdGUoY29zLCAnI09CU3N0YXR1cycsICdjb2RlJykgImNvZGVTIjsNCiAgICB9InN0YXR1cyI7DQp9ICANCg0KZ3JvdXAgSW1hZ2luZ1N0dWR5KHNvdXJjZSBzcmM6IGFjdCwgc291cmNlIHNlY3Rpb24gOiBzZWN0aW9uLCB0YXJnZXQgdGd0IDogSW1hZ2luZ1N0dWR5LCB0YXJnZXQgcGF0aWVudDogcGF0aWVudCwgdGFyZ2V0IGVuY291bnRlciA6IGVuY291bnRlcil7DQogICAgc3JjLmlkIC0+IHRndC5pZGVudGlmaWVyOw0KICAgIHNyYyAtPiB0Z3Quc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJyZWZlcmVuY2UiOyAgICANCiAgICBzcmMgLT4gdGd0LmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpICAicmVmZXJlbmNlIjsgIA0KICAgIHNyYyAtPiB0Z3Quc3RhdHVzID0gJ2F2YWlsYWJsZScgInN0YXR1cyI7DQogICAgc3JjLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5UmVsYXRpb25zaGlwIHRoZW57DQogICAgICAgIGVudHJ5UmVsYXRpb25zaGlwLmFjdCBhcyBhY3QgLT4gdGd0LnNlcmllcyBhcyBzZXJpZXMgdGhlbnsNCiAgICAgICAgICAgIGFjdC5pZCBhcyBpZCAtPiBzZXJpZXMudWlkID0gKGlkLnJvb3QpOw0KICAgICAgICAgICAgIHNlY3Rpb24uY29kZSBhcyBjb2RlIC0+IHNlcmllcy5tb2RhbGl0eT0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgY29kZS5jb2RlIGFzIGNvZGUxIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlMSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgIGNvZGUuY29kZVN5c3RlbSBhcyBzeXN0ZW0tPmNvZGluZy5zeXN0ZW09IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgIGNvZGUuZGlzcGxheU5hbWUgYXMgZGlzcGxheS0+Y29kaW5nLmRpc3BsYXk9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgIH0ibW9kYWxpdHkiOw0KICAgICAgICAgICAgYWN0LmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5UmVsYXRpb25zaGlwMiB0aGVuew0KICAgICAgICAgICAgICAgIGVudHJ5UmVsYXRpb25zaGlwMi5vYnNlcnZhdGlvbiBhcyBvYnMgLT4gc2VyaWVzLmluc3RhbmNlIGFzIGluc3RhbmNlIHRoZW57DQogICAgICAgICAgICAgICAgICAgIG9icy5pZCBhcyBpZCAtPiBpbnN0YW5jZS51aWQgPSAoaWQucm9vdCkgInJvb3QiOw0KICAgICAgICAgICAgICAgICAgICBvYnMuY29kZSBhcyBjb2RlMS0+IGluc3RhbmNlLnNvcENsYXNzID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlMS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlMS5jb2RlU3lzdGVtIGFzIHN5c3RlbS0+Y29kaW5nLnN5c3RlbT0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgICAgICBjb2RlMS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5LT5jb2RpbmcuZGlzcGxheT0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgIH0ic29wQ2xhc3MiOw0KICAgICAgICAgICAgICAgIH0gImlkUm9vdCI7DQogICAgICAgICAgICB9Imluc3RhbmNlIjsNCiAgICAgICAgfSAic2VyaWVzIjsNCiAgICB9ICJlbnRyeVJlbGF0aW9uc2hpcCI7DQp9DQoNCmdyb3VwIENvbmRpdGlvbkZ1bmN0aW9uIChzb3VyY2Ugc3JjOiBjZGFFbGVtZW50LCB0YXJnZXQgdGd0OiBDb25kaXRpb24sIHRhcmdldCBwYXRpZW50IDogcGF0aWVudCwgdGFyZ2V0IGVuY291bnRlciA6IGVuY291bnRlciwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSkgew0KICAgIHNyYy5jb2RlIC0+IHRndC5jYXRlZ29yeTsNCiAgICBzcmMgLT4gdGd0LnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICAicmVmZXJlbmNlIjsgICAgDQogICAgc3JjIC0+IHRndC5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAgInJlZmVyZW5jZSI7IA0KICAgIHNyYy5zdGF0dXNDb2RlIGFzIHN0c2NvZGUgLT4gdGd0LnZlcmlmaWNhdGlvblN0YXR1cyBhcyB2ZXJpZnN0YXR1cyB0aGVuIHsgDQogICAgICAgIHN0c2NvZGUgYXMgY29kZVMgLT4gdmVyaWZzdGF0dXMuY29kaW5nID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICBjb2RlUy5jb2RlIC0+IGNvZGluZy5jb2RlID0gJ2NvbmZpcm1lZCcgImNvZGUiOw0KICAgICAgICAgICAgY29kZVMgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLXZlci1zdGF0dXMnICJzeXN0ZW0iOw0KICAgICAgICAgICAgY29kZVMgLT4gY29kaW5nLmRpc3BsYXk9IGNhc3QoJ0NvbmZpcm1lZCcsICdzdHJpbmcnKSAiZGlzcGxheSI7DQogICAgfSJjb2RpbmciOyAgICANCiAgICB9InZlcmlmc3RhdHVzIjsNCiAgICBzcmMgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpIHRoZW4gew0KICAgIHNyYy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gdGd0Lm9uc2V0ID0gY3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmZlY3RpdmVUaW1lLCBwZXJpb2QpICJ2YWx1ZVBlcmlvZCI7DQogICAgfSJ3aGVyZSI7DQogICAgc3JjLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZlVGltZSAtPiB0Z3Qub25zZXQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgZGF0ZVRpbWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsIGRhdGVUaW1lKSAidmFsdWUyIjsNCiAgICBzcmMudmFsdWUgLT4gdGd0LmNvZGU7DQogICAgc3JjLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5UmVsYXRpb25zaGlwIHRoZW57DQogICAgICAgIGVudHJ5UmVsYXRpb25zaGlwLm9ic2VydmF0aW9uIGFzIG9ic2VudHJ5IHRoZW57DQogICAgICAgICAgICBvYnNlbnRyeS5jb2RlIHdoZXJlIGNvZGUgPSc4OTI2MS0yJyB0aGVuew0KICAgICAgICAgICAgICAgIG9ic2VudHJ5IC0+IHRndC5ldmlkZW5jZSBhcyBldmlkZW5jZSwgYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzeSwgIG9ic3kuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdPYnNlcnZhdGlvbicsIGV2aWRlbmNlLmRldGFpbCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzeS5pZCkgdGhlbiBPYnNlcnZhdGlvbihvYnNlbnRyeSwgcGF0aWVudCwgZW5jb3VudGVyLCBvYnN5LCBidW5kbGUpICJvYnNlcnZhdGlvbiI7DQogICAgICAgICAgICB9Im9ic2VydmF0aW9uIjsNCiAgICAgICAgICAgIG9ic2VudHJ5LmNvZGUgd2hlcmUgY29kZSA9ICczMzk5OS00JyB0aGVuew0KICAgICAgICAgICAgICAgIG9ic2VudHJ5LnZhbHVlIGFzIHZhbHVlIC0+IHRndC5jbGluaWNhbFN0YXR1cyBhcyBjbGluaWNhbHN0YXR1cyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgdmFsdWUgYXMgdmFsIC0+IGNsaW5pY2Fsc3RhdHVzLmNvZGluZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsIHdoZXJlKGNvZGUgPSAnTEE5MDQxLTAnKSAtPiBjb2RpbmcuY29kZSA9ICAncmVzb2x2ZWQnICJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCB3aGVyZShjb2RlID0gJ0xBMTg2MzItMicpIC0+IGNvZGluZy5jb2RlID0gICdpbmFjdGl2ZScgImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsIHdoZXJlKGNvZGUgPSAnTEExNjY2Ni0yJykgLT4gY29kaW5nLmNvZGUgPSAgJ2FjdGl2ZScgImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsIC0+IGNvZGluZy5zeXN0ZW0gPSAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tY2xpbmljYWwnICJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXktPiBjb2RpbmcuZGlzcGxheT0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJykgImRpc3BsYXkiOw0KICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7ICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgb2JzZW50cnkudGV4dCBhcyB0ZXh0IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LnJlZmVyZW5jZSBhcyByZWZlcmVuY2UgLT4gY2xpbmljYWxzdGF0dXMudGV4dCA9IChyZWZlcmVuY2UudmFsdWUpICJ0ZXh0IjsNCiAgICAgICAgICAgICAgICAgICAgfSJ0ZXh0IjsNCiAgICAgICAgICAgICAgICB9ImNsaW5pY2Fsc3RhdHVzIjsNCiAgICAgICAgICAgIH0iY2xpbmljYWxTdGF0dXMyIjsNCiAgICAgICAgfSJFbnRyeVJlbE9ic2V2YXRpb24iOw0KICAgICAgICANCiAgICB9ICJlbnRyeVIiOw0KfQ0KDQpncm91cCBhbGxlcmd5RnVuY3Rpb24oc291cmNlIHNyYzogY2RhRWxlbWVudCwgdGFyZ2V0IHRndDogQWxsZXJneUludG9sZXJhbmNlLCB0YXJnZXQgcGF0aWVudCA6IHBhdGllbnQsIHRhcmdldCBlbmNvdW50ZXIgOiBlbmNvdW50ZXIpIHsNCiAgICBzcmMgLT4gdGd0LnBhdGllbnQ9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICAicmVmZXJlbmNlIjsgICAgDQogICAgc3JjIC0+IHRndC5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAgInJlZmVyZW5jZSI7IA0KICAgIHNyYy5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeVJlbGF0aW9uc2hpcDEgdGhlbnsNCiAgICAgICAgZW50cnlSZWxhdGlvbnNoaXAxLm9ic2VydmF0aW9uIGFzIG9ic2VydmF0aW9uMSB0aGVuew0KICAgICAgICAgICAgb2JzZXJ2YXRpb24xIHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKSB0aGVuIHsNCiAgICAgICAgICAgIG9ic2VydmF0aW9uMS5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gdGd0Lm9uc2V0ID0gY3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmZlY3RpdmVUaW1lLCBwZXJpb2QpICJ2YWx1ZVBlcmlvZCI7DQogICAgICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgICAgICBvYnNlcnZhdGlvbjEuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIC0+IHRndC5vbnNldCA9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBkYXRlVGltZSB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZlVGltZSwgZGF0ZVRpbWUpICJ2YWx1ZTIiOyANCiAgICAgICAgICAgIA0KICAgICAgICAgICAgb2JzZXJ2YXRpb24xLnZhbHVlIGFzIGNvZGUgdGhlbnsNCiAgICAgICAgICAgICAgICBjb2RlLmNvZGUgYXMgY29kZTEtPiB0Z3QudHlwZSA9IHRyYW5zbGF0ZShjb2RlMSwnI0FsbGVyZ3lUeXBlTWFwJywnY29kZScpICJ0eXBlIjsgDQogICAgICAgICAgICAgICAgY29kZS5jb2RlIGFzIGNvZGUxIC0+IHRndC5jYXRlZ29yeSA9IHRyYW5zbGF0ZShjb2RlMSwnI0FsbGVyZ3lDYXRlZ29yeU1hcCcsJ2NvZGUnKSAiY2F0ZWdvcnkiOyAgIA0KICAgICAgICAgICAgfSJjb2RlIjsNCiAgICAgICAgICAgIG9ic2VydmF0aW9uMS5wYXJ0aWNpcGFudCBhcyBwYXJ0aWNpcGFudC0+IHRndC5yZWFjdGlvbiBhcyByZWFjdGlvbiB0aGVuew0KICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMS5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeVJlbGF0aW9uc2hpcDIgd2hlcmUgKHR5cGVDb2RlID0gJ01GU1QnKSB0aGVuew0KICAgICAgICAgICAgICAgICAgICBlbnRyeVJlbGF0aW9uc2hpcDIub2JzZXJ2YXRpb24gYXMgb2JzZXJ2YXRpb24yIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIudmFsdWUgLT4gcmVhY3Rpb24ubWFuaWZlc3RhdGlvbiAibWFuaWZlc3RhdGlvbiI7DQogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0aXZlVGltZS5sb3cgYXMgbG93IC0+IHJlYWN0aW9uLm9uc2V0ID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShsb3csIHZhbHVlKSAidmFsdWVQZXJpb2RMb3ciOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSJsb3ciOw0KICAgICAgICAgICAgICAgICAgICB9Im9ic2VydjIiOw0KICAgICAgICAgICAgICAgIH0iZW50cnlSMiI7DQogICAgICAgICAgICAgICAgcGFydGljaXBhbnQucGFydGljaXBhbnRSb2xlIGFzIHBhcnRpY2lwYW50Um9sZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUucGxheWluZ0VudGl0eSBhcyBwbGF5aW5nRW50aXR5IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBwbGF5aW5nRW50aXR5LmNvZGUgLT4gcmVhY3Rpb24uc3Vic3RhbmNlICJyZWFjdGlvbiI7DQogICAgICAgICAgICAgICAgICAgIH0icGxheWluZ0VudGl0eSI7DQogICAgICAgICAgICAgICAgfSJwYXJ0aWNpcGFudFJvbGUiOw0KICAgICAgICAgICAgfSJwYXJ0aWNpcGFudCI7DQogICAgICAgICAgICBvYnNlcnZhdGlvbjEuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlSZWxhdGlvbnNoaXAyIHdoZXJlICh0eXBlQ29kZSA9ICdNRlNUJykgdGhlbnsNCiAgICAgICAgICAgICAgICBlbnRyeVJlbGF0aW9uc2hpcDIub2JzZXJ2YXRpb24gYXMgb2JzZXJ2YXRpb24yIHdoZXJlIG9ic2VydmF0aW9uMS5wYXJ0aWNpcGFudC5leGlzdHMoKS5ub3QoKSAtPiB0Z3QucmVhY3Rpb24gYXMgcmVhY3Rpb24gdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnZhbHVlIC0+IHJlYWN0aW9uLm1hbmlmZXN0YXRpb24gIm1hbmlmZXN0YXRpb24iOw0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3RpdmVUaW1lLmxvdyBhcyBsb3cgLT4gcmVhY3Rpb24ub25zZXQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGxvdywgdmFsdWUpICJ2YWx1ZVBlcmlvZExvdyI7DQogICAgICAgICAgICAgICAgICAgIH0ibG93IjsNCiAgICAgICAgICAgICAgICB9Im9ic2VydjIiOw0KICAgICAgICAgICAgfSJlbnRyeVIyIjsNCiAgICAgICAgICAgIG9ic2VydmF0aW9uMS5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeVJlbGF0aW9uc2hpcDMgd2hlcmUgKHR5cGVDb2RlID0gJ1NVQkonKSB0aGVuew0KICAgICAgICAgICAgICAgIGVudHJ5UmVsYXRpb25zaGlwMy5vYnNlcnZhdGlvbiBhcyBvYnNlcnZhdGlvbjMgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgLy9jcml0aWNhbGl0eQ0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjMudmFsdWUgYXMgdmFsdWUgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGUgYXMgYy0+IHRndC5jcml0aWNhbGl0eSA9IHRyYW5zbGF0ZShjLCcjQ3JpY2FsaXR5TWFwJywnY29kZScpICJ2YWx1ZSI7DQogICAgICAgICAgICAgICAgICAgIH0iY3JpdGljYWxpdHkiOyANCiAgICAgICAgICAgICAgICB9Im9ic2VydjMiOw0KICAgICAgICAgICAgICAgIGVudHJ5UmVsYXRpb25zaGlwMy5hY3QgYXMgYWN0IC0+IHRndC5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgYWN0LnRleHQgYXMgdGV4dCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5yZWZlcmVuY2UgYXMgcmVmZXJlbmNlIC0+IG5vdGUudGV4dCA9IChyZWZlcmVuY2UudmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICB9Im5vdGUiOw0KICAgICAgICAgICAgICAgIH0iYWN0IjsNCiAgICAgICAgICAgIH0iZW50cnlSMyI7DQogICAgICAgICAgICBvYnNlcnZhdGlvbjEuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlSZWxhdGlvbnNoaXA0IHdoZXJlICh0eXBlQ29kZSA9ICdSRUZSJykgdGhlbnsNCiAgICAgICAgICAgICAgICBlbnRyeVJlbGF0aW9uc2hpcDQub2JzZXJ2YXRpb24gYXMgb2JzZXJ2YXRpb240ICB0aGVuew0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjQudmFsdWUgYXMgdmFsdWUgLT4gdGd0LmNsaW5pY2FsU3RhdHVzIGFzIGNsaW5pY2FsU3RhdHVzIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSBhcyB2YWx1IC0+IGNsaW5pY2FsU3RhdHVzLmNvZGluZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdSB3aGVyZShjb2RlID0gJ0xBOTA0MS0wJykgLT4gY29kaW5nLmNvZGUgPSAgJ3Jlc29sdmVkJyAiY29kZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdSB3aGVyZShjb2RlID0gJ0xBMTg2MzItMicpIC0+IGNvZGluZy5jb2RlID0gICdpbmFjdGl2ZScgImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHUgd2hlcmUoY29kZSA9ICdMQTE2NjY2LTInKSAtPiBjb2RpbmcuY29kZSA9ICAnYWN0aXZlJyAiY29kZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hbGxlcmd5aW50b2xlcmFuY2UtY2xpbmljYWwnICJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHUuZGlzcGxheU5hbWUgYXMgZGlzcGxheS0+IGNvZGluZy5kaXNwbGF5PSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKSAiZGlzcGxheSI7DQogICAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICAgIH0iY2xpbmljYWxTdGF0dXMiOw0KICAgICAgICAgICAgICAgIH0ib2JzZXJ2NCI7DQogICAgICAgICAgICB9ImVudHJ5UjQiOw0KICAgICAgICB9Im9ic2VydmF0aW9uIjsNCiAgICB9ImVudHJ5cmVsYXRpb25zaGlwIjsNCn0NCg0KZ3JvdXAgRmFtaWx5TWVtYmVyRnVuY3Rpb24oc291cmNlIHNyYyA6IG9yZ2FuaXplciwgdGFyZ2V0IHRndCA6IGZhbWlseU1lbWJlciwgdGFyZ2V0IHBhdGllbnQgOiBwYXRpZW50KXsNCiAgICBzcmMgLT4gdGd0LnBhdGllbnQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgICJwYXRSZWZlcmVuY2UiOyAgICANCiAgICBzcmMuc3RhdHVzQ29kZSAtPiB0Z3Quc3RhdHVzOw0KICAgIHNyYy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gdGd0LmRhdGUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsdmFsdWUpICJkYXRlIjsNCiAgICBzcmMuc3ViamVjdCBhcyBzdWJqZWN0IHRoZW57DQogICAgICAgIHN1YmplY3QucmVsYXRlZFN1YmplY3QgYXMgcmVsYXRlZFN1YmplY3QgdGhlbnsNCiAgICAgICAgICAgIHJlbGF0ZWRTdWJqZWN0LmNvZGUgLT4gdGd0LnJlbGF0aW9uc2hpcCAicmVsYXRpb25zaGlwQ29kZSI7DQogICAgICAgICAgICByZWxhdGVkU3ViamVjdC5zdWJqZWN0IGFzIHN1YmplY3QgLT4gdGd0LnNleCBhcyBzZXggdGhlbiB7DQogICAgICAgICAgICAgICAgc3ViamVjdC5hZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUgYXMgYWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlIC0+IHNleC5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUuY29kZSBhcyBzZXhDb2RlLT4gY29kaW5nLmNvZGUgPSB0cmFuc2xhdGUoc2V4Q29kZSwgJyNjbS12My1hZG1pbmlzdHJhdGl2ZS1nZW5kZXInLCAnY29kZScpICJnZW5kZXIiOw0KICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUuc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSAnaHR0cDovL2hsNy5vcmcvZmhpci9hZG1pbmlzdHJhdGl2ZS1nZW5kZXInICJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgIH0ic3ViamVjdCI7DQogICAgICAgIH0icmVsYXRlZFN1YiI7DQogICAgfSJyZWxhdGlvbnNoaXAiOw0KICAgIHNyYy5jb21wb25lbnQgYXMgY29tcG9uZW50IC0+IHRndC5jb25kaXRpb24gYXMgY29uZGl0aW9uIHRoZW57DQogICAgICAgIGNvbXBvbmVudC5vYnNlcnZhdGlvbiBhcyBvYnNlcnZhdGlvbiB0aGVuew0KICAgICAgICAgICAgb2JzZXJ2YXRpb24uY29kZSAtPiBjb25kaXRpb24uY29kZSAiY29kZSI7DQogICAgICAgICAgICBvYnNlcnZhdGlvbi50ZXh0IGFzIHRleHQgLT4gdGd0Lm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgICAgIHRleHQucmVmZXJlbmNlIGFzIHJlZmVyZW5jZSAtPiBub3RlLnRleHQgPSAocmVmZXJlbmNlLnZhbHVlKSAidmFsdWUiOw0KICAgICAgICAgICAgfSJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgb2JzZXJ2YXRpb24uc3RhdHVzQ29kZSAtPiB0Z3Quc3RhdHVzOw0KICAgICAgICAgICAgb2JzZXJ2YXRpb24gd2hlcmUgb2JzZXJ2YXRpb24uZWZmZWN0aXZlVGltZS5leGlzdHMoKSB0aGVuIHsNCiAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gdGd0LmNvbmRpdGlvbiA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgY29uZGl0aW9uIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi5jb2RlIC0+IGNvbmRpdGlvbi5jb2RlICJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24udmFsdWUgLT4gY29uZGl0aW9uLm91dGNvbWUgImNvZGVhYmxlIjsgDQogICAgICAgICAgICAgICAgICAgIGVmZmVjdGl2ZVRpbWUgLT4gY29uZGl0aW9uLm9uc2V0ID0gY3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdGl2ZVRpbWUgLT4gcGVyaW9kLnN0YXJ0ID0gIGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBzdGFydCB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZlVGltZSxzdGFydCkgInZhbCI7IA0KICAgICAgICAgICAgICAgICAgICB9ImVmZnQiOw0KICAgICAgICAgICAgICAgIH0iZWZmdHRlbXAiOw0KICAgICAgICAgICAgfSJjb250IjsNCiAgICAgICAgICAgIG9ic2VydmF0aW9uLnZhbHVlIC0+IGNvbmRpdGlvbi5vdXRjb21lICJjb2RlYWJsZSI7DQogICAgICAgICAgICBvYnNlcnZhdGlvbi5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeVIgdGhlbnsNCiAgICAgICAgICAgICAgICBlbnRyeVIub2JzZXJ2YXRpb24gYXMgb2JzIHRoZW57DQogICAgICAgICAgICAgICAgICAgIG9icyB3aGVyZSAoY29kZS5jb2RlID0nMzUyNjctNCcpIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBvYnMudmFsdWUgYXMgdmFsdWUgLT4gY29uZGl0aW9uLm9uc2V0ID0gY3JlYXRlKCdBZ2UnKSBhcyBBZ2UgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgYXMgdmFsdWVBZ2UgLT4gQWdlLnZhbHVlID0gdmFsdWVBZ2UgImFnZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudW5pdCBhcyB1bml0IC0+IEFnZS5jb2RlID0gdW5pdCAidW5pdCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudW5pdCBhcyB1bml0IC0+IEFnZS51bml0ID0gdW5pdCAidW5pdCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gQWdlLnN5c3RlbSA9ICdodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnJyAic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgfSAidmFsdWUiOw0KICAgICAgICAgICAgICAgIH0iaW5zb3JnZW56YSI7DQogICAgICAgICAgICAgICAgICAgIG9icyB3aGVyZSAoY29kZS5jb2RlID0nMzkwMTYtMScpIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBvYnMudmFsdWUgYXMgdmFsdWUgLT4gdGd0LmRlY2Vhc2VkID0gY3JlYXRlKCdBZ2UnKSBhcyBBZ2UgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgYXMgdmFsdWVBZ2UgLT4gQWdlLnZhbHVlID0gdmFsdWVBZ2UgImFnZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudW5pdCBhcyB1bml0IC0+IEFnZS5jb2RlID0gdW5pdCAidW5pdCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudW5pdCBhcyB1bml0IC0+IEFnZS51bml0ID0gdW5pdCAidW5pdCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gQWdlLnN5c3RlbSA9ICdodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnJyAic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgfSAidmFsdWUiOw0KICAgICAgICAgICAgICAgIH0iZGVhdGgiOw0KICAgICAgICAgICAgfSJvYnNlciI7DQogICAgICAgICAgICB9IkVudHJ5UmVsIjsNCiAgICAgICAgfSJvYnNlcnZhdGlvbiI7DQogICAgfSJjb21wb25lbnQiOw0KfQ==", "subType": "00"}}, "filename": "RefertodiRadiologiaBody_v2.2.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:44:04.653Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f456be0517258e7dfb96"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodiSpecialisticaAmbulatorialeBody", "version": "2.7", "template_id_root": ["2.16.840.1.113883.2.9.10.1.9.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "RefertodiSpecialisticaAmbulatorialeBody_v2.7.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:44:06.464Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f45abe0517258e7dfb97"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/Vaccinazioni", "version": "2.0", "template_id_root": ["2.16.840.1.113883.2.9.10.1.11.1.1", "2.16.840.1.113883.2.9.10.1.11.1.2"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "Vaccinazioni_v2.0.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:44:10.567Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f45dbe0517258e7dfb98"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/verbalePS", "version": "2.4", "template_id_root": ["2.16.840.1.113883.2.9.10.1.6.1"], "content": {"$binary": {"base64": "bWFwICJodHRwOi8vc2FsdXRlLmdvdi5pdC9pZy9jZGEtZmhpci1tYXBzL1N0cnVjdHVyZU1hcC92ZXJiYWxlUFMiID0gInZlcmJhbGVQUyINCg0KY29uY2VwdG1hcCAiQWRtaW5pc3RyYXRpdmVHZW5kZXIiIHsNCiAgcHJlZml4IHMgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvVmFsdWVTZXQvdjMtQWRtaW5pc3RyYXRpdmVHZW5kZXIiDQogIHByZWZpeCB0ID0gImh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWRtaW5pc3RyYXRpdmUtZ2VuZGVyIg0KDQogIHM6TSA9PSB0Om1hbGUNCiAgczpGID09IHQ6ZmVtYWxlDQp9DQoNCmNvbmNlcHRtYXAgIkFsbGVyZ3lUeXBlTWFwIiB7DQoNCiAgICBwcmVmaXggcyA9ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC92My10eXBlIg0KICANCiAgICBwcmVmaXggdCA9ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FsbGVyZ3lpbnRvbGVyYW5jZS1jbGluaWNhbCINCiAgDQogICAgczpPSU5UID09IHQ6aW50b2xlcmFuY2UNCiAgICBzOkFMRyA9PSB0OmFsbGVyZ3kNCiAgICBzOkRBTEcgPT0gdDphbGxlcmd5DQogICAgczpFQUxHID09IHQ6YWxsZXJneQ0KICAgIHM6RkFMRyA9PSB0OmFsbGVyZ3kNCiAgICBzOk5BSU5UID09IHQ6aW50b2xlcmFuY2UNCiAgICBzOkZOQUlOVCA9PSB0OmludG9sZXJhbmNlDQogICAgczpETkFJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICAgIHM6RU5BSU5UID09IHQ6aW50b2xlcmFuY2UNCiAgICBzOkZJTlQgPT0gdDppbnRvbGVyYW5jZQ0KICAgIHM6RElOVCA9PSB0OmludG9sZXJhbmNlDQogICAgczpFSU5UID09IHQ6aW50b2xlcmFuY2UNCiAgfQ0KICBjb25jZXB0bWFwICJBbGxlcmd5Q2F0ZWdvcnlNYXAiIHsNCg0KICAgIHByZWZpeCBzID0gImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL1ZhbHVlU2V0L3YzLXR5cGUiDQogICAgcHJlZml4IHQgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9hbGxlcmd5aW50b2xlcmFuY2UtY2xpbmljYWwiDQogIA0KICAgIHM6REFMRyA9PSB0Om1lZGljYXRpb24NCiAgICBzOkVBTEcgPT0gdDplbnZpcm9tZW50DQogICAgczpGQUxHID09IHQ6Zm9vZA0KICAgIHM6Rk5BSU5UID09IHQ6Zm9vZA0KICAgIHM6RE5BSU5UID09IHQ6bWVkaWNhdGlvbg0KICAgIHM6RU5BSU5UID09IHQ6ZW52aXJvbWVudA0KICAgIHM6RklOVCA9PSB0OmZvb2QNCiAgICBzOkRJTlQgPT0gdDptZWRpY2F0aW9uDQogICAgczpFSU5UID09IHQ6ZW52aXJvbWVudA0KICB9DQoNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQ2xpbmljYWxEb2N1bWVudCIgYWxpYXMgQ2xpbmljYWxEb2N1bWVudCBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQXNzaWduZWRBdXRob3IiIGFsaWFzIEFzc2lnbmVkQXV0aG9yIGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQXNzaWduZWRFbnRpdHkiIGFsaWFzIEFzc2lnbmVkRW50aXR5IGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQXNzb2NpYXRlZEVudGl0eSIgYWxpYXMgQXNzb2NpYXRlZEVudGl0eSBhcyBxdWVyaWVkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0N1c3RvZGlhbk9yZ2FuaXphdGlvbiIgYWxpYXMgQ3VzdG9kaWFuT3JnYW5pemF0aW9uIGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vT3JnYW5pemF0aW9uUGFydE9mIiBhbGlhcyBPcmdhbml6YXRpb25QYXJ0T2YgYXMgcXVlcmllZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Pcmdhbml6YXRpb24iIGFsaWFzIHJhcHJlc2VudGVkT3JnYW5pemF0aW9uIGFzIHF1ZXJpZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vU2VjdGlvbiIgYWxpYXMgU2VjdGlvbiBhcyBxdWVyaWVkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BhdGllbnRSb2xlIiBhbGlhcyBQYXRpZW50Um9sZSBhcyBxdWVyaWVkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0FEIiBhbGlhcyBBRCBhcyBzb3VyY2UNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9CdW5kbGUiIGFsaWFzIEJ1bmRsZSBhcyB0YXJnZXQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Db21wb3NpdGlvbiIgYWxpYXMgQ29tcG9zaXRpb24gYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QYXRpZW50IiBhbGlhcyBQYXRpZW50IGFzIHByb2R1Y2VkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vRW5jb3VudGVyIiBhbGlhcyBFbmNvdW50ZXIgYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QZXJzb24iIGFsaWFzIFBhdGllbnQgYXMgcHJvZHVjZWQNCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QcmFjdGl0aW9uZXIiIGFsaWFzIFByYWN0aXRpb25lciBhcyBwcm9kdWNlZA0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL09yZ2FuaXphdGlvbiIgYWxpYXMgT3JnYW5pemF0aW9uIGFzIHByb2R1Y2VkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0FjdCIgYWxpYXMgQWN0IGFzIHByb2R1Y2VkDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0lWTC1QUSIgYWxpYXMgSVZMX1BRIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9JVkwtVFMiIGFzIHNvdXJjZQ0KdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9QUSIgYWxpYXMgUFEgYXMgc291cmNlDQp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vU2ltcGxlUXVhbnRpdHkiIGFsaWFzIFNpbXBsZVF1YW50aXR5IGFzIHRhcmdldA0KDQoNCmltcG9ydHMgImh0dHA6Ly9zYWx1dGUuZ292Lml0L2lnL2NkYS1maGlyLW1hcHMvU3RydWN0dXJlTWFwL0NkYVRvRmhpckRhdGFUeXBlcyINCmltcG9ydHMgImh0dHA6Ly9zYWx1dGUuZ292Lml0L2lnL2NkYS1maGlyLW1hcHMvU3RydWN0dXJlTWFwL0ZVTExIRUFERVIiDQoNCg0KZ3JvdXAgQ2RhVG9CdW5kbGUoc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUpIHsNCiAgY2RhIC0+ICBidW5kbGUuZW50cnkgYXMgZSwgZS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGUucmVzb3VyY2UgPSBjcmVhdGUoJ0NvbXBvc2l0aW9uJykgYXMgY29tcG9zaXRpb24sICBjb21wb3NpdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0NvbXBvc2l0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnQ29tcG9zaXRpb24nLCAgYnVuZGxlLmVudHJ5IGFzIGUyLCBlMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0UEFULCByZXF1ZXN0UEFULm1ldGhvZCA9ICdQVVQnLCBlMi5yZXNvdXJjZSA9IGNyZWF0ZSgnUGF0aWVudCcpIGFzIHBhdGllbnQsICBwYXRpZW50LmlkID0gdXVpZCgpIGFzIHV1aWQyLCAgZTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJywgdXVpZDIpLCBidW5kbGUuZW50cnkgYXMgZTMsIGUzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTMucmVzb3VyY2UgPSBjcmVhdGUoJ0VuY291bnRlcicpIGFzIGVuY291bnRlciwgIGVuY291bnRlci5pZCA9IHV1aWQoKSBhcyB1dWlkMywgIGUzLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJywgdXVpZDMpLHJlcXVlc3QudXJsID0gJ0VuY291bnRlcicsDQogIGJ1bmRsZS5lbnRyeSBhcyBlNiwgZTYucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICBlNi5yZXNvdXJjZSA9IGNyZWF0ZSgnRG9jdW1lbnRSZWZlcmVuY2UnKSBhcyBEb2N1bWVudFJlZmVyZW5jZSwgIERvY3VtZW50UmVmZXJlbmNlLmlkID0gdXVpZCgpIGFzIHV1aWQ2LCAgZTYuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0RvY3VtZW50UmVmZXJlbmNlLycsIHV1aWQ2KSxyZXF1ZXN0LnVybCA9ICdEb2N1bWVudFJlZmVyZW5jZScgdGhlbiB7DQogICAgY2RhIHRoZW4gQ2xpbmljYWxEb2N1bWVudFRvQnVuZGxlKGNkYSwgcGF0aWVudCwgY29tcG9zaXRpb24sIGVuY291bnRlciwgYnVuZGxlLERvY3VtZW50UmVmZXJlbmNlKSAiY2RhdG9idW5kbGUiOw0KICAgIGNkYS5yZWNvcmRUYXJnZXQgYXMgcmVjb3JkVGFyZ2V0IHRoZW57DQogICAgICByZWNvcmRUYXJnZXQucGF0aWVudFJvbGUgYXMgcGF0aWVudCB0aGVuew0KICAgICAgICAgcGF0aWVudC5pZCBhcyBpZC0+IHBhdGllbnQuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0MSAtPiBpZGVudGlmaWVyLnZhbHVlID0gZXh0MSAidmFsdWUiOw0KICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgIH0iaWRmciI7DQogICAgICAgICAgcGF0aWVudC5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgb3IgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuNycpDQogICAgICAgICAgb3IgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMycpIG9yKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMTcnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4xOCcpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwLjQuMS4xJykNCiAgICAgICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4yMC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjMwLjQuMS4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjQxLjQuMS4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjQyLjQuMS4xJykNCiAgICAgICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi41MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjYwLjQuMS4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjcwLjQuMS4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjgwLjQuMS4xJykNCiAgICAgICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi45MC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwMC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjExMC40LjEuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEyMC40LjEuMScpDQogICAgICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTMwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTQwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTUwLjQuMS4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTYwLjQuMS4xJykNCiAgICAgICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xNzAuNC4xLjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xODAuNC4xLjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xOTAuNC4xLjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4yMDAuNC4xLjEnKQ0KICAgICAgICAgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjEwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjIwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjMwLjQuMScpIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjQxLjQuMScpDQogICAgICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNDIuNC4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNTAuNC4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNjAuNC4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuNzAuNC4xJykNCiAgICAgICAgICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi44MC40LjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi45MC40LjEnKSBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMDAuNC4xJykgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTEwLjQuMScpDQogICAgICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTIwLjQuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xMzAuNC4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE0MC40LjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTUwLjQuMScpDQogICAgICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTYwLjQuMScpICBvciAocm9vdCA9ICcyLjE2Ljg0MC4xLjExMzg4My4yLjkuMi4xNzAuNC4xJykgIG9yIChyb290ID0gJzIuMTYuODQwLjEuMTEzODgzLjIuOS4yLjE4MC40LjEnKSAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMTkwLjQuMScpDQogICAgICAgICAgb3IgKHJvb3QgPSAnMi4xNi44NDAuMS4xMTM4ODMuMi45LjIuMjAwLjQuMScpIG9yIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjE1JykgIHRoZW4gew0KICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiByZXF1ZXN0UEFULnVybCA9IGFwcGVuZCgnUGF0aWVudD9pZGVudGlmaWVyPScsZXh0KSAiVVVJRCI7DQogICAgICAgICAgICB9ImV4dCI7DQogICAgICAgICAgfSJyZWNvcmQiOw0KICAgICAgICB9InJlY1BhdCI7DQogIH0gIkNsaW5pY2FsRG9jdW1lbnRUb0JvZHkiOw0KfQ0KDQpncm91cCBDbGluaWNhbERvY3VtZW50VG9CdW5kbGUoc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IGNvbXBvc2l0aW9uIDogQ29tcG9zaXRpb24sIHRhcmdldCBlbmNvdW50ZXIgOiBFbmNvdW50ZXIsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUgLCB0YXJnZXQgZG9jdW1lbnRyZWZlcmVuY2UgOiBEb2N1bWVudFJlZmVyZW5jZSkgew0KICBjZGEgLT4gYnVuZGxlLmlkID0gdXVpZCgpICJpZCI7DQogIGNkYS5pZCAtPiBidW5kbGUuaWRlbnRpZmllciAiaWRlbnRpZmllciI7DQogIGNkYSAtPiBidW5kbGUudHlwZSA9ICd0cmFuc2FjdGlvbicgInR5cGUiOw0KICBjZGEgLT4gYnVuZGxlLnRpbWVzdGFtcD0odGltZXN0YW1wLm5vdygpKSAiZGF0ZSI7DQogIGNkYSB0aGVuIENsaW5pY2FsRG9jdW1lbnRDb21wb3NpdGlvbihjZGEsIGNvbXBvc2l0aW9uLCBwYXRpZW50LCBlbmNvdW50ZXIsIGJ1bmRsZSxkb2N1bWVudHJlZmVyZW5jZSkgImNvbXBvc2l0aW9uIjsNCiAgY2RhLmNvbXBvbmVudCBhcyBjb21wb25lbnQgdGhlbiB7DQogICAgY29tcG9uZW50LnN0cnVjdHVyZWRCb2R5IGFzIGJvZHkgdGhlbiB7DQogICAgICBib2R5LmNvbXBvbmVudCBhcyBjb21wb25lbnQgIHRoZW4gew0KCSAgICAgY29tcG9uZW50LnNlY3Rpb24gYXMgc3JjU2VjdGlvbiB0aGVuIHsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlIChjb2RlPScxMTQ1OS01JyApLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIE1vZGFsaXRhZGlUcmFzcG9zdG8oY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSJNb2RhbGl0YWRpdHJhc3BvcnRvIjsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnNzgzMzctMycpIC0+IGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBJbnF1YWRyYW1lbnRvQ2xpbmljb0luaXppYWxlKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIklucXVhZHJhbWVudG9jbGluaWNvIjsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnNDYyMzktMCcpIC0+IGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBNb3Rpdm9EZWxsYVZpc2l0YShjZGEsIHNyY1NlY3Rpb24sIHBhdGllbnQsIHRndFNlY3Rpb24sIGJ1bmRsZSxlbmNvdW50ZXIpICJJbnF1YWRyYW1lbnRvY2xpbmljbyI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzU0MDk0LTgnKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gVHJpYWdlKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIlRyaWFnZSI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzQ2MjQwLTgnKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25FbmNvdW50ZXIoY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAibW90aXZvcmljb3Zlcm8iOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc4NjQ4LTgnKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25EZWNvcnNvT3NwZWRhbGllcm8oY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiRGVjb3Jzb09zcGVkYWxpZXJvIjsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnNTUxMDktMycpIC0+IGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBDbGluaWNhbERvY3VtZW50U2VjdGlvbkNvbXBsaWNhbnplKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIkNvbXBsaWNhemlvbmkiOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc2MjM4Ny02JykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uQ29uc3VsZW56YShjZGEsIHNyY1NlY3Rpb24sIHBhdGllbnQsIHRndFNlY3Rpb24sIGJ1bmRsZSxlbmNvdW50ZXIpICJIb3NwaXRhbGRpc2NoYXJnZXN0dWRpZXNzdW1tYXJ5IjsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnMzA5NTQtMicpIC0+IGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBDbGluaWNhbERvY3VtZW50U2VjdGlvbkFjY2VydGFtZW50aShjZGEsIHNyY1NlY3Rpb24sIHBhdGllbnQsIHRndFNlY3Rpb24sIGJ1bmRsZSxlbmNvdW50ZXIpICJBY2NlcnRhbWVudGkiOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc4NzE2LTMnKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25QYXJhbWV0cmlWaXRhbGkoY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiQWNjZXJ0YW1lbnRpIjsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnMjk1NDktMycpIC0+IGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBDbGluaWNhbERvY3VtZW50U2VjdGlvblRlcmFwaWFGYXJtYWNvSW5Qcm9udG8oY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiQWNjZXJ0YW1lbnRpIjsNCiAgICAgICAgc3JjU2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnMTg3NzYtNScpIC0+IGNvbXBvc2l0aW9uLnNlY3Rpb24gYXMgdGd0U2VjdGlvbiAgdGhlbiBDbGluaWNhbERvY3VtZW50U2VjdGlvblBpYW5vQ3VyYURpbWlzc2lvbmUoY2RhLCBzcmNTZWN0aW9uLCBwYXRpZW50LCB0Z3RTZWN0aW9uLCBidW5kbGUsZW5jb3VudGVyKSAiUGlhbm9kaWN1cmFhbGxhZGltaXNzaW9uZSI7DQogICAgICAgIHNyY1NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzI4NTc0LTInKSAtPiBjb21wb3NpdGlvbi5zZWN0aW9uIGFzIHRndFNlY3Rpb24gIHRoZW4gQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25EaW1pc3Npb25lKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIkRpbWlzc2lvbmUiOw0KICAgICAgICBzcmNTZWN0aW9uLmNvZGUgd2hlcmUoY29kZSA9ICc3NTMxMS0xJykgLT4gY29tcG9zaXRpb24uc2VjdGlvbiBhcyB0Z3RTZWN0aW9uICB0aGVuIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uVGVyYXBpYUZhcm1hY29sb2dpY2FEaW1pc3Npb25lKGNkYSwgc3JjU2VjdGlvbiwgcGF0aWVudCwgdGd0U2VjdGlvbiwgYnVuZGxlLGVuY291bnRlcikgIlRlcmFwaWFGYXJtYWNvbG9naWNhRGltaXNzaW9uZSI7DQogICAgICB9Ow0KICAgICAgfTsNCiAgICB9ImJvZHkiOw0KICB9Ow0KfQ0KDQovL1NlemlvbmUgY29tcGxpY2FuemUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25Db21wbGljYW56ZShzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlcil7DQogICAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogICAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogICAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKSB0aGVuIHsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgICAgY2RhVGV4dCAtPiBmaGlyVGV4dC5zdGF0dXMgPSAnZ2VuZXJhdGVkJyAibmFycmF0aXZlU3RhdHVzIjsNCiAgICAgIGNkYVRleHQgYXMgdCAtPiBmaGlyVGV4dC5kaXYgPSB0ICJuYXJyYXRpdmVUZXh0IjsNCiAgICB9ICJjZGFUZXh0IjsNCiAgfSJlbnRyeWV4aXN0cyI7DQogIC8vIFNlemlvbmUgU3RydXR0dXJhdGEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgIHNyYy5lbnRyeSBhcyBlbnRyeTEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICx0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgdGhlbiB7DQogICAgICBlbnRyeTEub2JzZXJ2YXRpb24gYXMgb2JzIHRoZW4gT2JzZXJ2YXRpb24ob2JzLCBwYXRpZW50ICxlbmMgLG9ic2VydmF0aW9uLCBidW5kbGUpICJhY3QiOw0KICAgIH0iZW50cnkiOw0KICAgIC8vIFNlemlvbmUgTmFycmF0aXZhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gYnVuZGxlLmVudHJ5IGFzIGU4LCBlOC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTgucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgT2JzZXJ2YXRpb24sICBPYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkOCwgIGU4LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkOCksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlT2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgICBzcmMgLT4gT2JzZXJ2YXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgIHNyYyAtPiBPYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgDQogICAgICAgICAgICBzcmMuY29kZSAtPiBPYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgICAgc3JjIHdoZXJlIG9ic2VydmF0aW9uLnN0YXR1c0NvZGUuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgICAgICAgc3JjLT5PYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgICBjZGFUZXh0IC0+IE9ic2VydmF0aW9uLm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgICBjZGFUZXh0IGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7DQogICAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgICAgfSJjZGFUZXh0IjsNCiAgICAgICAgfSJ3aGVyZSI7DQogIA0KfQ0KDQpncm91cCBPYnNlcnZhdGlvbiAoc291cmNlIG9icyA6IE9ic2VydmF0aW9uLCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQsIHRhcmdldCBlbmNvdW50ZXIgOiBFbmNvdW50ZXIsIHRhcmdldCBvYiA6IE9ic2VydmF0aW9uLCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlKSB7DQogIG9icy0+b2Iuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgb2JzLT5vYi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSAicmVmZXJlbmNlIjsgIA0KICBvYnMuY29kZSAtPiBvYi5jb2RlOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYi5zdGF0dXMgPSdmaW5hbCc7DQogIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9iLnN0YXR1cyA9J3JlZ2lzdGVyZWQnOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gb2Iuc3RhdHVzID0nY2FuY2VsbGVkJzsNCiAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2Iuc3RhdHVzID0ncGFydGlhbCc7DQogIG9icyB3aGVyZSBvYnMuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgb2JzLT5vYi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgfSJzdGF0dXNjb2RlIjsNCiAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZlVGltZSAtPiBvYi5lZmZlY3RpdmUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsIHZhbHVlKSAidmFsdWUyIjsNCiAgb2JzIHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKSB0aGVuIHsNCiAgICBvYnMuZWZmZWN0aXZlVGltZSBhcyBlZmYtPiBvYi5lZmZlY3RpdmU9Y3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmYscGVyaW9kKTsNCiAgICB9IndoZXJlIjsNCiAgb2JzLnZhbHVlOklOVCBhcyBpbnQtPm9iLnZhbHVlPShpbnQudmFsdWUpICJ2YWx1ZSI7DQogIG9icy52YWx1ZTpDRCBhcyB2YWwgdGhlbnsNCiAgICB2YWwtPm9iLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgIHZhbC5vcmlnaW5hbFRleHQgLT4gY2UudGV4dDsNCiAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgIH0gImNvZGUiOw0KICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgdHJhbnNsYXRpb24uY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgIHZhbHVlLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgfSAidmFsdWUiOw0KICAgICAgICB9InRyYW5zbGF0aW9uMSI7DQogICAgICB9ICJ0cmFuc2xhdGlvbiI7DQogICAgfSJjb2RpbmciOw0KICB9InZhbCI7DQogIG9icy52YWx1ZTpDRSBhcyB2YWwgdGhlbnsNCiAgICB2YWwtPm9iLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgIHZhbC5vcmlnaW5hbFRleHQgLT4gY2UudGV4dDsNCiAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgIH0gImNvZGUiOw0KICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgdHJhbnNsYXRpb24uY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgIHZhbHVlLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgfSAidmFsdWUiOw0KICAgICAgICB9InRyYW5zbGF0aW9uMSI7DQogICAgICB9ICJ0cmFuc2xhdGlvbiI7DQogICAgfSJjb2RpbmciOw0KICB9InZhbCI7DQogIG9icy52YWx1ZTpQUSBhcyB2YWwgdGhlbnsNCiAgICB2YWwtPm9iLnZhbHVlID0gY3JlYXRlKCdRdWFudGl0eScpIGFzIHF1YW50aXR5IHRoZW4gew0KICAgIHZhbC52YWx1ZSBhcyB2YWx1ZS0+cXVhbnRpdHkudmFsdWUgPSB2YWx1ZTsNCiAgICB2YWwudW5pdCBhcyB1bml0LT4gcXVhbnRpdHkudW5pdCA9IHVuaXQgInVuaXQiOw0KICAgIH0icXVhbnRpdHkiOw0KICB9InZhbHVlUXVhbnRpdHkiOw0KICBvYnMudmFsdWU6QkwgYXMgdmFsdWUtPm9iLnZhbHVlID1jcmVhdGUoJ2Jvb2xlYW4nKSxvYi52YWx1ZT0gKHZhbHVlLnZhbHVlKSAidmFsdWUiOw0KICBvYnMudmFsdWU6U1QgYXMgdmFsdWUtPm9iLnZhbHVlID1jcmVhdGUoJ3N0cmluZycpLG9iLnZhbHVlPSAodmFsdWUuZGF0YVN0cmluZykgInZhbHVlIjsNCiAgb2JzLmludGVycHJldGF0aW9uQ29kZSAtPiBvYi5pbnRlcnByZXRhdGlvbjsNCiAgICBvYnMubWV0aG9kQ29kZSAtPiBvYi5tZXRob2Q7DQogIG9icy5wZXJmb3JtZXIgYXMgcGVyZm9ybWVyIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuIHsNCiAgICAgIHBlcmZvcm1lci5hc3NpZ25lZEVudGl0eSBhcyBlbnRpdHkgdGhlbiB7DQogICAgICAgIGVudGl0eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICBlbnRpdHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICBlbnRpdHkgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICBlbnRpdHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvb2JzZXJ2YXRpb24vcGVyZm9ybWVyJyJjb2RlIjsNCiAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgIH0ibWV0YSI7DQogICAgICAgIGVudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gew0KICAgICAgICAgICAgZW50aXR5LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICB9ImV4dCI7DQogICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMSwgZTEuZnVsbFVybCAgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDEpLCBvYi5wZXJmb3JtZXIgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJwZXJmb3JtZXIiOw0KICAgICAgICAgIH0iciI7DQogICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgIGVudGl0eS5hc3NpZ25lZFBlcnNvbiBhcyBwZXJzb24gdGhlbiB7DQogICAgICAgICAgcGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgcGVyc29uLmJpcnRoVGltZSBhcyBiaXJ0aFRpbWUgdGhlbnsNCiAgICAgICAgICAgIGJpcnRoVGltZS52YWx1ZSBhcyBkYXRlIC0+IHByYWN0aXRpb25lci5iaXJ0aERhdGU9IHRydW5jYXRlKGRhdGUsIDEwKTsNCiAgICAgICAgICB9ImJpcnRoIjsNCiAgICAgICAgfSJuYW1lIjsNCiAgICAgIH0iYXNzaWduZWRFbnRpdHkiOw0KICAgIH0icGVyZm9ybWVyIjsNCiAgb2JzLnJlZmVyZW5jZVJhbmdlIGFzIHJlZlJhbmdlIC0+IG9iLnJlZmVyZW5jZVJhbmdlID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZWYgdGhlbiB7DQogICAgICByZWZSYW5nZS5vYnNlcnZhdGlvblJhbmdlIGFzIG9ic1JhbmdlIC0+IHJlZi5sb3cgPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgTG93ICB0aGVuIHsNCiAgICAgICAgICBvYnNSYW5nZS52YWx1ZTogSVZMX1BRIGFzIHYgIHRoZW4gew0KICAgICAgICAgICAgdi5sb3cgYXMgbDEgdGhlbiB7DQogICAgICAgICAgICAgIGwxLnZhbHVlIGFzIGRlY1ZhbHVlLT4gTG93LnZhbHVlID0gZGVjVmFsdWU7DQogICAgICAgICAgICAgIGwxLnVuaXQgYXMgVW5pdC0+IExvdy51bml0ID0gVW5pdDsNCiAgICAgICAgICAgIH0iZGVjVmFsdWUiOyAgICAgICAgICANCiAgICAgICAgICB9IklWTC1QUSI7ICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgfSJvYnNSYW5nZSI7ICAgICAgICAgICAgICANCiAgICB9InJlZlJhbmdlIjsgIA0KfQ0KDQovL1NlemlvbmUgRGVjb3JzbyBPc3BlZGFsaWVyby0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uRGVjb3Jzb09zcGVkYWxpZXJvKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgICBzcmMudGl0bGUgYXMgdCAtPiB0Z3QudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgICBzcmMuY29kZSAtPiB0Z3QuY29kZTsNCiAgICBzcmMgLT5idW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpLCAgb2JzZXJ2YXRpb24ubm90ZSBhcyBub3RlIHRoZW4gew0KICAgICAgICBzcmMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICBzcmMgd2hlcmUgb2JzZXJ2YXRpb24uc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgICAgIHNyYy0+b2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgc3JjLT5vYnNlcnZhdGlvbi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgIHNyYy0+b2JzZXJ2YXRpb24uZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgc3JjLnRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsgICAgICAgICAgICAgICAgICANCiAgICAgIHNyYy5hdXRob3IgYXMgYXV0aCAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgdGhlbiB7DQogICAgICAgICAgICAgIGF1dGgudGltZSBhcyB0aSAtPm5vdGUudGltZT0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZSh0aSwgdmFsdWUpICJ0aW1lIjsNCiAgICAgICAgICAgICAgYXV0aC5hc3NpZ25lZEF1dGhvciBhcyBhc3NBdXRoIHRoZW57DQogICAgICAgICAgICAgIGFzc0F1dGgtPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgYXNzQXV0aC0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIGFzc0F1dGggLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICBhc3NBdXRoIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0RlY29yc29Pc3BlZGFsaWVyby9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgYXNzQXV0aC5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBub3RlLmF1dGhvciAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgIGFzc0F1dGguaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgYXNzQXV0aC5hc3NpZ25lZFBlcnNvbiBhcyBhc3NQZXJzIHRoZW57DQogICAgICAgICAgICAgICAgICBhc3NQZXJzLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgICAgIH0iYXNzUGVycyI7DQogICAgICAgICAgICB9ImFzc0F1dGgiOw0KICAgICAgICB9IkF1dGgiOw0KICAgIH0iT0Itbm90ZSI7DQp9DQoNCi8vU2V6aW9uZSBFbmNvdW50ZXItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uRW5jb3VudGVyKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jMSA6IEVuY291bnRlcil7DQogICAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogICAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogICAgfSAiY2RhVGV4dCI7DQogICAgc3JjLmVudHJ5IGFzIGVudHJ5MSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdFbmNvdW50ZXInKSBhcyBlbmNvdW50ZXIsICBlbmNvdW50ZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnRW5jb3VudGVyJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgdGhlbiB7DQogICAgICAgIGVudHJ5MSAtPiBlbmNvdW50ZXIucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jMS5pZCkgInJlZmVyIjsNCiAgICAgICAgZW50cnkxIC0+IGVuY291bnRlci5zdWJqZWN0ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlciI7DQogICAgICAgIGVudHJ5MSAtPiBlbmNvdW50ZXIuc3RhdHVzID0gJ2ZpbmlzaGVkJyAic3RhdHVzIjsNCiAgICAgICAgZW50cnkxIC0+IGVuY291bnRlci5jbGFzcyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY2wgdGhlbnsNCiAgICAgICAgICBlbnRyeTEgLT4gY2wuY29kZSA9ICdBTUInICJjb2RlIjsNCiAgICAgICAgICBlbnRyeTEgLT4gY2wuZGlzcGxheSA9ICdhbWJ1bGF0b3J5JyAiY29kZSI7DQogICAgICAgIH0iY2xhc3MiOw0KICAgICAgICBlbnRyeTEuZW5jb3VudGVyIGFzIGVuYyB0aGVuew0KICAgICAgICAgICAgZW5jLmNvZGUgLT4gZW5jb3VudGVyLnR5cGU7ICANCiAgICAgICAgICAgICBlbmMgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpIHRoZW4gew0KICAgICAgICAgICAgICBlbmMuZWZmZWN0aXZlVGltZSBhcyBlZmYgIC0+IGVuY291bnRlci5wZXJpb2Q9Y3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmYscGVyaW9kKTsNCiAgICAgICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgICAgICAgIGVuYyB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKS5ub3QoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgICAgICAgZW5jLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZldGltZTEgLT4gZW5jb3VudGVyLnBlcmlvZCA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW57DQogICAgICAgICAgICAgICAgZWZmZWN0aXZldGltZTEgLT4gcGVyaW9kLnN0YXJ0ID0gIGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBzdGFydCB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZldGltZTEsc3RhcnQpICJ2YWwiOyANCiAgICAgICAgICAgICAgfSJlZmZ0IjsNCiAgICAgICAgICAgICAgfSJ3aGVyZSI7ICAgICAgICANCiAgICAgICAgICAgIGVuYy5wYXJ0aWNpcGFudCBhcyBwYXJ0IHdoZXJlKHR5cGVDb2RlICE9ICdMT0MnKSAtPiBlbmNvdW50ZXIucGFydGljaXBhbnQgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHBhdGFyZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIHBhcnQgLT4gcGF0YXJnLnR5cGUgYXMgdHlwZSB0aGVuIHsgDQogICAgICAgICAgICAgICAgICBwYXJ0IC0+IHR5cGUuY29kaW5nIGFzIGNvZGluZyB0aGVuew0KICAgICAgICAgICAgICAgICAgcGFydC0+IGNvZGluZy5jb2RlID0gKHBhcnQudHlwZUNvZGUpICJjb2RpY2UiOw0KICAgICAgICAgICAgICAgICAgcGFydC0+IGNvZGluZy5zeXN0ZW0gPSAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1QYXJ0aWNpcGF0aW9uVHlwZScgInN5c3RlbSI7DQogICAgICAgICAgICAgICAgfSAiY29kZVR5cGUiOyANCiAgICAgICAgICAgICAgfSJ0eXBlIjsNCiAgICAgICAgICAgICAgcGFydC50aW1lIGFzIHRpbWUxIC0+IHBhdGFyZy5wZXJpb2QgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIHsNCiAgICAgICAgICAgICAgICB0aW1lMSAtPiBwZXJpb2Quc3RhcnQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgc3RhcnQgdGhlbiBUU0RhdGVUaW1lKHRpbWUxLHN0YXJ0KSAidmFsIjsNCiAgICAgICAgICAgICAgIH0idGltZSI7DQogICAgICAgICAgICAgICAgcGFydC50aW1lIGFzIHRpIC0+IHBhdGFyZy5wZXJpb2QgPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QodGkscGVyaW9kKTsgICAgDQogICAgICAgICAgICAgICAgcGFydC5wYXJ0aWNpcGFudFJvbGUgYXMgcGFydFJvbGUgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgdGhlbiB7ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgcGFydFJvbGUtPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgcGFydFJvbGUtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRSb2xlIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0VuY291bnRlci9wYXJ0aWNpcGFudCciY29kZSI7DQogICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgICAgICB9Im1ldGEiOw0KICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBwYXRhcmcuaW5kaXZpZHVhbCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgImF1dCI7DQogICAgICAgICAgICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgICAgcGFydFJvbGUuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLnBsYXlpbmdFbnRpdHkgYXMgcGxheUVudCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIHBsYXlFbnQubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgICAgICAgICAgICAgfSJwbGF5RW50IjsgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIH0icGFydFJvbGUiOw0KICAgICAgICAgICAgfSJwYXJ0aWNpcGFudC1BRE0iOw0KICAgICAgICAgICAgZW5jLnBhcnRpY2lwYW50IGFzIHBhcnQgd2hlcmUodHlwZUNvZGUgPSAnTE9DJykgdGhlbnsNCiAgICAgICAgICAgICAgICBwYXJ0LnRpbWUgYXMgdGltIC0+IGVuY291bnRlci5sb2NhdGlvbiBhcyBsb2NhdCB0aGVuew0KICAgICAgICAgICAgICAgICAgICB0aW0gLT4gbG9jYXQucGVyaW9kID1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKHRpbSxwZXJpb2QpInRpbWUiOyANCiAgICAgICAgICAgICAgICAgICAgcGFydC50aW1lIGFzIHRpbSAgLT4gbG9jYXQucGVyaW9kID0gY3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICB0aW0gLT4gcGVyaW9kLnN0YXJ0ID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHN0YXJ0IHRoZW4gVFNEYXRlVGltZSh0aW0sc3RhcnQpICJ2YWwiOw0KICAgICAgICAgICAgICAgICAgICAgfSJ0aW1lIjsNCiAgICAgICAgICAgICAgICBwYXJ0LnBhcnRpY2lwYW50Um9sZSBhcyBwYXJ0Um9sZSAtPiAgYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdMb2NhdGlvbicpIGFzIGxvY2F0aW9uLCAgbG9jYXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTG9jYXRpb24vJywgdXVpZDEpIHRoZW57ICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIHBhcnQtPiBsb2NhdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgcGFydC0+IG1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgcGFydCAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgICBwYXJ0IC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0VuY291bnRlci9wYXJ0aWNpcGFudCciY29kZSI7DQogICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgICAgICB9Im1ldGEiOyAgICAgIA0KICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZS5pZCBhcyBpZCAtPiBsb2NhdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZSAtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnTG9jYXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgICAgICAgICAgICAgICAgfSJleHQiOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBsb2NhdGlvbi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZCwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Mb2NhdGlvbi8nLCB1dWlkKSwgIGxvY2F0LmxvY2F0aW9uID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTG9jYXRpb24vJyArICVsb2NhdGlvbi5pZCkgImlkYXNpIjsgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgfSJyIiA7DQogICAgICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLmNvZGUgLT4gbG9jYXRpb24udHlwZTsNCiAgICAgICAgICAgICAgICB9InBhcnRSb2xlIjsNCiAgICAgICAgICAgICAgfSJsb2NhdGlvbiI7DQogICAgICAgICAgICB9InBhcnRpY2lwYW50MiI7DQogICAgICAgICAgICBlbmMuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50ciAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgb2JzZXJ2YXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsIGVuY291bnRlci5yZWFzb25SZWZlcmVuY2UgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9ic2VydmF0aW9uLmlkKSB0aGVuIHsNCiAgICAgICAgICAgICAgZW50ci5hY3QgYXMgYWN0IHRoZW57ICAgIA0KICAgICAgICAgICAgICAgIGFjdC5jb2RlIC0+IG9ic2VydmF0aW9uLmNvZGU7DQogICAgICAgICAgICAgICAgYWN0IC0+IG9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgICAgIGFjdCAtPiBvYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jMS5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgICAgYWN0IHdoZXJlIGFjdC5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgYWN0LT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgICAgICAgICBhY3QgLT4gb2JzZXJ2YXRpb24ubm90ZSA9IGNyZWF0ZSgnQW5ub3RhdGlvbicpIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdC50ZXh0IGFzIHRleHQgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LnJlZmVyZW5jZSBhcyByZWZmIC0+IG5vdGUudGV4dCA9IChyZWZmLnZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0idGV4dCI7DQogICAgICAgICAgICAgICAgICAgICAgICBhY3QudGV4dCBhcyB0eCB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHgucmVmZXJlbmNlIGFzIHJlZiAtPiBub3RlLnRleHQgPSAocmVmLnZhbHVlKSAidmFsIjsgDQogICAgICAgICAgICAgICAgICAgICAgICB9IlN0cmluZyI7DQogICAgICAgICAgICAgICAgICAgICAgICBhY3QuYXV0aG9yIGFzIGF1dGggLT4gIGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciwgcHJhY3RpdGlvbmVyLmlkID0gdXVpZCgpIGFzIHV1aWQxLCBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGgudGltZSBhcyB0aSAtPiBub3RlLnRpbWU9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB2YWx1ZSB0aGVuIFRTRGF0ZVRpbWUodGksIHZhbHVlKSAibm90ZXRpbWUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hc3NpZ25lZEF1dGhvciBhcyBhc3NBdXRoIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc0F1dGgtPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzQXV0aC0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc0F1dGggLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NBdXRoIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0VuY291bnRlci9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzQXV0aC5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBub3RlLmF1dGhvciA9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc0F1dGguaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7ICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NBdXRoLnRpbWUgYXMgdCAtPiBub3RlLnRleHQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKHQsIHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzQXV0aC5hc3NpZ25lZFBlcnNvbiBhcyBhc3NQZXJzIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NQZXJzLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0ibmFtZSI7ICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iYXNzQXVzaCI7DQogICAgICAgICAgICAgICAgICAgICAgICB9InByYWN0aXRpb25lciI7ICAgIA0KICAgICAgICAgICAgICAgICAgICB9Im5vdGUiOw0KICAgICAgICAgICAgICAgIH0iYWN0IjsNCiAgICAgICAgICAgIH0iZW50cnlSZWwtU1VCSiI7DQogICAgICAgIH0iZW5jb3VudGVyIjsNCiAgICB9ImVudHJ5IjsNCn0NCg0KLy9TZXppb25lIENvbnN1bGVuemEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25Db25zdWxlbnphKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgICAgIHNyYy50aXRsZSBhcyB0IC0+IHRndC50aXRsZSA9ICh0LmRhdGFTdHJpbmcpOw0KICAgICAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogICAgICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpIHRoZW4gew0KICAgICAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgICAgICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgICAgICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICAgICAgICB9ICJjZGFUZXh0IjsNCiAgICAgIH0iZW50cnktZXhpc3RzIjsNCiAgICAvL1NlemlvbmUgTmFycmF0aXZhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gYnVuZGxlLmVudHJ5IGFzIGU4LCBlOC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTgucmVzb3VyY2UgPSBjcmVhdGUoJ1NlcnZpY2VSZXF1ZXN0JykgYXMgU2VydmljZVJlcXVlc3QsICBTZXJ2aWNlUmVxdWVzdC5pZCA9IHV1aWQoKSBhcyB1dWlkOCwgIGU4LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9TZXJ2aWNlUmVxdWVzdC8nLCB1dWlkOCksIHJlcXVlc3QudXJsID0gJ1NlcnZpY2VSZXF1ZXN0JywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1NlcnZpY2VSZXF1ZXN0LycgKyAlU2VydmljZVJlcXVlc3QuaWQpIHRoZW4gew0KICAgICAgICAgIHNyYyAtPiBTZXJ2aWNlUmVxdWVzdC5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgICBzcmMgLT4gU2VydmljZVJlcXVlc3QuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7IA0KICAgICAgICAgIHNyYyAtPiBTZXJ2aWNlUmVxdWVzdC5zdGF0dXM9J2FjdGl2ZScic3RhdHVzIjsNCiAgICAgICAgICBzcmMgLT4gU2VydmljZVJlcXVlc3QuaW50ZW50PSdvcmRlciciaW50ZW50IjsgICAgDQogICAgICAgICAgICAgICAgY2RhVGV4dCAtPiBTZXJ2aWNlUmVxdWVzdC5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgICBjZGFUZXh0IGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgIH0icmVmZXJlbmNlIjsNCiAgICAgICAgICAgIH0iY2RhVGV4dCI7DQogICAgICAgICAgfSJ3aGVyZSI7DQoNCiAgICAgIC8vU2V6aW9uZSBTdHJ1dHR1cmF0YS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgDQogICAgICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1NlcnZpY2VSZXF1ZXN0JykgYXMgc2VydmljZVJlcXVlc3QsICBzZXJ2aWNlUmVxdWVzdC5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9TZXJ2aWNlUmVxdWVzdC8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ1NlcnZpY2VSZXF1ZXN0JyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1NlcnZpY2VSZXF1ZXN0LycgKyAlc2VydmljZVJlcXVlc3QuaWQpLCBzZXJ2aWNlUmVxdWVzdC5ub3RlIGFzIG5vdGUgdGhlbiB7DQogICAgICAgIGVudHJ5MS0+c2VydmljZVJlcXVlc3Quc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICAgICAgZW50cnkxLT5zZXJ2aWNlUmVxdWVzdC5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgZW50cnkxIC0+IHNlcnZpY2VSZXF1ZXN0LnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgICAgICBlbnRyeTEgLT4gc2VydmljZVJlcXVlc3QuaW50ZW50PSdvcmRlciciaW50ZW50IjsgICAgDQogICAgICAgIGVudHJ5MS5hY3QgYXMgYWN0IHRoZW57DQogICAgICAgIGFjdC5jb2RlIC0+IHNlcnZpY2VSZXF1ZXN0LmNvZGU7DQogICAgICAgICAgYWN0LnRleHQgYXMgdCAtPiBub3RlLnRleHQgPSAodC5kYXRhU3RyaW5nKSAidGV4dCI7IA0KICAgICAgICAgIGFjdC5zdGF0dXNDb2RlIGFzIGNvZGUgLT4gc2VydmljZVJlcXVlc3Quc3RhdHVzID0gKGNvZGUuY29kZSk7DQogICAgICAgICAgYWN0LnBlcmZvcm1lciBhcyBwZXJmIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyLCAgcHJhY3RpdGlvbmVyLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDEpIHRoZW57DQogICAgICAgICAgcGVyZi50aW1lIGFzIHRpbWUgIC0+IHNlcnZpY2VSZXF1ZXN0Lm9jY3VycmVuY2U9Y3JlYXRlKCdkYXRlVGltZScpIGFzIHQgdGhlbiBUU0RhdGVUaW1lKHRpbWUsdCkgInRpbWUiOw0KICAgICAgICAgIHBlcmYuYXNzaWduZWRFbnRpdHkgYXMgYXNzRW50IHRoZW57DQogICAgICAgICAgICAgIGFzc0VudC0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICBhc3NFbnQtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICBhc3NFbnQgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICBhc3NFbnQgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvQ29uc3VsZW56ZS9wZXJmb3JtZXInImNvZGUiOw0KICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgYXNzRW50LmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHNlcnZpY2VSZXF1ZXN0LnBlcmZvcm1lciAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgIGFzc0VudC5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgICAgICAgICAgYXNzRW50LmFzc2lnbmVkUGVyc29uIGFzIGFzc1BlciB0aGVuIHsNCiAgICAgICAgICAgICAgICBhc3NQZXIubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgICAgICAgfSJhc3NQZXIiOw0KICAgICAgICAgICAgfSJhc3NFbnQiOw0KICAgICAgICAgIH0icGVyZm9ybWVyIjsgICAgICAgICAgIA0KICAgICAgICAgIGFjdC5wYXJ0aWNpcGFudCBhcyBwYXJ0aSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciwgIHByYWN0aXRpb25lci5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQxKSB0aGVuew0KICAgICAgICAgICAgcGFydGkudGltZSBhcyB0aW1lICAtPiBzZXJ2aWNlUmVxdWVzdC5hdXRob3JlZE9uPWNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB0IHRoZW4gVFNEYXRlVGltZSh0aW1lLHQpICJ0aW1lIjsNCiAgICAgICAgICBwYXJ0aS5wYXJ0aWNpcGFudFJvbGUgYXMgcGFydFJvbGUgdGhlbiB7DQogICAgICAgICAgICAgICAgcGFydFJvbGUtPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgcGFydFJvbGUtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICBwYXJ0Um9sZSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgIHBhcnRSb2xlIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0NvbnN1bGVuemUvcGFydGljaXBhbnQnImNvZGUiOw0KICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgcGFydFJvbGUuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgc2VydmljZVJlcXVlc3QucmVxdWVzdGVyICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgImF1dCI7DQogICAgICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgICAgICAgcGFydFJvbGUuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgIHBhcnRSb2xlLnBsYXlpbmdFbnRpdHkgYXMgZW50aXR5IHRoZW57DQogICAgICAgICAgICAgICAgZW50aXR5Lm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgICAgIH0iZW50aXR5IjsNCiAgICAgICAgICAgIH0icGFydFJvbGUiOw0KICAgICAgICAgIH0icGFydGljaXBhbnQiOyAgIA0KICAgICAgICB9IkFDVCI7DQogICAgICB9ImVudHJ5IjsNCn0NCg0KLy9TZXppb25lIEFjY2VydGFtZW50aS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvbkFjY2VydGFtZW50aShzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlcil7DQogIHNyYy50aXRsZSBhcyB0IC0+IHRndC50aXRsZSA9ICh0LmRhdGFTdHJpbmcpOw0KICBzcmMuY29kZSAtPiB0Z3QuY29kZTsNCiAgc3JjIHdoZXJlIHNyYy5lbnRyeS5leGlzdHMoKSB0aGVuIHsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgICAgY2RhVGV4dCAtPiBmaGlyVGV4dC5zdGF0dXMgPSAnZ2VuZXJhdGVkJyAibmFycmF0aXZlU3RhdHVzIjsNCiAgICAgIGNkYVRleHQgYXMgdCAtPiBmaGlyVGV4dC5kaXYgPSB0ICJuYXJyYXRpdmVUZXh0IjsNCiAgICB9ICJjZGFUZXh0IjsNCiAgfSJlbnRyeUV4aXN0cyI7DQogIC8vU2V6aW9uZSBTdHJ1dHR1cmF0YS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4geyAgICANCiAgICBlbnRyeTEub3JnYW5pemVyIGFzIG9icyB0aGVueyAgICAgIA0KICAgICAgc3JjLmNvZGUgLT4gb2JzZXJ2YXRpb24uY29kZTsNCiAgICAgICBvYnMgdGhlbiBPYnNlcnZhdGlvbkFjY2VydGFtZW50aShvYnMsIHBhdGllbnQgLGVuYyAsb2JzZXJ2YXRpb24sIGJ1bmRsZSkgImFjdCI7DQogICAgfSJvYnMiOyANCiAgfSJlbnRyeSI7DQogIC8vU2V6aW9uZSBOYXJyYXRpdmEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gYnVuZGxlLmVudHJ5IGFzIGU4LCBlOC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTgucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgT2JzZXJ2YXRpb24sICBPYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkOCwgIGU4LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkOCksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlT2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgc3JjIC0+IE9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgc3JjIC0+IE9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICBzcmMuY29kZSAtPiBPYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICBzcmMtPk9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgY2RhVGV4dCAtPiBPYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgIH0iY2RhVGV4dCI7DQogICAgICB9IndoZXJlIjsNCn0NCg0KZ3JvdXAgT2JzZXJ2YXRpb25BY2NlcnRhbWVudGkgKHNvdXJjZSBvYnMgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgZW5jb3VudGVyIDogRW5jb3VudGVyLCB0YXJnZXQgb2IgOiBPYnNlcnZhdGlvbiwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSkgew0KICBvYnMuY29kZSAtPiBvYi5jb2RlOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYi5zdGF0dXMgPSdmaW5hbCc7DQogIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9iLnN0YXR1cyA9J3JlZ2lzdGVyZWQnOw0KICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gb2Iuc3RhdHVzID0nY2FuY2VsbGVkJzsNCiAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2Iuc3RhdHVzID0ncGFydGlhbCc7DQogIG9icyB3aGVyZSBvYnMuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICBvYnMtPm9iLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgIH0ic3RhdHVzY29kZSI7DQogIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gb2IuZWZmZWN0aXZlID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShlZmZlY3RpdmVUaW1lLCB2YWx1ZSkgInZhbHVlMiI7DQogIG9icyB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkgdGhlbiB7DQogICAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmLT4gb2IuZWZmZWN0aXZlPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCk7DQogICAgfSJ3aGVyZSI7DQogIG9icy52YWx1ZTpDRCBhcyB2YWwgdGhlbnsNCiAgICB2YWwtPm9iLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgIHZhbC5vcmlnaW5hbFRleHQgLT4gY2UudGV4dDsNCiAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgIH0gImNvZGUiOw0KICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgdHJhbnNsYXRpb24uY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgIHZhbHVlLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgfSAidmFsdWUiOw0KICAgICAgICB9InF1YWwiOw0KICAgICAgfSAidHJhbnNsYXRpb24iOw0KICAgIH0iY29kaW5nIjsNCiAgfSJ2YWwiOw0KICBvYnMudmFsdWU6Q0UgYXMgdmFsIHRoZW57DQogICAgdmFsLT5vYi52YWx1ZSA9Y3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBjZSB0aGVuIHsNCiAgICB2YWwub3JpZ2luYWxUZXh0IC0+IGNlLnRleHQ7DQogICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICB9ICJjb2RlIjsNCiAgICB2YWwudHJhbnNsYXRpb24gYXMgdHJhbnNsYXRpb24gLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgdHJhbnNsYXRpb24uZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICBxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgIH0gInZhbHVlIjsNCiAgICAgICAgfSJxdWFsIjsNCiAgICAgIH0gInRyYW5zbGF0aW9uIjsNCiAgICB9ImNvZGluZyI7DQogIH0idmFsIjsNCiAgb2JzLnZhbHVlOlBRIGFzIHZhbCB0aGVuew0KICAgIHZhbC0+b2IudmFsdWUgPSBjcmVhdGUoJ1F1YW50aXR5JykgYXMgcXVhbnRpdHkgdGhlbiB7DQogICAgdmFsLnZhbHVlIGFzIHZhbHVlLT5xdWFudGl0eS52YWx1ZSA9IHZhbHVlOw0KICAgIHZhbC51bml0IGFzIHVuaXQtPiBxdWFudGl0eS51bml0ID0gdW5pdCAidW5pdCI7DQogICAgfSJxdWFudGl0eSI7DQogIH0idmFsdWVRdWFudGl0eSI7DQogIG9icy52YWx1ZTpTVCBhcyB2YWx1ZS0+b2IudmFsdWUgPWNyZWF0ZSgnc3RyaW5nJyksb2IudmFsdWU9ICh2YWx1ZS5kYXRhU3RyaW5nKSAidmFsdWUiOw0KICBvYnMudmFsdWU6SU5UIGFzIGludC0+b2IudmFsdWU9KGludC52YWx1ZSkgInZhbHVlIjsNCiAgb2JzLnZhbHVlOkJMIGFzIGJvb2xlYW4gLT5vYi52YWx1ZT0oYm9vbGVhbi52YWx1ZSkiYm9vbGVhbiI7DQogICAgb2JzLT5vYi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICBvYnMtPm9iLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpICJyZWZlcmVuY2UiOw0KICAgIG9icy5pbnRlcnByZXRhdGlvbkNvZGUgLT4gb2IuaW50ZXJwcmV0YXRpb247DQogICAgb2JzLm1ldGhvZENvZGUgLT4gb2IubWV0aG9kOw0KICAgIG9icy5yZWZlcmVuY2VSYW5nZSBhcyByZWZSYW5nZSAtPiBvYi5yZWZlcmVuY2VSYW5nZSA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVmIHRoZW4gew0KICAgICAgcmVmUmFuZ2Uub2JzZXJ2YXRpb25SYW5nZSBhcyBvYnNSYW5nZSAtPiByZWYubG93ID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIExvdyAgdGhlbiB7DQogICAgICAgICAgb2JzUmFuZ2UudmFsdWU6IElWTF9QUSBhcyB2ICB0aGVuIHsNCiAgICAgICAgICAgIHYubG93IGFzIGwxIHRoZW4gew0KICAgICAgICAgICAgICBsMS52YWx1ZSBhcyBkZWNWYWx1ZS0+IExvdy52YWx1ZSA9IGRlY1ZhbHVlOw0KICAgICAgICAgICAgICBsMS51bml0IGFzIFVuaXQtPiBMb3cudW5pdCA9IFVuaXQ7DQogICAgICAgICAgICB9ImRlY1ZhbHVlIjsgICAgICAgICAgDQogICAgICAgICAgfSJJVkwtUFEiOyAgICAgICAgICAgICAgICAgICAgICANCiAgICAgIH0ib2JzUmFuZ2UiOyAgICAgICAgICAgICAgDQogICAgfSJyZWZSYW5nZSI7ICANCg0KDQogICAgb2JzLnBlcmZvcm1lciBhcyBwZXJmb3JtZXIgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgdGhlbnsNCiAgICAgIHBlcmZvcm1lci5hc3NpZ25lZEVudGl0eSBhcyBhc3NFbnRpdHkgdGhlbiB7DQogICAgICAgIGFzc0VudGl0eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICBhc3NFbnRpdHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICBhc3NFbnRpdHkgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICBhc3NFbnRpdHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvQWNjZXJ0YW1lbnRpL3BlcmZvcm1lciciY29kZSI7DQogICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICB9Im1ldGEiOw0KICAgICAgICBhc3NFbnRpdHkuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgb2IucGVyZm9ybWVyICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgImF1dCI7DQogICAgICAgICAgfSJyIjsNCiAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgYXNzRW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICBhc3NFbnRpdHkuYXNzaWduZWRQZXJzb24gYXMgYXNzaSB0aGVuIHsNCiAgICAgICAgICBhc3NpLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgIH0iYXNzaSI7DQogICAgICB9ImFzc0VudGl0eSI7DQogICAgfSJwZXJmIjsNCg0KICAgIG9icy5wYXJ0aWNpcGFudCBhcyBwYXJ0aWNpcGFudCAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdTZXJ2aWNlUmVxdWVzdCcpIGFzIHNlcnZpY2VSZXF1ZXN0LCAgc2VydmljZVJlcXVlc3QuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvU2VydmljZVJlcXVlc3QvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdTZXJ2aWNlUmVxdWVzdCcgLG9iLmJhc2VkT24gID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvU2VydmljZVJlcXVlc3QvJyArICVzZXJ2aWNlUmVxdWVzdC5pZCkgdGhlbnsNCiAgICAgIHBhcnRpY2lwYW50LnRpbWUgYXMgdCAtPiBzZXJ2aWNlUmVxdWVzdC5hdXRob3JlZE9uID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZSh0LCB2YWx1ZSkgInZhbHVlMiI7DQogICAgICBvYnMtPnNlcnZpY2VSZXF1ZXN0LnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogICAgICBvYnMtPnNlcnZpY2VSZXF1ZXN0LmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgb2JzIC0+IHNlcnZpY2VSZXF1ZXN0LnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgICAgb2JzIC0+IHNlcnZpY2VSZXF1ZXN0LmludGVudD0nb3JkZXInImludGVudCI7DQogICAgICBwYXJ0aWNpcGFudC5wYXJ0aWNpcGFudFJvbGUgYXMgcGFydGljaXBhbnRSb2xlIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyLCAgcHJhY3RpdGlvbmVyLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDEpIHRoZW57DQogICAgICAgIHBhcnRpY2lwYW50Um9sZS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICBwYXJ0aWNpcGFudFJvbGUgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvQWNjZXJ0YW1lbnRpL3BhcnRpY2lwYW50JyJjb2RlIjsNCiAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgIH0ibWV0YSI7DQogICAgICAgIHBhcnRpY2lwYW50Um9sZS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBzZXJ2aWNlUmVxdWVzdC5yZXF1ZXN0ZXIgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSAiYXV0IjsNCiAgICAgICAgICB9InIiOw0KICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICBwYXJ0aWNpcGFudFJvbGUuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgIHBhcnRpY2lwYW50Um9sZS5wbGF5aW5nRW50aXR5IGFzIHBlIHRoZW57DQogICAgICAgICAgcGUubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgfSJwZSI7DQogICAgICB9InBhcnRpY2lwYW50Um9sZSI7DQogICAgfSJwYXJ0aWNpcGFudCI7DQoNCiAgICBvYnMuY29tcG9uZW50IGFzIGNvbXAgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICwgb2IuaGFzTWVtYmVyICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW57DQogICAgICBjb21wLm9ic2VydmF0aW9uIGFzIG9icyB0aGVuIHsgICAgDQogICAgICAgIG9icy5jb2RlIC0+IG9ic2VydmF0aW9uLmNvZGU7ICAgICAgICAgICAgIA0KICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCc7DQogICAgICAgIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J3JlZ2lzdGVyZWQnOw0KICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0nY2FuY2VsbGVkJzsNCiAgICAgICAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0ncGFydGlhbCc7DQogICAgICAgIG9icyB3aGVyZSBvYnMuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgb2JzLT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgICAgfSJzdGF0dXNjb2RlIjsgDQogICAgICAgIG9icy0+b2JzZXJ2YXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgIG9icy0+b2JzZXJ2YXRpb24uZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gb2IuZWZmZWN0aXZlID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShlZmZlY3RpdmVUaW1lLCB2YWx1ZSkgInZhbHVlMiI7DQogICAgICAgIG9icyB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkgdGhlbiB7DQogICAgICAgICAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmLT4gb2IuZWZmZWN0aXZlPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCk7DQogICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgIG9icy52YWx1ZSBhcyB2YWwgLT4gb2JzZXJ2YXRpb24udmFsdWUgPSAodmFsLmRhdGFTdHJpbmcpOw0KICAgICAgfSJvYnMiOw0KICAgIH0ib2JzZXJ2YXRpb24iOw0KfQ0KDQovL1NlemlvbmUgUGFyYW1ldHJpVml0YWxpLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uUGFyYW1ldHJpVml0YWxpKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgICAgICAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogICAgICAgIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICAgICAgICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpIHRoZW4gew0KICAgICAgICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gdGd0LnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgICAgICAgICBjZGFUZXh0IC0+IGZoaXJUZXh0LnN0YXR1cyA9ICdnZW5lcmF0ZWQnICJuYXJyYXRpdmVTdGF0dXMiOw0KICAgICAgICAgICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICAgICAgICAgIH0gImNkYVRleHQiOw0KICAgICAgICB9ImVudHJ5LWV4aXN0cyI7DQoNCiAgICAgIC8vIFNlemlvbmUgTmFycmF0aXZhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBzcmMgd2hlcmUgc3JjLmVudHJ5LmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gYnVuZGxlLmVudHJ5IGFzIGU4LCBlOC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTgucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgT2JzZXJ2YXRpb24sICBPYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkOCwgIGU4LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkOCksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJywgdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlT2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgICAgICAgc3JjIC0+IE9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgc3JjIC0+IE9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICAgICAgICBzcmMuY29kZSAtPiBPYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgICAgICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBzcmMtPk9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJyJzdGF0dXMiOw0KICAgICAgICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgICAgICAgY2RhVGV4dCAtPiBPYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgICAgICAgIH0iY2RhVGV4dCI7DQogICAgICAgICAgICB9IndoZXJlIjsNCiAgICAgIC8vU2V6aW9uZSBTdHJ1dHR1cmF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBzcmMuZW50cnkgYXMgZW50cnkxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgICAgIGVudHJ5MS5vcmdhbml6ZXIgYXMgb3JnIHRoZW57DQogICAgICAgICAgICBvcmcgLT4gb2JzZXJ2YXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICBvcmcgLT4gb2JzZXJ2YXRpb24uZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICAgICAgICAgIG9yZy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2NvbXBsZXRlZCcpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJzsNCiAgICAgICAgICAgIG9yZy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J3JlZ2lzdGVyZWQnOw0KICAgICAgICAgICAgb3JnLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nYWJvcnRlZCcpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J2NhbmNlbGxlZCc7DQogICAgICAgICAgICBvcmcuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdzdXNwZW5kZWQnKSAtPiBvYnNlcnZhdGlvbi5zdGF0dXMgPSdwYXJ0aWFsJzsNCiAgICAgICAgICAgIG9yZyB3aGVyZSBvYnMuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgICAgICAgb3JnLT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgICAgICAgIH0ic3RhdHVzY29kZSI7ICAgICAgIA0KICAgICAgICAgICAgb3JnLmNvZGUgLT4gb2JzZXJ2YXRpb24uY29kZTsNCiAgICAgICAgICAgIG9yZyB3aGVyZSBvcmcuY29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgICAgICAgc3JjLmNvZGUtPm9ic2VydmF0aW9uLmNvZGU7DQogICAgICAgICAgICB9ImNvZGUiOw0KICAgICAgICAgICAgb3JnLmNvbXBvbmVudCBhcyBjb21wb25lbnQgLT4gIGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24xLCAgb2JzZXJ2YXRpb24xLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICxvYnNlcnZhdGlvbi5oYXNNZW1iZXIgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbjEuaWQpIHRoZW4gew0KICAgICAgICAgICAgICBjb21wb25lbnQub2JzZXJ2YXRpb24gYXMgb2JzIHRoZW4gew0KICAgICAgICAgICAgICAgIG9icyAtPiBvYnNlcnZhdGlvbjEuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgICAgb2JzIC0+IG9ic2VydmF0aW9uMS5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgDQogICAgICAgICAgICAgICAgb2JzLmNvZGUgLT4gb2JzZXJ2YXRpb24xLmNvZGU7DQogICAgICAgICAgICAgICAgb2JzLnN0YXR1c0NvZGUgLT4gb2JzZXJ2YXRpb24xLnN0YXR1czsNCiAgICAgICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYnNlcnZhdGlvbjEuc3RhdHVzID0nZmluYWwnOw0KICAgICAgICAgICAgICAgIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9ic2VydmF0aW9uMS5zdGF0dXMgPSdyZWdpc3RlcmVkJzsNCiAgICAgICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gb2JzZXJ2YXRpb24xLnN0YXR1cyA9J2NhbmNlbGxlZCc7DQogICAgICAgICAgICAgICAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2JzZXJ2YXRpb24xLnN0YXR1cyA9J3BhcnRpYWwnOw0KICAgICAgICAgICAgICAgIG9icyB3aGVyZSBvYnMuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uMS5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgICAgICAgICAgICB9InN0YXR1c2NvZGUiOyAgICAgICAgICAgDQogICAgICAgICAgICAgICAgb2JzIC0+IG9ic2VydmF0aW9uMS52YWx1ZSA9IGNyZWF0ZSgnUXVhbnRpdHknKSBhcyBxdWFudCB0aGVuew0KICAgICAgICAgICAgICAgICAgb2JzLnZhbHVlIGFzIHYgLT4gcXVhbnQudmFsdWUgPSAodi52YWx1ZSk7DQogICAgICAgICAgICAgICAgICBvYnMudmFsdWUgYXMgdiAtPiBxdWFudC51bml0ID0gKHYudW5pdCk7DQogICAgICAgICAgICAgICAgfSJxdWFudCI7DQogICAgICAgICAgICAgICAgb2JzLnZhbHVlOkNFIGFzIHZhbCB0aGVuew0KICAgICAgICAgICAgICAgICAgdmFsLT5vYi52YWx1ZSA9Y3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBjZSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgdmFsLm9yaWdpbmFsVGV4dCBhcyBvcmlnaW5hbFRleHQgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFRleHQucmVmZXJlbmNlIGFzIHJlZmVyZW5jZS0+IGNlLnRleHQ9cmVmZXJlbmNlOw0KICAgICAgICAgICAgICAgICAgICB9Im9yaWdpbmx0ZXh0IjsNCiAgICAgICAgICAgICAgICAgICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICB9ImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICB2YWwudHJhbnNsYXRpb24gYXMgdHJhbnNsYXRpb24gLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9InZhbHVlIjsNCiAgICAgICAgICAgICAgICAgICAgICB9InF1YWxpZmllciI7DQogICAgICAgICAgICAgICAgICAgIH0idHJhbnNsYXRpb24iOw0KICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgIH0idmFsIjsNCiAgICAgICAgICAgICAgICBvYnMudmFsdWU6Q0QgYXMgdmFsIHRoZW57DQogICAgICAgICAgICAgICAgICB2YWwtPm9iLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICB2YWwub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGV4dC5yZWZlcmVuY2UgYXMgcmVmZXJlbmNlLT4gY2UudGV4dD1yZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgIH0ib3JpZ2lubHRleHQiOw0KICAgICAgICAgICAgICAgICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgIH0iY29kZSI7DQogICAgICAgICAgICAgICAgICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnF1YWxpZmllciBhcyBxdWFsaWZpZXIgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0icXVhbGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgICAgfSJ0cmFuc2xhdGlvbiI7DQogICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgfSJ2YWwiOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpTVCBhcyB2YWx1ZS0+b2IudmFsdWUgPWNyZWF0ZSgnc3RyaW5nJyksb2IudmFsdWU9ICh2YWx1ZS5kYXRhU3RyaW5nKSAidmFsdWUiOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpJTlQgYXMgaW50LT5vYi52YWx1ZT0oaW50LnZhbHVlKSAidmFsdWUiOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpCTCBhcyBib29sZWFuIC0+b2IudmFsdWU9KGJvb2xlYW4udmFsdWUpImJvb2xlYW4iOw0KICAgICAgICAgICAgICAgIG9icy5pbnRlcnByZXRhdGlvbkNvZGUgLT4gb2JzZXJ2YXRpb24xLmludGVycHJldGF0aW9uOw0KICAgICAgICAgICAgICAgIG9icy5tZXRob2RDb2RlIC0+IG9ic2VydmF0aW9uMS5tZXRob2Q7DQogICAgICAgICAgICAgICAgb2JzLnRhcmdldFNpdGVDb2RlIC0+IG9ic2VydmF0aW9uMS5ib2R5U2l0ZTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBvYnMucGVyZm9ybWVyIGFzIHBlcmZvcm1lciAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciwgIHByYWN0aXRpb25lci5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQxKSB0aGVuew0KICAgICAgICAgICAgICAgICAgICBwZXJmb3JtZXIudGltZSBhcyB0IC0+IG9ic2VydmF0aW9uMS5pc3N1ZWQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgZGF0ZSB0aGVuIFRTRGF0ZVRpbWUodCxkYXRlKTsNCiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWVyLmFzc2lnbmVkRW50aXR5IGFzIGFzc0VudGl0eSB0aGVuew0KICAgICAgICAgICAgICAgICAgICBhc3NFbnRpdHktPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgYXNzRW50aXR5LT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzRW50aXR5IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzRW50aXR5IC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L1BhcmFtZXRyaVZpdGFsaS9wZXJmb3JtZXInImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgICAgICAgYXNzRW50aXR5LmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMiksIG9ic2VydmF0aW9uMS5wZXJmb3JtZXIgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSAiYXV0IjsNCiAgICAgICAgICAgICAgICAgICAgICB9InIiOw0KICAgICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgICAgICAgICAgICBhc3NFbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7ICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBhc3NFbnRpdHkuYXNzaWduZWRQZXJzb24gYXMgYXNzUGVyc29uIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgYXNzUGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgICAgICAgICAgIH0iYXNzUGVyc29uIjsNCiAgICAgICAgICAgICAgICAgIH0iYXNzRW50aXR5IjsNCiAgICAgICAgICAgICAgICB9InBlcmZvcm1lciI7DQogICAgICAgICAgICAgICAgb2JzLnBhcnRpY2lwYW50IGFzIHBhcnRpIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1NlcnZpY2VSZXF1ZXN0JykgYXMgc2VydmljZVJlcXVlc3QsICBzZXJ2aWNlUmVxdWVzdC5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9TZXJ2aWNlUmVxdWVzdC8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ1NlcnZpY2VSZXF1ZXN0JyAsb2JzZXJ2YXRpb24xLmJhc2VkT24gID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvU2VydmljZVJlcXVlc3QvJyArICVzZXJ2aWNlUmVxdWVzdC5pZCkgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHBhcnRpLT5zZXJ2aWNlUmVxdWVzdC5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsgICAgIA0KICAgICAgICAgICAgICAgICAgcGFydGktPnNlcnZpY2VSZXF1ZXN0LmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgICAgICAgcGFydGkgLT4gc2VydmljZVJlcXVlc3Quc3RhdHVzPSdhY3RpdmUnInN0YXR1cyI7DQogICAgICAgICAgICAgICAgICBwYXJ0aSAtPiBzZXJ2aWNlUmVxdWVzdC5pbnRlbnQ9J29yZGVyJyJpbnRlbnQiOyAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgcGFydGkudGltZSBhcyB0IC0+IHNlcnZpY2VSZXF1ZXN0LmF1dGhvcmVkT24gPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKHQsIHZhbHVlKSAidmFsdWUyIjsNCiAgICAgICAgICAgICAgICAgIHBhcnRpLnBhcnRpY2lwYW50Um9sZSBhcyBwYXJ0Um9sZSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciwgIHByYWN0aXRpb25lci5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQxKSB0aGVuew0KICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRSb2xlIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgcGFydFJvbGUgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvUGFyYW1ldHJpVml0YWxpL3BhcnRpY2lwYW50JyJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHNlcnZpY2VSZXF1ZXN0LnJlcXVlc3RlciAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICAgICAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZS5wbGF5aW5nRW50aXR5IGFzIHBsYXlpbmdFbnRpdHkgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICBwbGF5aW5nRW50aXR5Lm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgICAgICAgICAgIH0ibmFtZSI7DQogICAgICAgICAgICAgICAgICB9InBhcnRSb2xlIjsNCiAgICAgICAgICAgICAgICB9InBhcnRpIjsNCiAgICAgICAgICAgICAgfSJvYnMiOw0KICAgICAgICAgICAgfSJjb21wb25lbnQiOw0KICAgICAgICAgIH0ib2JzIjsgDQogICAgICAgIH0iT2JzZXJ2YXRpb24iOw0KfQ0KDQovL1NlemlvbmUgdGVyYXBpYSBGYXJtYSBpbiBQcm9udG8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpncm91cCBDbGluaWNhbERvY3VtZW50U2VjdGlvblRlcmFwaWFGYXJtYWNvSW5Qcm9udG8oc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHNvdXJjZSBzcmMgOiBTZWN0aW9uLCB0YXJnZXQgcGF0aWVudCA6IFBhdGllbnQsIHRhcmdldCB0Z3QsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUsIHRhcmdldCBlbmMgOiBFbmNvdW50ZXIpew0KICAgICAgICBzcmMudGl0bGUgYXMgdCAtPiB0Z3QudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgICAgICAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogICAgICAgIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkgdGhlbiB7DQogICAgICAgICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICAgICAgICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgICAgICAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogICAgICAgICAgfSAiY2RhVGV4dCI7DQogICAgICAgIH0iZW50cnktZXhpc3RzIjsNCiAgICAgIC8vIFNlemlvbmUgTmFycmF0aXZhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTgsIGU4LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlOC5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uJykgYXMgTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uLCAgTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQ4LCAgZTguZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25BZG1pbmlzdHJhdGlvbi8nLCB1dWlkOCksIHJlcXVlc3QudXJsID0gJ01lZGljYXRpb25BZG1pbmlzdHJhdGlvbicsIHRndC5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24vJyArICVNZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24uaWQpIHRoZW4gew0KICAgICAgICAgICAgc3JjIC0+IE1lZGljYXRpb25BZG1pbmlzdHJhdGlvbi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgIHNyYyAtPiBNZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24uY29udGV4dD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICAgIHNyYyAtPk1lZGljYXRpb25BZG1pbmlzdHJhdGlvbi5lZmZlY3RpdmUgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuew0KICAgICAgICAgICAgc3JjLT5wZXJpb2Quc3RhcnQ9KHN0YXJ0Lm5vdygpKSJsb3ciOw0KICAgICAgICAgICAgc3JjLT5wZXJpb2QuZW5kPShlbmQubm93KCkpImhpZ2giOw0KICAgICAgICAgICAgfSJQZXJpb2QiOw0KICAgICAgICAgIHNyYyB3aGVyZSBzdWIuc3RhdHVzQ29kZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgICAgIHNyYy0+TWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uLnN0YXR1cyA9J2NvbXBsZXRlZCcic3RhdHVzIjsNCiAgICAgICAgICAgIH0ic3RhdHVzY29kZSI7DQogICAgICAgICAgICAgICAgICBjZGFUZXh0IC0+IE1lZGljYXRpb25BZG1pbmlzdHJhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgICAgICAgIGNkYVRleHQgLT4gIE1lZGljYXRpb25BZG1pbmlzdHJhdGlvbi5tZWRpY2F0aW9uID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIG1lZGljYXRpb24gdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGNkYVRleHQgYXMgdHh0IC0+IG1lZGljYXRpb24udGV4dD10eHQgInRleHQiOw0KICAgICAgICAgICAgICAgICAgfSJtZWRpY2F0aW9uIjsNCiAgICAgICAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgICAgICAgIH0iY2RhVGV4dCI7DQogICAgICAgICAgICB9IndoZXJlIjsNCiAgICAgIC8vIFNlemlvbmUgU3RydXR0dXJhdGEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIHNyYy5lbnRyeSBhcyBlbnRyeTEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uJykgYXMgbWVkQWRtLCAgbWVkQWRtLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25BZG1pbmlzdHJhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ01lZGljYXRpb25BZG1pbmlzdHJhdGlvbicgLHRndC5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uQWRtaW5pc3RyYXRpb24vJyArICVtZWRBZG0uaWQpLCBtZWRBZG0ubm90ZSBhcyBub3RlIHRoZW4gew0KICAgICAgICAgIGVudHJ5MS0+bWVkQWRtLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgIGVudHJ5MS0+bWVkQWRtLmNvbnRleHQ9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgICAgDQogICAgICAgICAgZW50cnkxLnN1YnN0YW5jZUFkbWluaXN0cmF0aW9uIGFzIHN1YiB0aGVuew0KICAgICAgICAgICAgc3ViLnRleHQgYXMgdHggdGhlbnsgDQogICAgICAgICAgICAgIHR4LnJlZmVyZW5jZSBhcyByZWZmIC0+IG5vdGUudGV4dCA9IChyZWZmLnZhbHVlKTsNCiAgICAgICAgICAgIH0idHh4IjsNCiAgICAgICAgICAgIHN1Yi5zdGF0dXNDb2RlIC0+IG1lZEFkbS5zdGF0dXM7DQogICAgICAgICAgICBzdWIuZWZmZWN0aXZlVGltZSBhcyBlZmYgLT4gbWVkQWRtLmVmZmVjdGl2ZSA9Y3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmYscGVyaW9kKTsgIA0KICAgICAgICAgICAgc3ViLmVmZmVjdGl2ZVRpbWU6IFBJVkxfVFMgYXMgZWZmIC0+IG1lZEFkbS5kb3NhZ2UgYXMgZG9zYWdlIHRoZW57DQogICAgICAgICAgICAgIGVmZiAtPiBkb3NhZ2UucmF0ZSA9IGNyZWF0ZSgnUmF0aW8nKSBhcyByYXRpbyB0aGVuIHsNCiAgICAgICAgICAgICAgICBlZmYgLT4gcmF0aW8ubnVtZXJhdG9yID0gY3JlYXRlKCdRdWFudGl0eScpIGFzIG51bSB0aGVuew0KICAgICAgICAgICAgICAgICAgZWZmLnBlcmlvZCBhcyBwZXIgLT4gbnVtLnZhbHVlID0gKHBlci52YWx1ZSk7DQogICAgICAgICAgICAgICAgICBlZmYucGVyaW9kIGFzIHBlciAtPiBudW0udW5pdCA9IChwZXIudW5pdCk7DQogICAgICAgICAgICAgICAgfSJudW0iOw0KICAgICAgICAgICAgICAgIGVmZiAtPiByYXRpby5kZW5vbWluYXRvciA9IGNyZWF0ZSgnUXVhbnRpdHknKSBhcyBudW0gdGhlbnsNCiAgICAgICAgICAgICAgICAgIGVmZi5wZXJpb2QgYXMgcGVyIC0+IG51bS52YWx1ZSA9ICcxJzsNCiAgICAgICAgICAgICAgICAgIGVmZi5wZXJpb2QgYXMgcGVyIC0+IG51bS51bml0ID0gKHBlci51bml0KTsNCiAgICAgICAgICAgICAgICB9ImRlbiI7DQogICAgICAgICAgICAgIH0icmF0aW8iOw0KICAgICAgICAgICAgfSJlZmYyIjsNCiAgICAgICAgICAgIHN1YiAtPiBtZWRBZG0uZG9zYWdlIGFzIGRvc2FnZSB0aGVuew0KICAgICAgICAgICAgICBzdWIucm91dGVDb2RlIC0+IGRvc2FnZS5yb3V0ZTsNCiAgICAgICAgICAgIH0icm91dGUiOw0KICAgICAgICAgICAgc3ViIC0+IG1lZEFkbS5kb3NhZ2UgYXMgZG9zYWdlIHRoZW57DQogICAgICAgICAgICAgIHN1Yi5hcHByb2FjaFNpdGVDb2RlIC0+IGRvc2FnZS5zaXRlOw0KICAgICAgICAgICAgfSJyb3V0ZSI7DQogICAgICAgICAgICBzdWIgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvblJlcXVlc3QnKSBhcyBtZWRScSwgIG1lZFJxLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25SZXF1ZXN0LycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnTWVkaWNhdGlvblJlcXVlc3QnICxtZWRBZG0ucmVxdWVzdCAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uUmVxdWVzdC8nICsgJW1lZFJxLmlkKSB0aGVuew0KICAgICAgICAgICAgICBzdWIuZW50cnlSZWxhdGlvbnNoaXAgYXMgcmVsIHRoZW57DQogICAgICAgICAgICAgICAgcmVsLnN1cHBseSBhcyBzdXBsIC0+IG1lZFJxLmRpc3BlbnNlUmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgZGlzcCAgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHN1cGwgLT4gZGlzcC5xdWFudGl0eSA9IGNyZWF0ZSgnU2ltcGxlUXVhbnRpdHknKSBhcyBxIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBzdXBsLnF1YW50aXR5IGFzIHF1YSAtPiBxLnZhbHVlID0gKHF1YS52YWx1ZSkgImZkcyI7DQogICAgICAgICAgICAgICAgICB9IlNpbXBsZVF1YW50aXR5IjsNCiAgICAgICAgICAgICAgICB9Im9icyI7DQogICAgICAgICAgICAgIH0icmVsIjsNCiAgICAgICAgICAgICAgc3ViLT4gbWVkUnEuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgIHN1Yi0+IG1lZFJxLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyAgICANCiAgICAgICAgICAgICAgc3ViIC0+IG1lZFJxLnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgICAgICAgICAgICBzdWIgLT4gbWVkUnEuaW50ZW50PSdvcmRlciciaW50ZW50IjsgICAgICAgICAgICANCiAgICAgICAgICAgICAgc3ViIC0+IG1lZFJxLm1lZGljYXRpb24gPSBjcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNvZCB0aGVuew0KICAgICAgICAgICAgICBzdWIgLT4gY29kLnRleHQgPSAnbWVkaWNhdGlvbicgIk1lZGkiOw0KICAgICAgICAgICAgICB9ImNvZGUiOw0KICAgICAgICAgICAgICBzdWIuZG9zZVF1YW50aXR5IGFzIHF1YW50aXR5IHRoZW4gIHsNCiAgICAgICAgICAgICAgICBxdWFudGl0eSAtPiBtZWRScS5kb3NhZ2VJbnN0cnVjdGlvbiA9IGNyZWF0ZSgnRG9zYWdlJykgYXMgZG9zYWdlIHRoZW57DQogICAgICAgICAgICAgICAgICBxdWFudGl0eSAtPiBkb3NhZ2UuZG9zZUFuZFJhdGUgYXMgZG9zUmFuZ2UgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHkgLT4gZG9zUmFuZ2UuZG9zZSA9IGNyZWF0ZSgnUmFuZ2UnKSBhcyByYW5nZSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eSAtPiAgcmFuZ2UubG93ID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIHF1YW50IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eS5sb3cgYXMgbCAtPiBxdWFudC52YWx1ZSA9IChsLnZhbHVlKSAidjEiOw0KICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHkubG93IGFzIGwgLT4gcXVhbnQudW5pdCA9IChsLnVuaXQpICJ2MSI7DQogICAgICAgICAgICAgICAgICAgICAgfSJsb3ciOw0KICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5IC0+ICByYW5nZS5oaWdoID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIHF1YW50IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eS5oaWdoIGFzIGggLT4gcXVhbnQudmFsdWUgPSAoaC52YWx1ZSkgInYxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5LmhpZ2ggYXMgaCAtPiBxdWFudC51bml0ID0gKGgudW5pdCkgInYxIjsNCiAgICAgICAgICAgICAgICAgICAgICB9ImhpZ2giOw0KICAgICAgICAgICAgICAgICAgICB9InJhbmdlIjsNCiAgICAgICAgICAgICAgICAgIH0iZG9zIjsNCiAgICAgICAgICAgICAgICB9ImRvc2FnZSI7DQogICAgICAgICAgICAgIH0iZG9zZS1xdWFudGl0eSI7DQogICAgICAgICAgICAgICAgc3ViLnJhdGVRdWFudGl0eSBhcyByYXRlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgcmF0ZSAtPiBtZWRScS5kb3NhZ2VJbnN0cnVjdGlvbiA9IGNyZWF0ZSgnRG9zYWdlJykgYXMgZG9zYWdlIHRoZW57DQogICAgICAgICAgICAgICAgICAgIHJhdGUgLT4gZG9zYWdlLmRvc2VBbmRSYXRlIGFzIGRvc1JhbmdlIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgcmF0ZSAtPiBkb3NSYW5nZS5kb3NlID0gY3JlYXRlKCdSYW5nZScpIGFzIHJhbmdlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgcmF0ZSAtPiAgcmFuZ2UubG93ID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIHF1YW50IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGUubG93IGFzIGwgLT4gcXVhbnQudmFsdWUgPSAobC52YWx1ZSkgInYxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0ZS5sb3cgYXMgbCAtPiBxdWFudC51bml0ID0gKGwudW5pdCkgInYxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0ibG93IjsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGUgLT4gIHJhbmdlLmhpZ2ggPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgcXVhbnQgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0ZS5oaWdoIGFzIGggLT4gcXVhbnQudmFsdWUgPSAoaC52YWx1ZSkgInYxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0ZS5oaWdoIGFzIGggLT4gcXVhbnQudW5pdCA9IChoLnVuaXQpICJ2MSI7DQogICAgICAgICAgICAgICAgICAgICAgICB9ImhpZ2giOw0KICAgICAgICAgICAgICAgICAgICAgIH0icmFuZ2UiOw0KICAgICAgICAgICAgICAgICAgICB9ImRvcyI7DQogICAgICAgICAgICAgICAgICB9ImRvc2FnZSI7DQogICAgICAgICAgICAgICAgfSJSYXRlLXF1YW50aXR5IjsNCiAgICAgICAgICAgICAgc3ViLnBhcnRpY2lwYW50IGFzIHBhcnQgdGhlbnsNCiAgICAgICAgICAgICAgICBwYXJ0LnRpbWUgYXMgdCAtPiBtZWRScS5hdXRob3JlZE9uID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIGRhdGUgdGhlbiBUU0RhdGVUaW1lKHQsZGF0ZSkgInRpbWUiOyAgDQogICAgICAgICAgICAgICAgcGFydC5wYXJ0aWNpcGFudFJvbGUgYXMgcGFydFJvbGUgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgICBwYXJ0Um9sZSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9UZXJhcGlhRmFybWFjb2xvZ2ljYVBTL3BhcnRpY2lwYW50JyJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsNCiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgbWVkUnEucmVxdWVzdGVyICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgImF1dCI7DQogICAgICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgICAgICAgICAgcGFydFJvbGUuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgICAgICAgICAgICAgIHBhcnRSb2xlLmlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyOw0KICAgICAgICAgICAgICAgICAgcGFydFJvbGUucGxheWluZ0VudGl0eSBhcyBwbGF5IHRoZW57DQogICAgICAgICAgICAgICAgICAgIHBsYXkubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgICAgICAgICAgIH0icGxheSI7DQogICAgICAgICAgICAgICAgfSJQYXJ0IjsNCiAgICAgICAgICAgICAgfSJwYXJ0IjsNCiAgICAgICAgICAgIH0ibWVkaWNhdGlvblJlcXVlc3QiOw0KDQogICAgICAgICAgICBzdWIgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvbicpIGFzIG1lZCwgIG1lZC5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnTWVkaWNhdGlvbicgLG1lZEFkbS5tZWRpY2F0aW9uICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb24vJyArICVtZWQuaWQpIHRoZW57DQogICAgICAgICAgICAgIHN1Yi5hZG1pbmlzdHJhdGlvblVuaXRDb2RlIGFzIGFkZHVuaSB0aGVuIHsNCiAgICAgICAgICAgICAgICBzdWIuYWRtaW5pc3RyYXRpb25Vbml0Q29kZSAtPiBtZWQuZm9ybTsNCiAgICAgICAgICAgICAgICBzdWIuY29uc3VtYWJsZSBhcyBjb25zdW0gdGhlbnsNCiAgICAgICAgICAgICAgICAgIGNvbnN1bS5tYW51ZmFjdHVyZWRQcm9kdWN0IGFzIG1hbnVQcm9kIHRoZW57DQogICAgICAgICAgICAgICAgICAgIG1hbnVQcm9kLm1hbnVmYWN0dXJlZE1hdGVyaWFsIGFzIG1hbnVNdCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIG1hbnVNdC5jb2RlIC0+IG1lZC5jb2RlOw0KICAgICAgICAgICAgICAgICAgICB9Im1hbnVNYXQiOw0KICAgICAgICAgICAgICAgICAgfSJtYW51TWF0IjsNCiAgICAgICAgICAgICAgICB9ImNvbnN1bSI7DQogICAgICAgICAgICAgIH0idW5pY29kZSI7DQogICAgICAgICAgICAgIHN1Yi5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeVIgdGhlbnsNCiAgICAgICAgICAgICAgICBlbnRyeVIub2JzZXJ2YXRpb24gYXMgb2JzZXJ2YXRpb24gdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi5jb2RlIHdoZXJlIGRpc3BsYXlOYW1lPSdHcmFtbWF0dXJhJyAtPiBtZWQuaW5ncmVkaWVudCBhcyBpbmdyZWRpZW50IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBzdWIuY29uc3VtYWJsZSBhcyBjb25zdW1hYmxlIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bWFibGUubWFudWZhY3R1cmVkUHJvZHVjdCBhcyBtYW51ZmFjdHVyZWRQcm9kdWN0IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZWRQcm9kdWN0Lm1hbnVmYWN0dXJlZE1hdGVyaWFsIGFzIG1hbnVmYWN0dXJlZE1hdGVyaWFsIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFudWZhY3R1cmVkTWF0ZXJpYWwuY29kZSBhcyBjb2RlIC0+IGluZ3JlZGllbnQuaXRlbSA9IGNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgdmFsdWUgdGhlbiBDRUNvZGVhYmxlQ29uY2VwdChjb2RlLHZhbHVlKSAiQ0UiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJtYXRlcmlhbCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0icHJvZHVjdCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJjb25zdW1hYmxlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi52YWx1ZSBhcyB2YWx1ZSAtPiBpbmdyZWRpZW50LnN0cmVuZ3RoIGFzIHN0cmVuZ3RoIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IHN0cmVuZ3RoLm51bWVyYXRvciBhcyBudW1lcmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IG51bWVyYXRvci52YWx1ZSA9ICh2YWx1ZS52YWx1ZSkgInZhbHVlTiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gIm51bWVyYXRvciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IHN0cmVuZ3RoLmRlbm9taW5hdG9yIGFzIGRlbm9taW5hdG9yIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBkZW5vbWluYXRvci52YWx1ZSA9IDEgInZhbHVlRCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gImRlbm9taW5hdG9yIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSJzdHJlbmdodCI7DQogICAgICAgICAgICAgICAgICAgICAgICB9ImluZ3JlZGllbnQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24uY29kZSB3aGVyZSBkaXNwbGF5TmFtZT0nUXVhbnRpdMOgIG5lbGxhIENvbmZlemlvbmUnIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24udmFsdWUgYXMgdmFsdWUgLT4gbWVkLmFtb3VudCBhcyBhbW91bnQgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gYW1vdW50Lm51bWVyYXRvciAgYXMgbnVtZXJhdG9yIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBudW1lcmF0b3IudmFsdWUgPSAodmFsdWUudmFsdWUpICJ2YWx1ZU4iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICJudW1lcmF0b3IiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBhbW91bnQuZGVub21pbmF0b3IgYXMgZGVub21pbmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IGRlbm9taW5hdG9yLnZhbHVlID0gMSAidmFsdWVEIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAiZGVub21pbmF0b3IiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iYW1vdW50IjsNCiAgICAgICAgICAgICAgICAgICAgICB9InF1YW50aXRhIjsNCiAgICAgICAgICAgICAgICAgIH0ib2JzIjsNCiAgICAgICAgICAgICAgfSJlbnRyeS1SIjsNCiAgICAgfSJtZWQiOw0KICAgICAgc3ViLnBlcmZvcm1lciBhcyBwZXJmIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyLCAgcHJhY3RpdGlvbmVyLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDEpIHRoZW57DQogICAgICBwZXJmIC0+bWVkQWRtLm5vdGUgYXMgbm90ZSB0aGVuIHsNCiAgICAgICAgcGVyZi0+bm90ZS50ZXh0PSdwZXJmb3JtZXJ0aW1lJyAibm90YWEiOw0KICAgICAgIHBlcmYudGltZSBhcyB0IC0+bm90ZS50aW1lPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKHQsIHZhbHVlKSAibm90ZXRpbWUiOw0KICAgICAgfSJwcmVmdGltZSI7DQogICAgICBwZXJmLmFzc2lnbmVkRW50aXR5IGFzIGVudCB0aGVuew0KICAgICAgICAgIGVudC0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgIGVudC0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgZW50IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICBlbnQgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvVGVyYXBpYUZhcm1hY29sb2dpY2FQUy9wZXJmb3JtZXInImNvZGUiOw0KICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgZW50LmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBtZWRBZG0ucGVyZm9ybWVyIGFzIHAsIHAuYWN0b3IgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgIGVudC5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgZW50LmFzc2lnbmVkUGVyc29uIGFzIGFzc1BlcnNvbiB0aGVuew0KICAgICAgICAgICAgYXNzUGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgfSJhc3NwZXJzb24iOw0KICAgICAgICB9ImVudCI7DQogICAgICB9InBlcmZvcm0iOw0KICAgIH0iTWVkQWRtIjsNCiAgfSJlbnRyeSI7DQp9DQoNCi8vUGlhbm9DdXJhRGltaXNzaW9uZS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25QaWFub0N1cmFEaW1pc3Npb25lKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KIHNyYyBhcyBlbnRyeTEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnQ2FyZVBsYW4nKSBhcyBjYXJlcGxhbiwgIGNhcmVwbGFuLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0NhcmVQbGFuLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnQ2FyZVBsYW4nICx0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvQ2FyZVBsYW4vJyArICVjYXJlcGxhbi5pZCkgdGhlbiB7DQogICAgc3JjLT4gY2FyZXBsYW4uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgc3JjLT4gY2FyZXBsYW4uZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7ICAgIA0KICAgIHNyYyAtPiBjYXJlcGxhbi5zdGF0dXM9J2FjdGl2ZScic3RhdHVzIjsNCiAgICBzcmMgLT4gY2FyZXBsYW4uaW50ZW50PSdvcmRlciciaW50ZW50IjsNCiAgICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IGNhcmVwbGFuLm5vdGUgYXMgY2FyZW5vdGUgdGhlbiB7DQogICAgICBjZGFUZXh0IGFzIHQgLT4gY2FyZW5vdGUudGV4dD10ICJub3RldHh0IjsNCiAgICAgIGVudHJ5MS5hdXRob3IgYXMgYXV0aG9yIHRoZW4gew0KICAgICAgICBhdXRob3IudGltZSBhcyB0LT4gY2FyZW5vdGUudGltZT0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZSh0LCB2YWx1ZSkgIm5vdGV0aW1lIjsNCiAgICAgICAgYXV0aG9yLmFzc2lnbmVkQXV0aG9yIGFzIGFzc2F1dGhvciAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciwgIHByYWN0aXRpb25lci5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQxKSB0aGVuew0KICAgICAgICAgIGFzc2F1dGhvci0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgIGFzc2F1dGhvci0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgYXNzYXV0aG9yIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICBhc3NhdXRob3IgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvUGlhbm9DdXJhRGltaXNzaW9uZS9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgYXNzYXV0aG9yLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBjYXJlbm90ZS5hdXRob3IgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgIGFzc2F1dGhvci5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7ICAgICAgICAgICAgDQogICAgICAgICAgYXNzYXV0aG9yLmFzc2lnbmVkUGVyc29uIGFzIHBlcnMgdGhlbnsNCiAgICAgICAgICAgIHBlcnMubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgICAgIH0ibmFtZXBlcnMiOw0KICAgICAgICAgIH0iYXV0aHByYWN0IjsNCiAgICAgICAgfSJDRmF1dGhvciI7DQogICAgICB9ImF1dGhvciI7DQogICAgICBlbnRyeTEuZW50cnkgYXMgZW50cnkyIHRoZW57IA0KICAgICAgICBlbnRyeTIuYWN0IGFzIGVudHJ5YWN0IC0+YnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnU2VydmljZVJlcXVlc3QnKSBhcyBzZXJ2aWNlcmVxdWVzdCwgIHNlcnZpY2VyZXF1ZXN0LmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1NlcnZpY2VSZXF1ZXN0LycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnU2VydmljZVJlcXVlc3QnICwgY2FyZXBsYW4uYWN0aXZpdHkgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIGFjdGl2LCBhY3Rpdi5yZWZlcmVuY2UgPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvU2VydmljZVJlcXVlc3QvJyArICVzZXJ2aWNlcmVxdWVzdC5pZCkgdGhlbnsNCiAgICAgICAgICBlbnRyeWFjdC0+c2VydmljZXJlcXVlc3Quc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICAgICAgICBlbnRyeWFjdC0+c2VydmljZXJlcXVlc3QuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgZW50cnlhY3QgLT4gc2VydmljZXJlcXVlc3Quc3RhdHVzPSdhY3RpdmUnInN0YXR1cyI7DQogICAgICAgICAgZW50cnlhY3QgLT4gc2VydmljZXJlcXVlc3QuaW50ZW50PSdvcmRlciciaW50ZW50IjsgICAgICAgICAgDQogICAgICAgICAgZW50cnlhY3QtPiBzZXJ2aWNlcmVxdWVzdC5pZGVudGlmaWVyID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyBpZGVudGlmIHRoZW4gew0KICAgICAgICAgICAgZW50cnlhY3QucmVmZXJlbmNlIGFzIGFjdHJlZiB0aGVuIHsNCiAgICAgICAgICAgICAgYWN0cmVmLmV4dGVybmFsQWN0IGFzIGV4dGFjdCB0aGVuew0KICAgICAgICAgICAgICAgIGV4dGFjdC0+c2VydmljZXJlcXVlc3QuaWRlbnRpZmllciA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgaWRlbnRpZjMgdGhlbnsNCiAgICAgICAgICAgICAgICAgIGV4dGFjdC5pZCBhcyBpZCAgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWYzLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWYzLnZhbHVlID0gZXh0IHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiBpZGVudGlmMy5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgICAgICB9ImV4dCI7DQogICAgICAgICAgICAgICAgIH0iaWRuZXRuIjsNCiAgICAgICAgICAgICAgfSJleHRhY3QiOw0KICAgICAgICAgICAgfSJhY3RyZWYiOw0KICAgICAgICAgIH0iamFyaWxlbWVzIjsNCiAgICAgICAgICBlbnRyeWFjdC5jb2RlLT5zZXJ2aWNlcmVxdWVzdC5jb2RlOw0KICAgICAgICAgIGVudHJ5YWN0LnN0YXR1c0NvZGUtPnNlcnZpY2VyZXF1ZXN0LnN0YXR1czsNCiAgICAgICAgICBlbnRyeWFjdC5hdXRob3IgYXMgYWN0YXV0aG9yIHRoZW4gew0KICAgICAgICAgICAgYWN0YXV0aG9yLnRpbWUgYXMgdC0+c2VydmljZXJlcXVlc3QuYXV0aG9yZWRPbj1jcmVhdGUoJ2RhdGVUaW1lJykgYXMgZGF0ZSB0aGVuIFRTRGF0ZVRpbWUodCxkYXRlKTsNCiAgICAgICAgICAgIGFjdGF1dGhvci5hc3NpZ25lZEF1dGhvciBhcyBhc3NhdXRob3IgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgdGhlbnsNCiAgICAgICAgICAgICAgYXNzYXV0aG9yLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgICAgICAgIGFzc2F1dGhvci0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIGFzc2F1dGhvciAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgIGFzc2F1dGhvciAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9QaWFub0N1cmFEaW1pc3Npb25lL2F1dGhvciciY29kZSI7DQogICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICB9Im1ldGEiOw0KICAgICAgICAgICAgICBhc3NhdXRob3IuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgc2VydmljZXJlcXVlc3QucmVxdWVzdGVyID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSAiYXV0IjsNCiAgICAgICAgICAgICAgICB9InIiOw0KICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgICAgICBhc3NhdXRob3IuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgIGFzc2F1dGhvci5hc3NpZ25lZFBlcnNvbiBhcyBwZXJzIHRoZW57DQogICAgICAgICAgICAgICAgcGVycy5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgICAgIH0ibmFtZXBlcnMiOw0KICAgICAgICAgICAgfSJhdXRob3IiOw0KICAgICAgICAgIH0ic2VydlJlcSI7DQogICAgICAgIH0iZW50cnkyIjsNCiAgICAgIH0iY2Fybm90ZSI7DQogICAgfSJlbnRyeTEiOw0KICB9ImVudHJ5aWRlbnQzIjsNCn0NCg0KLy8tLS0tLS0tRGltaXNzaW9uZS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFNlY3Rpb25EaW1pc3Npb25lKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICB9ICJjZGFUZXh0IjsNCiAgc3JjLmVudHJ5IGFzIGVudHJ5MSAgdGhlbiB7DQogICAgZW50cnkxLmFjdCBhcyBhY3QgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnRW5jb3VudGVyJykgYXMgZW5jb3VudGVydCwgIGVuY291bnRlcnQuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnRW5jb3VudGVyJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlcnQuaWQpIHRoZW57DQogICAgICBhY3QgLT4gZW5jb3VudGVydC5zdGF0dXMgPSAnZmluaXNoZWQnICJzdGF0dXMiOw0KICAgICAgYWN0IC0+IGVuY291bnRlcnQuY2xhc3MgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNsIHRoZW57DQogICAgICAgIGFjdCAtPiBjbC5jb2RlID0gJ0FNQicgImNvZGUiOw0KICAgICAgICBhY3QgLT4gY2wuZGlzcGxheSA9ICdhbWJ1bGF0b3J5JyAiY29kZSI7DQogICAgICB9ImNsYXNzIjsNCiAgICAgIGFjdCAtPiBlbmNvdW50ZXJ0LnBhcnRPZiAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArIGVuYy5pZCkicmVmZW5jIjsNCiAgICAgIGFjdCAtPiBlbmNvdW50ZXJ0LnN1YmplY3QgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgcGF0aWVudC5pZCkicmVmcGF0aWVudCI7IA0KICAgICAgYWN0LmNvZGUgLT4gZW5jb3VudGVydC50eXBlOw0KICAgICAgYWN0IHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKSB0aGVuIHsNCiAgICAgICAgYWN0LmVmZmVjdGl2ZVRpbWUgYXMgZWZmICAtPiBlbmNvdW50ZXJ0LnBlcmlvZD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXJpb2QpOw0KICAgICAgICB9IndoZXJlIjsNCiAgICAgICAgYWN0IHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpLm5vdCgpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKS5ub3QoKSB0aGVuIHsNCiAgICAgICAgYWN0LmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZldGltZTEgLT4gZW5jb3VudGVydC5wZXJpb2QgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuew0KICAgICAgICAgIGVmZmVjdGl2ZXRpbWUxIC0+IHBlcmlvZC5zdGFydCA9ICBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgc3RhcnQgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZXRpbWUxLHN0YXJ0KSAidmFsIjsgDQogICAgICAgIH0iZWZmdCI7DQogICAgICAgIH0id2hlcmUiOw0KICAgICAgYWN0LnBlcmZvcm1lciBhcyBwZXJmb3JtZXIgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgdGhlbnsNCiAgICAgICBwZXJmb3JtZXIuYXNzaWduZWRFbnRpdHkgYXMgYXNzRW50eSB0aGVuew0KICAgICAgICBhc3NFbnR5LT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgIGFzc0VudHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICBhc3NFbnR5IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgYXNzRW50eSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9EaW1pc3Npb25lL3BlcmZvcm1lciciY29kZSI7DQogICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICB9Im1ldGEiOw0KICAgICAgICBhc3NFbnR5LmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMiksIGVuY291bnRlcnQucGFydGljaXBhbnQgYXMgcGVyZiB0aGVuIHsgIA0KICAgICAgICAgICAgcGVyZm9ybWVyLT5wZXJmLnBlcmlvZD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIHsNCiAgICAgICAgICAgICAgcGVyZm9ybWVyLnRpbWUgYXMgdGltZSAtPnBlcmlvZC5zdGFydD0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHN0YXJ0IHRoZW4gVFNEYXRlVGltZSh0aW1lLHN0YXJ0KTsNCiAgICAgICAgICAgIH0icGVyaW9kIjsNCiAgICAgICAgICAgIHBlcmZvcm1lciAtPnBlcmYuaW5kaXZpZHVhbCAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgIH0icGVyZiI7DQogICAgICAgICAgfSJyIjsNCiAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgYXNzRW50eS5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgIA0KICAgICAgICBhc3NFbnR5LmFzc2lnbmVkUGVyc29uIGFzIGFzc1BlcnMgdGhlbnsNCiAgICAgICAgICAgYXNzUGVycy5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgfSJhc3NQZXIiOw0KICAgICAgIH0iYXNzIjsNCiAgICAgIH0iZXJmb3JtZXIiOw0KICAgICAgLy9FbmNvdW50ZXIgUG9zdCBkaW1pc3Npb25lLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICBhY3QuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cmlSZWwgdGhlbiB7DQogICAgICAgIGVudHJpUmVsLmVuY291bnRlciBhcyBlbmMxIHRoZW57DQogICAgICAgICAgZW5jMSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdFbmNvdW50ZXInKSBhcyBlbmNvdW50ZXJ0MSwgIGVuY291bnRlcnQxLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ0VuY291bnRlcicgLCB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVydDEuaWQpLCBlbmNvdW50ZXJ0MS5wYXJ0T2YgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyBlbmNvdW50ZXJ0LmlkKSAgdGhlbiB7DQogICAgICAgICAgICBlbmMxIC0+IGVuY291bnRlcnQxLnN0YXR1cyA9ICdmaW5pc2hlZCcgInN0YXR1cyI7DQogICAgICAgICAgICBlbmMxIC0+IGVuY291bnRlcnQxLmNsYXNzID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjbCB0aGVuew0KICAgICAgICAgICAgICBlbmMxIC0+IGNsLmNvZGUgPSAnQU1CJyAiY29kZSI7DQogICAgICAgICAgICAgIGVuYzEgLT4gY2wuZGlzcGxheSA9ICdhbWJ1bGF0b3J5JyAiY29kZSI7DQogICAgICAgICAgICB9ImNsYXNzIjsgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgZW5jMSAtPiBlbmNvdW50ZXJ0MS5zdWJqZWN0ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArIHBhdGllbnQuaWQpInJlZnBhdGllbnQiOw0KICAgICAgICAgICAgZW5jMS5pZCAtPiBlbmNvdW50ZXJ0MS5pZGVudGlmaWVyOw0KICAgICAgICAgICAgZW5jMSAtPiBlbmNvdW50ZXJ0MS50eXBlID0gY3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyB0aSB0aGVuew0KICAgICAgICAgICAgICBlbmMxIC0+IHRpLmNvZGluZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kIHRoZW57DQogICAgICAgICAgICAgICAgZW5jMS5jb2RlIGFzIGMgLT4gY29kLmNvZGUgPSAoYy5jb2RlKSAiY29kZSI7DQogICAgICAgICAgICAgICAgZW5jMS5jb2RlIGFzIGMgdGhlbnsNCiAgICAgICAgICAgICAgICAgIGMuY29kZVN5c3RlbSBhcyBzIC0+IGNvZC5zeXN0ZW0gPSB0cmFuc2xhdGUocywgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInN5c3RlbSI7DQogICAgICAgICAgICAgICAgfSJzeXN0IjsNCiAgICAgICAgICAgICAgICBlbmMxLmNvZGUgYXMgYyAtPiBjb2QuZGlzcGxheSA9IChjLmRpc3BsYXlOYW1lKSAiZGlzcGFseSI7DQogICAgICAgICAgICAgIH0iY29kaW5nIjsgDQogICAgICAgICAgICAgIGVuYzEudGV4dCBhcyB0eCB0aGVuew0KICAgICAgICAgICAgICAgIHR4LnJlZmVyZW5jZSBhcyByZWYgLT4gdGkudGV4dCA9IChyZWYudmFsdWUpICJ2YWwiOyANCiAgICAgICAgICAgICAgfSJ0ZXh0IjsgICAgICAgICAgICAgIA0KICAgICAgICAgICAgfSJjb2RlIjsNCiAgICAgICAgICAgIGVuYzEgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpIHRoZW4gew0KICAgICAgICAgICAgICBlbmMxLmVmZmVjdGl2ZVRpbWUgYXMgZWZmICAtPiBlbmNvdW50ZXJ0MS5wZXJpb2Q9Y3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmYscGVyaW9kKTsNCiAgICAgICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgICAgICAgIGVuYzEgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkubm90KCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICAgIGVuYzEuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmV0aW1lMSAtPiBlbmNvdW50ZXJ0MS5wZXJpb2QgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuew0KICAgICAgICAgICAgICAgIGVmZmVjdGl2ZXRpbWUxIC0+IHBlcmlvZC5zdGFydCA9ICBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgc3RhcnQgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZXRpbWUxLHN0YXJ0KSAidmFsIjsgDQogICAgICAgICAgICAgIH0iZWZmdCI7DQogICAgICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgICAgICBlbmMxLnBhcnRpY2lwYW50IGFzIHBhcnQgd2hlcmUodHlwZUNvZGUgPSAnTE9DJykgIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTG9jYXRpb24nKSBhcyBsb2NhdGlvbiwgIGxvY2F0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0xvY2F0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ0xvY2F0aW9uLycsIHV1aWQxKSB0aGVuIHsNCiAgICAgICAgICAgICAgcGFydC0+IGxvY2F0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICBwYXJ0LT4gbWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICBwYXJ0IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgIHBhcnQgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvRGltaXNzaW9uZS9wYXJ0aWNpcGFudCciY29kZSI7DQogICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICB9Im1ldGEiOyAgICAgICANCiAgICAgICAgICAgICAgcGFydC50aW1lIGFzIHRpbSAtPiBlbmNvdW50ZXJ0MS5sb2NhdGlvbiBhcyBsb2NhdCB0aGVuew0KICAgICAgICAgICAgICAgICAgdGltIC0+IGxvY2F0LnBlcmlvZCAgPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QodGltLHBlcmlvZCkidGltZSI7DQogICAgICAgICAgICAgICAgICBwYXJ0LnRpbWUgYXMgdGltICAtPiBsb2NhdC5wZXJpb2QgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuew0KICAgICAgICAgICAgICAgICAgICB0aW0gLT4gcGVyaW9kLnN0YXJ0ID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHN0YXJ0IHRoZW4gVFNEYXRlVGltZSh0aW0sc3RhcnQpICJ2YWwiOw0KICAgICAgICAgICAgICAgICAgIH0idGltZSI7DQogICAgICAgICAgICAgIHBhcnQucGFydGljaXBhbnRSb2xlIGFzIHBhcnRSb2xlIHRoZW57DQogICAgICAgICAgICAgICAgcGFydFJvbGUuaWQgYXMgaWQgLT4gbG9jYXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgcGFydFJvbGUgLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ0xvY2F0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgfSJleHQiOw0KICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBsb2NhdGlvbi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZCwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Mb2NhdGlvbi8nLCB1dWlkKSwgbG9jYXQubG9jYXRpb24gID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTG9jYXRpb24vJyArICVsb2NhdGlvbi5pZCkgImlkYXNpIjsgICAgICAgDQogICAgICAgICAgICAgICAgICB9InIiIDsNCiAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOyAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcGFydFJvbGUuY29kZSAtPiBsb2NhdGlvbi50eXBlOw0KICAgICAgICAgICAgICB9InBhcnRSb2xlIjsNCiAgICAgICAgICAgIH0ibG9jYXRpb24xIjsNCiAgICAgICAgICB9IkxvY2F0aW9uIjsNCiAgICAgICAgICAgIGVuYzEuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlyZWwyIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsIGVuY291bnRlcnQxLnJlYXNvblJlZmVyZW5jZSAgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlZmVyZW5jZSAsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgdGhlbnsNCiAgICAgICAgICAgICAgZW50cnlyZWwyLm9ic2VydmF0aW9uIGFzIG9icyB0aGVuew0KICAgICAgICAgICAgICAgIG9icy0+b2JzZXJ2YXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICAgICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXJ0MS5pZCkgInJlZmVyZW5jZSI7IA0KICAgICAgICAgICAgICAgIG9icy5jb2RlIC0+IG9ic2VydmF0aW9uLmNvZGU7DQogICAgICAgICAgICAgICAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nY29tcGxldGVkJykgLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnOw0KICAgICAgICAgICAgICAgIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2FjdGl2ZScpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J3JlZ2lzdGVyZWQnOw0KICAgICAgICAgICAgICAgIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2Fib3J0ZWQnKSAtPiBvYnNlcnZhdGlvbi5zdGF0dXMgPSdjYW5jZWxsZWQnOw0KICAgICAgICAgICAgICAgIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J3N1c3BlbmRlZCcpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J3BhcnRpYWwnOw0KICAgICAgICAgICAgICAgIG9icyAgLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0gJ2ZpbmFsJyAibm90cHJlc2VudCI7DQogICAgICAgICAgICAgICAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZlVGltZSAtPiBvYnNlcnZhdGlvbi5lZmZlY3RpdmUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsIHZhbHVlKSAidmFsdWUyIjsNCiAgICAgICAgICAgICAgICBvYnMgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmLT4gb2JzZXJ2YXRpb24uZWZmZWN0aXZlPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCk7DQogICAgICAgICAgICAgICAgICB9IndoZXJlIjsNCiAgICAgICAgICAgICAgICBvYnMudmFsdWU6SU5UIGFzIGludC0+b2JzZXJ2YXRpb24udmFsdWU9KGludC52YWx1ZSkgInZhbHVlIjsNCiAgICAgICAgICAgICAgICBvYnMudmFsdWU6QkwgYXMgYm9vbGVhbiAtPm9ic2VydmF0aW9uLnZhbHVlPShib29sZWFuLnZhbHVlKSJib29sZWFuIjsNCiAgICAgICAgICAgICAgICBvYnMudmFsdWU6Q0UgYXMgdmFsIHRoZW57DQogICAgICAgICAgICAgICAgICB2YWwtPm9ic2VydmF0aW9uLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICB2YWwub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGV4dC5yZWZlcmVuY2UgYXMgcmVmZXJlbmNlLT4gY2UudGV4dD1yZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgIH0ib3JpZ2lubHRleHQiOw0KICAgICAgICAgICAgICAgICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgIH0iY29kZSI7DQogICAgICAgICAgICAgICAgICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnF1YWxpZmllciBhcyBxdWFsaWZpZXIgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0icXVhbGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgICAgfSJ0cmFuc2xhdGlvbiI7DQogICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgfSJ2YWwiOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpDRCBhcyB2YWwgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHZhbC0+b2JzZXJ2YXRpb24udmFsdWUgPWNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgY2UgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIHZhbC5vcmlnaW5hbFRleHQgYXMgb3JpZ2luYWxUZXh0IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxUZXh0LnJlZmVyZW5jZSBhcyByZWZlcmVuY2UtPiBjZS50ZXh0PXJlZmVyZW5jZTsNCiAgICAgICAgICAgICAgICAgICAgfSJvcmlnaW5sdGV4dCI7DQogICAgICAgICAgICAgICAgICAgIHZhbCAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgfSJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgdmFsLnRyYW5zbGF0aW9uIGFzIHRyYW5zbGF0aW9uIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24ucXVhbGlmaWVyIGFzIHF1YWxpZmllciB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGlmaWVyLnZhbHVlIGFzIHZhbHVlIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSJ2YWx1ZSI7DQogICAgICAgICAgICAgICAgICAgICAgfSJxdWFsaWZpZXIiOw0KICAgICAgICAgICAgICAgICAgICB9InRyYW5zbGF0aW9uIjsNCiAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICB9InZhbCI7DQogICAgICAgICAgICAgICAgb2JzLnZhbHVlOlBRIGFzIHZhbCB0aGVuew0KICAgICAgICAgICAgICAgICAgdmFsLT5vYnNlcnZhdGlvbi52YWx1ZSA9IGNyZWF0ZSgnUXVhbnRpdHknKSBhcyBxdWFudGl0eSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgdmFsLnZhbHVlIGFzIHZhbHVlLT5xdWFudGl0eS52YWx1ZSA9IHZhbHVlOw0KICAgICAgICAgICAgICAgICAgICB2YWwudW5pdCBhcyB1bml0LT4gcXVhbnRpdHkudW5pdCA9IHVuaXQgInVuaXQiOw0KICAgICAgICAgICAgICAgICAgfSJxdWFudGl0eSI7DQogICAgICAgICAgICAgICAgfSJ2YWx1ZVF1YW50aXR5IjsNCiAgICAgICAgICAgICAgICBvYnMudmFsdWU6U1QgYXMgdmFsdWUtPm9ic2VydmF0aW9uLnZhbHVlID1jcmVhdGUoJ3N0cmluZycpLG9ic2VydmF0aW9uLnZhbHVlPSAodmFsdWUuZGF0YVN0cmluZykgInZhbHVlIjsNCiAgICAgICAgICAgICAgfSJvYnMiOw0KICAgICAgICAgICAgfSJlbnRyeXJlbDIiOw0KICAgICAgICAgIH0iZW5jMSI7DQogICAgICAgIH0iZW5jIjsNCiAgICAgIH0iZW50cmlSZWwiOw0KICAgICAgLy9UcmFzZmVyaW1lbnRvIHBvc3QgZGltaXNzaW9uZS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgIGFjdC5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyaVJlbDIgdGhlbiB7DQogICAgICAgIGVudHJpUmVsMi5hY3QgYXMgYSB0aGVuew0KICAgICAgICAgICBhIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ0VuY291bnRlcicpIGFzIGVuY291bnRlcnQyLCAgZW5jb3VudGVydDIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnRW5jb3VudGVyJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgZW5jb3VudGVydDIuaWQpLGVuY291bnRlcnQyLnBhcnRPZiAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArIGVuY291bnRlcnQuaWQpICB0aGVuIHsNCiAgICAgICAgICAgIGEgLT4gZW5jb3VudGVydDIuc3RhdHVzID0gJ2ZpbmlzaGVkJyAic3RhdHVzIjsNCiAgICAgICAgICAgIGEgLT4gZW5jb3VudGVydDIuY2xhc3MgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNsIHRoZW57DQogICAgICAgICAgICAgIGEgLT4gY2wuY29kZSA9ICdBTUInICJjb2RlIjsNCiAgICAgICAgICAgICAgYSAtPiBjbC5kaXNwbGF5ID0gJ2FtYnVsYXRvcnknICJjb2RlIjsNCiAgICAgICAgICAgIH0iY2xhc3MiOw0KICAgICAgICAgICAgYSAtPiBlbmNvdW50ZXJ0Mi5zdWJqZWN0ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArIHBhdGllbnQuaWQpInJlZnBhdGllbnQiOw0KICAgICAgICAgICAgYSB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkgdGhlbiB7DQogICAgICAgICAgICAgIGEuZWZmZWN0aXZlVGltZSBhcyBlZmYgIC0+IGVuY291bnRlcnQyLnBlcmlvZD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXJpb2QpOw0KICAgICAgICAgICAgICB9IndoZXJlIjsNCiAgICAgICAgICAgICAgYSB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKS5ub3QoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgICAgICAgYS5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZXRpbWUxIC0+IGVuY291bnRlcnQyLnBlcmlvZCA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW57DQogICAgICAgICAgICAgICAgZWZmZWN0aXZldGltZTEgLT4gcGVyaW9kLnN0YXJ0ID0gIGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBzdGFydCB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZldGltZTEsc3RhcnQpICJ2YWwiOyANCiAgICAgICAgICAgICAgfSJlZmZ0IjsNCiAgICAgICAgICAgICAgfSJ3aGVyZSI7ICAgICAgICANCiAgICAgICAgICAgIGEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdMb2NhdGlvbicpIGFzIGxvY2F0aW9uLCAgbG9jYXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTG9jYXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnTG9jYXRpb24vJywgdXVpZDEpIHRoZW57DQogICAgICAgICAgICAgIGEudGV4dCBhcyB0eCB0aGVuIHsNCiAgICAgICAgICAgICAgICB0eC5yZWZlcmVuY2UgYXMgcmVmIC0+IGxvY2F0aW9uLmRlc2NyaXB0aW9uID0gKHJlZi52YWx1ZSkgImRmcyI7DQogICAgICAgICAgICAgIH0idGV4dCI7DQogICAgICAgICAgICAgIGEucGFydGljaXBhbnQgYXMgcGFydCAgIHRoZW4geyAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcGFydC0+IGxvY2F0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIHBhcnQtPiBtZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgcGFydCAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgIHBhcnQgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvRGltaXNzaW9uZS9hY3QnImNvZGUiOw0KICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgIH0ibWV0YSI7ICAgICAgDQogICAgICAgICAgICAgICAgcGFydC50aW1lIGFzIHRpbSAtPiBlbmNvdW50ZXJ0Mi5sb2NhdGlvbiBhcyBsb2NhdCB0aGVuew0KICAgICAgICAgICAgICAgICAgICB0aW0gLT4gbG9jYXQucGVyaW9kID0gY3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZCh0aW0scGVyaW9kKSJ0aW1lIjsNCiAgICAgICAgICAgICAgICAgICAgcGFydC50aW1lIGFzIHRpbSAgLT4gbG9jYXQucGVyaW9kID0gY3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICB0aW0gLT4gcGVyaW9kLnN0YXJ0ID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHN0YXJ0IHRoZW4gVFNEYXRlVGltZSh0aW0sc3RhcnQpICJ2YWwiOw0KICAgICAgICAgICAgICAgICAgICAgfSJ0aW1lIjsNCiAgICAgICAgICAgICAgICBwYXJ0LnBhcnRpY2lwYW50Um9sZSBhcyBwYXJ0Um9sZSB0aGVuew0KICAgICAgICAgICAgICAgICAgcGFydFJvbGUuaWQgYXMgaWQgLT4gbG9jYXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgcGFydFJvbGUgLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ0xvY2F0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgICB9ImV4dCI7DQogICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IGxvY2F0aW9uLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0xvY2F0aW9uLycsIHV1aWQpLCAgbG9jYXQubG9jYXRpb24gID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTG9jYXRpb24vJyArICVsb2NhdGlvbi5pZCkgImlkYXNpIjsgICAgICAgDQogICAgICAgICAgICAgICAgICAgIH0iciIgOw0KICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsgIA0KICAgICAgICAgICAgICAgICAgcGFydFJvbGUuY29kZSAtPiBsb2NhdGlvbi50eXBlOw0KICAgICAgICAgICAgICAgIH0icGFydFJvbGUiOw0KICAgICAgICAgICAgICAgfSJsb2MyIjsNCiAgICAgICAgICAgICAgfSJMb2NhdGlvbiI7DQogICAgICAgICAgICB9ImxvYyI7DQogICAgICAgICAgICBhLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5cmVsMiAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdPYnNlcnZhdGlvbicpIGFzIG9ic2VydmF0aW9uLCAgb2JzZXJ2YXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdPYnNlcnZhdGlvbicgLCBlbmNvdW50ZXJ0Mi5yZWFzb25SZWZlcmVuY2UgID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZWZlcmVuY2UgLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW57DQogICAgICAgICAgICAgIGVudHJ5cmVsMi5vYnNlcnZhdGlvbiBhcyBvYnMgdGhlbnsNCiAgICAgICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogICAgICAgICAgICAgICAgb2JzLT5vYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVydDIuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICAgICAgICBvYnMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgICAgICAgIG9icy5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J2NvbXBsZXRlZCcpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J2ZpbmFsJzsNCiAgICAgICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhY3RpdmUnKSAtPiBvYnNlcnZhdGlvbi5zdGF0dXMgPSdyZWdpc3RlcmVkJzsNCiAgICAgICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhYm9ydGVkJykgLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0nY2FuY2VsbGVkJzsNCiAgICAgICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdzdXNwZW5kZWQnKSAtPiBvYnNlcnZhdGlvbi5zdGF0dXMgPSdwYXJ0aWFsJzsNCiAgICAgICAgICAgICAgICBvYnMgIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9ICdmaW5hbCcgIm5vdHByZXNlbnQiOw0KICAgICAgICAgICAgICAgIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gb2JzZXJ2YXRpb24uZWZmZWN0aXZlID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShlZmZlY3RpdmVUaW1lLCB2YWx1ZSkgInZhbHVlMiI7DQogICAgICAgICAgICAgICAgb2JzIHdoZXJlIGVmZmVjdGl2ZVRpbWUubG93LmV4aXN0cygpIG9yIGVmZmVjdGl2ZVRpbWUuaGlnaC5leGlzdHMoKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZi0+IG9ic2VydmF0aW9uLmVmZmVjdGl2ZT1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXJpb2QpOw0KICAgICAgICAgICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgICAgICAgICAgb2JzLnZhbHVlOklOVCBhcyBpbnQtPm9ic2VydmF0aW9uLnZhbHVlPShpbnQudmFsdWUpICJ2YWx1ZSI7DQogICAgICAgICAgICAgICAgb2JzLnZhbHVlOkJMIGFzIGJvb2xlYW4gLT5vYnNlcnZhdGlvbi52YWx1ZT0oYm9vbGVhbi52YWx1ZSkiYm9vbGVhbiI7DQogICAgICAgICAgICAgICAgb2JzLnZhbHVlOkNFIGFzIHZhbCB0aGVuew0KICAgICAgICAgICAgICAgICAgdmFsLT5vYnNlcnZhdGlvbi52YWx1ZSA9Y3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBjZSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgdmFsLm9yaWdpbmFsVGV4dCBhcyBvcmlnaW5hbFRleHQgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFRleHQucmVmZXJlbmNlIGFzIHJlZmVyZW5jZS0+IGNlLnRleHQ9cmVmZXJlbmNlOw0KICAgICAgICAgICAgICAgICAgICB9Im9yaWdpbmx0ZXh0IjsNCiAgICAgICAgICAgICAgICAgICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICB9ImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICB2YWwudHJhbnNsYXRpb24gYXMgdHJhbnNsYXRpb24gLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICBxdWFsaWZpZXIudmFsdWUgYXMgdmFsdWUgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9InZhbHVlIjsNCiAgICAgICAgICAgICAgICAgICAgICB9InF1YWxpZmllciI7DQogICAgICAgICAgICAgICAgICAgIH0idHJhbnNsYXRpb24iOw0KICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgIH0idmFsIjsNCiAgICAgICAgICAgICAgICBvYnMudmFsdWU6Q0QgYXMgdmFsIHRoZW57DQogICAgICAgICAgICAgICAgICB2YWwtPm9ic2VydmF0aW9uLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICB2YWwub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGV4dC5yZWZlcmVuY2UgYXMgcmVmZXJlbmNlLT4gY2UudGV4dD1yZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgIH0ib3JpZ2lubHRleHQiOw0KICAgICAgICAgICAgICAgICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgIH0iY29kZSI7DQogICAgICAgICAgICAgICAgICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnF1YWxpZmllciBhcyBxdWFsaWZpZXIgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0icXVhbGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgICAgfSJ0cmFuc2xhdGlvbiI7DQogICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgfSJ2YWwiOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpQUSBhcyB2YWwgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHZhbC0+b2JzZXJ2YXRpb24udmFsdWUgPSBjcmVhdGUoJ1F1YW50aXR5JykgYXMgcXVhbnRpdHkgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIHZhbC52YWx1ZSBhcyB2YWx1ZS0+cXVhbnRpdHkudmFsdWUgPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgdmFsLnVuaXQgYXMgdW5pdC0+IHF1YW50aXR5LnVuaXQgPSB1bml0ICJ1bml0IjsNCiAgICAgICAgICAgICAgICAgIH0icXVhbnRpdHkiOw0KICAgICAgICAgICAgICAgIH0idmFsdWVRdWFudGl0eSI7DQogICAgICAgICAgICAgICAgb2JzLnZhbHVlOlNUIGFzIHZhbHVlLT5vYnNlcnZhdGlvbi52YWx1ZSA9Y3JlYXRlKCdzdHJpbmcnKSxvYnNlcnZhdGlvbi52YWx1ZT0gKHZhbHVlLmRhdGFTdHJpbmcpICJ2YWx1ZSI7DQogICAgICAgICAgICAgIH0ib2JzIjsNCiAgICAgICAgICAgIH0iZW50cnlyZWwyIjsNCiAgICAgICAgICAgfSJhY3QiOw0KICAgICAgICB9ImEiOw0KICAgICB9ImVudHJpLWFjdCI7DQoNCiAgICAgLy8tLS0tLS0tLS0tLS0tLURpYWdub3NpIGFsbGEgZGltaXNzaW9uZS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgYWN0LmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5cmVsMiB0aGVuew0KICAgICAgZW50cnlyZWwyLm9ic2VydmF0aW9uIGFzIG9icyB0aGVuew0KICAgICAgICBvYnMuY29kZSBhcyBjb2RlIHdoZXJlIChjb2RlID0gJzI5MzA4LTQnKSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICwgZW5jb3VudGVydC5yZWFzb25SZWZlcmVuY2UgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UgLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW57DQogICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXJ0LmlkKSAicmVmZXJlbmNlIjsgDQogICAgICAgICAgICAgICAgb2JzLmNvZGUgLT4gb2JzZXJ2YXRpb24uY29kZTsNCiAgICAgICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdjb21wbGV0ZWQnKSAtPiBvYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCc7DQogICAgICAgICAgICAgICAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nYWN0aXZlJykgLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0ncmVnaXN0ZXJlZCc7DQogICAgICAgICAgICAgICAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nYWJvcnRlZCcpIC0+IG9ic2VydmF0aW9uLnN0YXR1cyA9J2NhbmNlbGxlZCc7DQogICAgICAgICAgICAgICAgb2JzLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nc3VzcGVuZGVkJykgLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0ncGFydGlhbCc7DQogICAgICAgICAgICAgICAgb2JzLT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICAgICAgICAgICAgICBvYnMuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIC0+IG9ic2VydmF0aW9uLmVmZmVjdGl2ZSA9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB2YWx1ZSB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZlVGltZSwgdmFsdWUpICJ2YWx1ZTIiOw0KICAgICAgICAgICAgICAgIG9icyB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkgdGhlbiB7DQogICAgICAgICAgICAgICAgb2JzLmVmZmVjdGl2ZVRpbWUgYXMgZWZmLT4gb2JzZXJ2YXRpb24uZWZmZWN0aXZlPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCk7DQogICAgICAgICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgICAgICAgICBvYnMudmFsdWUgYXMgdmFsIHRoZW57DQogICAgICAgICAgICAgICAgICB2YWwtPm9ic2VydmF0aW9uLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICB2YWwub3JpZ2luYWxUZXh0IGFzIG9yaWdpbmFsVGV4dCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGV4dC5yZWZlcmVuY2UgYXMgcmVmZXJlbmNlLT4gY2UudGV4dD1yZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICAgIH0ib3JpZ2lubHRleHQiOw0KICAgICAgICAgICAgICAgICAgICB2YWwgLT4gY2UuY29kaW5nIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgIH0iY29kZSI7DQogICAgICAgICAgICAgICAgICAgIHZhbC50cmFuc2xhdGlvbiBhcyB0cmFuc2xhdGlvbiAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnF1YWxpZmllciBhcyBxdWFsaWZpZXIgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpZmllci52YWx1ZSBhcyB2YWx1ZSAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0icXVhbGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgICAgfSJ0cmFuc2xhdGlvbiI7DQogICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgfSJ2YWwiOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpJTlQgYXMgaW50LT5vYi52YWx1ZT0oaW50LnZhbHVlKSAidmFsdWUiOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpCTCBhcyBib29sZWFuIC0+b2IudmFsdWU9KGJvb2xlYW4udmFsdWUpImJvb2xlYW4iOw0KICAgICAgICAgICAgICAgIG9icy52YWx1ZTpQUSBhcyB2YWwgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHZhbC0+b2IudmFsdWUgPSBjcmVhdGUoJ1F1YW50aXR5JykgYXMgcXVhbnRpdHkgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIHZhbC52YWx1ZSBhcyB2YWx1ZS0+cXVhbnRpdHkudmFsdWUgPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgdmFsLnVuaXQgYXMgdW5pdC0+IHF1YW50aXR5LnVuaXQgPSB1bml0ICJ1bml0IjsNCiAgICAgICAgICAgICAgICAgIH0icXVhbnRpdHkiOw0KICAgICAgICAgICAgICAgIH0idmFsdWVRdWFudGl0eSI7DQogICAgICAgICAgICAgICAgb2JzLnZhbHVlOlNUIGFzIHZhbHVlLT5vYi52YWx1ZSA9Y3JlYXRlKCdzdHJpbmcnKSxvYi52YWx1ZT0gKHZhbHVlLmRhdGFTdHJpbmcpICJ2YWx1ZSI7DQogICAgICAgICB9IjIyMiI7DQogICAgICAgfSJvYnMiOw0KICAgICAgfSJlbnRyeXJlbDIiOw0KDQogICAgICAvLy0tLS0tLS0tRXNpdG8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICBhY3QuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cmlSZWwzIHRoZW57DQogICAgICAgIGVudHJpUmVsMy5vYnNlcnZhdGlvbiBhcyBvYnMyIHRoZW57DQogICAgICAgICAgICBvYnMyLmNvZGUgYXMgY29kZSB0aGVuIHsNCiAgICAgICAgICAgIGNvZGUuY29kZSB3aGVyZSAoY29kZS5jb2RlID0gJzExMzAyLTcnKSB0aGVuIHsgDQogICAgICAgICAgICBvYnMyIC0+IGVuY291bnRlcnQuaG9zcGl0YWxpemF0aW9uIGFzIGhvc3BpdGFsIHRoZW57DQogICAgICAgICAgICBvYnMyLnZhbHVlIC0+IGhvc3BpdGFsLmRpc2NoYXJnZURpc3Bvc2l0aW9uOwkNCiAgICAgICAgICB9Imhvc3BpdGFsIjsgICAgICAgICAgDQogICAgICAgIH0iZW50cnktb2JzMSI7DQogICAgICB9ImFjdCI7DQogICAgIH0ieCI7DQogICAgfSIzIjsNCiAgIH0iYWN0IjsNCiAgfSJlbnRyeTEiOw0KDQogIHNyYy5lbnRyeSBhcyBlbnRyeTEgdGhlbiB7DQogICAgZW50cnkxLm9ic2VydmF0aW9uIGFzIG9icyB0aGVuIHsNCiAgICAgIG9icyAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdPYnNlcnZhdGlvbicpIGFzIG9ic2VydmF0aW9uLCAgb2JzZXJ2YXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdPYnNlcnZhdGlvbicgLHRndC5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nICsgJW9ic2VydmF0aW9uLmlkKSB0aGVuew0KICAgICAgb2JzLnZhbHVlIGFzIHZhbCB3aGVyZSgieHNpOnR5cGUiID0gJ0JMJykgLT4gb2JzZXJ2YXRpb24udmFsdWUgPSAodmFsLnZhbHVlKTsNCiAgICAgIG9icyB0aGVuIE9ic2VydmF0aW9uKG9icywgcGF0aWVudCAsZW5jICxvYnNlcnZhdGlvbiwgYnVuZGxlKSAiYWN0IjsNCiAgICAgIH0ib2JzdGFyZyI7DQogICAgfSJvYnMiOyANCiAgfSJlbnRyeSI7DQp9DQoNCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tVGVyYXBpYUZhcm1hY29sb2dpY2FEaW1pc3Npb25lLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRTZWN0aW9uVGVyYXBpYUZhcm1hY29sb2dpY2FEaW1pc3Npb25lKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICAvL1NlemlvbmUgTmFycmF0aXZhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdNZWRpY2F0aW9uUmVxdWVzdCcpIGFzIG1lZFJxLCAgbWVkUnEuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvblJlcXVlc3QvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdNZWRpY2F0aW9uUmVxdWVzdCcgLHRndC5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uUmVxdWVzdC8nICsgJW1lZFJxLmlkKSwgbWVkUnEubm90ZSA9IGNyZWF0ZSgnQW5ub3RhdGlvbicpIGFzIG5vdGUgdGhlbiB7DQogICAgICBjZGFUZXh0IC0+bm90ZS50ZXh0ID1jZGFUZXh0ICJyZWZlcmVuY2UiOyAgDQogICAgICBjZGFUZXh0LT4gbWVkUnEuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICBjZGFUZXh0LT4gbWVkUnEuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7ICAgICANCiAgICAgIGNkYVRleHQgLT4gbWVkUnEuc3RhdHVzPSdhY3RpdmUnInN0YXR1cyI7DQogICAgICBjZGFUZXh0IC0+IG1lZFJxLmludGVudD0nb3JkZXInImludGVudCI7ICANCiAgICBzcmMuYXV0aG9yIGFzIGF1dGggLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIsICBwcmFjdGl0aW9uZXIuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMSkgIHRoZW57DQogICAgICBhdXRoLnRpbWUgYXMgdCAtPiBub3RlLnRpbWU9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB2YWx1ZSB0aGVuIFRTRGF0ZVRpbWUodCwgdmFsdWUpOw0KICAgICAgYXV0aC5hc3NpZ25lZEF1dGhvciBhcyBhc3NBdXRoIHRoZW57DQogICAgICAgYXNzQXV0aC0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICBhc3NBdXRoLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgYXNzQXV0aCAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgIGFzc0F1dGggLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvVGVyYXBpYUZhcm1hY29sb2dpY2FEaW1pc3Npb25lL2F1dGhvciciY29kZSI7DQogICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICB9Im1ldGEiOw0KICAgICAgICBhc3NBdXRoLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMiksbm90ZS5hdXRob3IgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSAiYXV0IjsNCiAgICAgICAgICB9InIiOw0KICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICBhc3NBdXRoLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICBhc3NBdXRoLmFzc2lnbmVkUGVyc29uIGFzIGFzc3BlcnMgdGhlbnsNCiAgICAgICAgICBhc3NwZXJzLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgIH0iYXNzUGVycyI7DQogICAgICB9ImFzc0F1dGgiOw0KICAgIH0iYXV0aCI7DQogICAgICBzcmMgLT4gIG1lZFJxLm1lZGljYXRpb24gPWNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgbWVkaWNhdGlvbiB0aGVuIHsNCiAgICAgIHNyYy50ZXh0IGFzIHR4dCAtPiBtZWRpY2F0aW9uLnRleHQ9dHh0ICJ0ZXh0IjsNCiAgICB9Im1lZGljYXRpb25lc2lzdGUiOw0KICB9Im5vdGUiOw0KfSJ0ZXh0IjsNCiAgIC8vIFNlemlvbmUgU3RydXR0dXJhdGEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgIHNyYyB3aGVyZSBzcmMuZW50cnkuZXhpc3RzKCkgdGhlbiB7DQogICBzcmMgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnTWVkaWNhdGlvblJlcXVlc3QnKSBhcyBtZWRScSwgIG1lZFJxLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb25SZXF1ZXN0LycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnTWVkaWNhdGlvblJlcXVlc3QnICx0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvblJlcXVlc3QvJyArICVtZWRScS5pZCksIG1lZFJxLm5vdGUgPSBjcmVhdGUoJ0Fubm90YXRpb24nKSBhcyBub3RlIHRoZW4gew0KICAgIHNyYy50ZXh0IGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7IA0KICAgIHNyYy0+IG1lZFJxLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgIHNyYy0+IG1lZFJxLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyAgICAgDQogICAgc3JjIC0+IG1lZFJxLnN0YXR1cz0nYWN0aXZlJyJzdGF0dXMiOw0KICAgIHNyYyAtPiBtZWRScS5pbnRlbnQ9J29yZGVyJyJpbnRlbnQiOyAgDQogICAgc3JjLmF1dGhvciBhcyBhdXRoIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyLCAgcHJhY3RpdGlvbmVyLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDEpICB0aGVuew0KICAgICAgYXV0aC50aW1lIGFzIHQgLT4gIG5vdGUudGltZT0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZSh0LCB2YWx1ZSk7DQogICAgICBhdXRoLmFzc2lnbmVkQXV0aG9yIGFzIGFzc0F1dGggdGhlbnsNCiAgICAgICBhc3NBdXRoLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgIGFzc0F1dGgtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICBhc3NBdXRoIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgYXNzQXV0aCAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9UZXJhcGlhRmFybWFjb2xvZ2ljYURpbWlzc2lvbmUvYXV0aG9yJyJjb2RlIjsNCiAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgIH0ibWV0YSI7DQogICAgICAgIGFzc0F1dGguaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQyKSxub3RlLmF1dGhvciAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgIH0iciI7DQogICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgIGFzc0F1dGguaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgIGFzc0F1dGguYXNzaWduZWRQZXJzb24gYXMgYXNzcGVycyB0aGVuew0KICAgICAgICAgIGFzc3BlcnMubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgfSJhc3NQZXJzIjsNCiAgICAgIH0iYXNzQXV0aCI7DQogICAgfSJhdXRoIjsNCiAgICAgDQogICAgc3JjLmVudHJ5IGFzIGVudHJ5MSB0aGVuIHsNCiAgICAgIGVudHJ5MS5zdWJzdGFuY2VBZG1pbmlzdHJhdGlvbiBhcyBzdWIgdGhlbnsgICANCiAgICAgICAgc3ViLnN0YXR1c0NvZGUgLT4gbWVkUnEuc3RhdHVzOw0KICAgICAgICBzdWIgLT4gbWVkUnEuZG9zYWdlSW5zdHJ1Y3Rpb24gPSBjcmVhdGUoJ0Rvc2FnZScpIGFzIGRvc2FnZSB0aGVuew0KICAgICAgICAgIHN1YiAtPiBkb3NhZ2UudGltaW5nID0gY3JlYXRlKCdUaW1pbmcnKSBhcyB0aW0gdGhlbnsNCiAgICAgICAgICAgIHN1Yi5lZmZlY3RpdmVUaW1lIGFzIGVmZiAtPiB0aW0ucmVwZWF0IGFzIHJlcGVhdCB0aGVuew0KICAgICAgICAgICAgICBlZmYgLT4gcmVwZWF0LmJvdW5kcyAgPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCkiYm91bmRzcGVyaW9kIjsNCiAgICAgICAgICAgIH0icmVwZWF0IjsNCiAgICAgICAgICB9InRpbWluZyI7DQogICAgICAgIH0iZG9zYWdlIjsNCiAgICAgICAgc3ViLmVmZmVjdGl2ZVRpbWU6IFBJVkxfVFMgYXMgZWZmIC0+IG1lZFJxLmRvc2FnZUluc3RydWN0aW9uID0gY3JlYXRlKCdEb3NhZ2UnKSBhcyBkb3NhZ2UgdGhlbnsNCiAgICAgICAgZWZmIC0+IGRvc2FnZS50aW1pbmcgPSBjcmVhdGUoJ1RpbWluZycpIGFzIHRpbWluZyB0aGVuIHBlcmlvZFRpbWluZyhlZmYsdGltaW5nKSAiY29kIjsNCiAgICAgICAgfSJlZmYiOw0KICAgIHN1YiAtPiBtZWRScS5kb3NhZ2VJbnN0cnVjdGlvbiA9IGNyZWF0ZSgnRG9zYWdlJykgYXMgZG9zYWdlIHRoZW57DQogICAgICAgICAgc3ViLnJvdXRlQ29kZSAtPiBkb3NhZ2Uucm91dGU7ICAgICAgICANCiAgICAgICAgfSJkb3NhZ2UiOw0KICAgICAgICBzdWIgLT4gbWVkUnEuZG9zYWdlSW5zdHJ1Y3Rpb24gPSBjcmVhdGUoJ0Rvc2FnZScpIGFzIGRvc2FnZSB0aGVuew0KICAgICAgICAgIHN1Yi5hcHByb2FjaFNpdGVDb2RlIC0+IGRvc2FnZS5zaXRlOyAgICAgICAgDQogICAgICAgIH0iZG9zYWdlIjsNCiAgICAgICAgc3ViLmRvc2VRdWFudGl0eSBhcyBkb3NlUXVhbnQgdGhlbnsNCiAgICAgICAgICBkb3NlUXVhbnQgLT4gbWVkUnEuZG9zYWdlSW5zdHJ1Y3Rpb24gPSBjcmVhdGUoJ0Rvc2FnZScpIGFzIGRvc2FnZUluc3RydWN0aW9uIHRoZW57DQogICAgICAgICAgICBkb3NlUXVhbnQub3JpZ2luYWxUZXh0IGFzIG90IHRoZW57DQogICAgICAgICAgICAgIG90LnJlZmVyZW5jZSAtPiBkb3NhZ2VJbnN0cnVjdGlvbi50ZXh0Ow0KICAgICAgICAgICAgfSJvdCI7DQogICAgICAgICAgICBkb3NlUXVhbnQgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24uZG9zZUFuZFJhdGUgYXMgZG9zYWdlUmF0ZSB0aGVuew0KICAgICAgICAgICAgICBkb3NlUXVhbnQgLT4gZG9zYWdlUmF0ZS5kb3NlID0gY3JlYXRlKCdSYW5nZScpIGFzIGQgdGhlbnsNCiAgICAgICAgICAgICAgICBkb3NlUXVhbnQgLT4gZC5sb3cgPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgbCB0aGVuew0KICAgICAgICAgICAgICAgICAgZG9zZVF1YW50LmxvdyBhcyBsbyAtPiBsLnZhbHVlID0gKGxvLnZhbHVlKTsgDQogICAgICAgICAgICAgICAgICBkb3NlUXVhbnQubG93IGFzIGxvIC0+IGwudW5pdCA9IChsby51bml0KTsgDQogICAgICAgICAgICAgICAgfSJsb3ciOw0KICAgICAgICAgICAgICAgIGRvc2VRdWFudCAtPiBkLmhpZ2ggPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgaCB0aGVuew0KICAgICAgICAgICAgICAgICAgZG9zZVF1YW50LmhpZ2ggYXMgaGkgLT4gaC52YWx1ZSA9IChoaS52YWx1ZSk7DQogICAgICAgICAgICAgICAgICBkb3NlUXVhbnQuaGlnaCBhcyBoaSAtPiBoLnVuaXQgPSAoaGkudW5pdCk7IA0KICAgICAgICAgICAgICAgIH0ibG93IjsNCiAgICAgICAgICAgICAgfSJkIjsNCiAgICAgICAgICAgIH0iZG9zYWdlUmF0ZSI7DQogICAgICAgICAgICBzdWIucmF0ZVF1YW50aXR5IGFzIHJhdGVRdWFudGl0eSAtPiBtZWRScS5kb3NhZ2VJbnN0cnVjdGlvbiA9IGNyZWF0ZSgnRG9zYWdlJykgYXMgZG9zYWdlSW5zdHJ1Y3Rpb24xIHRoZW57DQogICAgICAgICAgICAgIHJhdGVRdWFudGl0eS5vcmlnaW5hbFRleHQgYXMgb3QgdGhlbnsNCiAgICAgICAgICAgICAgICBvdC5yZWZlcmVuY2UgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24xLnRleHQ7DQogICAgICAgICAgICAgIH0ib3QiOw0KICAgICAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZG9zYWdlSW5zdHJ1Y3Rpb24xLmRvc2VBbmRSYXRlIGFzIGRvc2FnZVJhdGUgdGhlbnsNCiAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZG9zYWdlUmF0ZS5yYXRlID0gY3JlYXRlKCdSYW5nZScpIGFzIGQgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHJhdGVRdWFudGl0eSAtPiBkLmxvdyA9IGNyZWF0ZSgnU2ltcGxlUXVhbnRpdHknKSBhcyBsIHRoZW57DQogICAgICAgICAgICAgICAgICAgIHJhdGVRdWFudGl0eS5sb3cgYXMgbG8gLT4gbC52YWx1ZSA9IChsby52YWx1ZSk7IA0KICAgICAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkubG93IGFzIGxvIC0+IGwudW5pdCA9IChsby51bml0KTsgDQogICAgICAgICAgICAgICAgICB9ImxvdyI7DQogICAgICAgICAgICAgICAgICByYXRlUXVhbnRpdHkgLT4gZC5oaWdoID0gY3JlYXRlKCdTaW1wbGVRdWFudGl0eScpIGFzIGggdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgcmF0ZVF1YW50aXR5LmhpZ2ggYXMgaGkgLT4gaC52YWx1ZSA9IChoaS52YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIHJhdGVRdWFudGl0eS5oaWdoIGFzIGhpIC0+IGgudW5pdCA9IChoaS51bml0KTsgDQogICAgICAgICAgICAgICAgICB9ImxvdyI7DQogICAgICAgICAgICAgICAgfSJkIjsNCiAgICAgICAgICAgICAgfSJxdWFsY29zYSI7DQogICAgICAgICAgICB9ImRvc2FnZVJhdGUiOw0KICAgICAgICAgIH0iRG9zYWdlIjsgIA0KICAgICAgICB9ImRvc2VRdWFudCI7DQogICAgICAgIHN1YiAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdNZWRpY2F0aW9uJykgYXMgbWVkaWNhdGlvbiwgIG1lZGljYXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ01lZGljYXRpb24nICxtZWRScS5tZWRpY2F0aW9uICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL01lZGljYXRpb24vJyArICVtZWRpY2F0aW9uLmlkKSB0aGVuew0KICAgICAgICAgIHN1Yi5hZG1pbmlzdHJhdGlvblVuaXRDb2RlIC0+IG1lZGljYXRpb24uZm9ybTsNCiAgICAgICAgICBzdWIuY29uc3VtYWJsZSBhcyBjb25zIHRoZW57DQogICAgICAgICAgICBjb25zLm1hbnVmYWN0dXJlZFByb2R1Y3QgYXMgbWFudXByb2QgdGhlbnsNCiAgICAgICAgICAgICAgbWFudXByb2QubWFudWZhY3R1cmVkTWF0ZXJpYWwgYXMgbWFudWZhY3QgdGhlbnsNCiAgICAgICAgICAgICAgICBtYW51ZmFjdC5jb2RlIC0+IG1lZGljYXRpb24uY29kZTsNCiAgICAgICAgICAgICAgfSJtYW51RmFjdCI7DQogICAgICAgICAgICB9Im1hbnVtYXQiOw0KICAgICAgICAgIH0iY29ucyI7DQogICAgICAgICAgc3ViLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5UiB0aGVuew0KICAgICAgICAgICAgZW50cnlSLm9ic2VydmF0aW9uIGFzIG9ic2VydmF0aW9uIHRoZW57DQogICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24uY29kZSB3aGVyZSBkaXNwbGF5TmFtZT0nR3JhbW1hdHVyYScgLT4gbWVkaWNhdGlvbi5pbmdyZWRpZW50IGFzIGluZ3JlZGllbnQgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgc3ViLmNvbnN1bWFibGUgYXMgY29uc3VtYWJsZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bWFibGUubWFudWZhY3R1cmVkUHJvZHVjdCBhcyBtYW51ZmFjdHVyZWRQcm9kdWN0IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnVmYWN0dXJlZFByb2R1Y3QubWFudWZhY3R1cmVkTWF0ZXJpYWwgYXMgbWFudWZhY3R1cmVkTWF0ZXJpYWwgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnVmYWN0dXJlZE1hdGVyaWFsLmNvZGUgYXMgY29kZSAtPiBpbmdyZWRpZW50Lml0ZW0gPSBjcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIHZhbHVlIHRoZW4gQ0VDb2RlYWJsZUNvbmNlcHQoY29kZSx2YWx1ZSkgIkNFIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJtYXRlcmlhbCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJwcm9kdWN0IjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0iY29uc3VtYWJsZSI7DQogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi52YWx1ZSBhcyB2YWx1ZSAtPiBpbmdyZWRpZW50LnN0cmVuZ3RoIGFzIHN0cmVuZ3RoIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gc3RyZW5ndGgubnVtZXJhdG9yIGFzIG51bWVyYXRvciB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBudW1lcmF0b3IudmFsdWUgPSAodmFsdWUudmFsdWUpICJ2YWx1ZU4iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gIm51bWVyYXRvciI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gc3RyZW5ndGguZGVub21pbmF0b3IgYXMgZGVub21pbmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gZGVub21pbmF0b3IudmFsdWUgPSAxICJ2YWx1ZUQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gImRlbm9taW5hdG9yIjsNCiAgICAgICAgICAgICAgICAgICAgICAgfSJzdHJlbmdodCI7DQogICAgICAgICAgICAgICAgICAgIH0iaW5ncmVkaWVudCI7DQogICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLmNvZGUgd2hlcmUgZGlzcGxheU5hbWU9J1F1YW50aXTDoCBuZWxsYSBDb25mZXppb25lJyB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24udmFsdWUgYXMgdmFsdWUgLT4gbWVkaWNhdGlvbi5hbW91bnQgYXMgYW1vdW50IHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gYW1vdW50Lm51bWVyYXRvciAgYXMgbnVtZXJhdG9yIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC0+IG51bWVyYXRvci52YWx1ZSA9ICh2YWx1ZS52YWx1ZSkgInZhbHVlTiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAibnVtZXJhdG9yIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtPiBhbW91bnQuZGVub21pbmF0b3IgYXMgZGVub21pbmF0b3IgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gZGVub21pbmF0b3IudmFsdWUgPSAxICJ2YWx1ZUQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gImRlbm9taW5hdG9yIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0iYW1vdW50IjsNCiAgICAgICAgICAgICAgICAgICB9InF1YW50aXRhIjsNCiAgICAgICAgICAgICAgIH0ib2JzIjsNCiAgICAgICAgICB9ImVudHJ5UiI7DQogICAgICAgICAgc3ViLnBhcnRpY2lwYW50IGFzIHBhcnQgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwYXJ0aWNpcGFudCwgIHBhcnRpY2lwYW50LmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1BhcnRpY2lwYW50LycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1BhcnRpY2lwYW50LycsIHV1aWQxKSB0aGVuew0KICAgICAgICAgICAgcGFydC50aW1lIGFzIHQgLT4gbWVkUnEuYXV0aG9yZWRPbiA9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBkYXRlIHRoZW4gVFNEYXRlVGltZSh0LGRhdGUpImF1dGhvcmVkT24iOw0KICAgICAgICAgICAgcGFydC5wYXJ0aWNpcGFudFJvbGUgYXMgcGFydFJvbGUgdGhlbnsNCiAgICAgICAgICAgICAgcGFydFJvbGUtPnBhcnRpY2lwYW50Lm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICBwYXJ0Um9sZS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIHBhcnRSb2xlIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgcGFydFJvbGUgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvVGVyYXBpYUZhcm1hY29sb2dpY2FEaW1pc3Npb25lL3BhcnRpY2lwYW50JyJjb2RlIjsNCiAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgIHBhcnRSb2xlLmlkIGFzIGlkIC0+IHBhcnRpY2lwYW50LmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcGFydGljaXBhbnQuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBtZWRScS5yZXF1ZXN0ZXIgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcGFydGljaXBhbnQuaWQpICJhdXQiOw0KICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgIHBhcnRSb2xlLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICAgICAgICBwYXJ0Um9sZS5wbGF5aW5nRW50aXR5IGFzIHBsYXllbnQgdGhlbnsNCiAgICAgICAgICAgICAgICBwbGF5ZW50Lm5hbWUgLT4gcGFydGljaXBhbnQubmFtZTsNCiAgICAgICAgICAgICAgfSJwbGF5ZW50IjsNCiAgICAgICAgICAgIH0icGFydFJvbGUiOw0KICAgICAgICAgIH0icGFydGljaXBhbnQiOyAgIA0KICAgICAgICAgIHN1Yi5yZWZlcmVuY2UgYXMgcmVmIHRoZW57DQogICAgICAgICAgICByZWYuZXh0ZXJuYWxBY3QgYXMgZXh0ZXJuYWwgdGhlbnsNCiAgICAgICAgICAgICAgZXh0ZXJuYWwuaWQgLT4gbWVkUnEuaWRlbnRpZmllcjsNCiAgICAgICAgICAgIH0iZXh0ZXJuYWwiOw0KICAgICAgICAgIH0icmVmIjsNCiAgICAgICAgICBzdWIuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlSZWxhdGlvbnNoaXAgdGhlbnsgDQogICAgICAgICAgICBlbnRyeVJlbGF0aW9uc2hpcC5zdXBwbHkgYXMgc3VwIC0+IG1lZFJxLmRpc3BlbnNlUmVxdWVzdCBhcyBkaXNwcmVxIHRoZW4geyAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgc3VwIC0+IGRpc3ByZXEucXVhbnRpdHkgPSBjcmVhdGUoJ1NpbXBsZVF1YW50aXR5JykgYXMgcXVhbnRpdHkgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHN1cC5xdWFudGl0eSBhcyBxIC0+IHF1YW50aXR5LnZhbHVlID0gKHEudmFsdWUpOw0KICAgICAgICAgICAgICAgIH0icXVhbnRpdHkiOyAgICAgICAgICAgICAgDQogICAgICAgICAgICB9InN1YiI7DQogICAgICAgICAgIH0ibWVkIjsgICAgDQogICAgICAgIH0iYWRtbmlzdHJhdGlvblVuaWNvZGUiOw0KICAgICAgfSJzdWIiOw0KICAgIH0iZW50cnkiOw0KICB9Im1lZGljYXRpb24iOw0KfSJzZXppb25lZXNpc3RlIjsNCn0NCi8vLS0tLS0tLS0tLS0tLS0tLS0tU2VjdGlvbnMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KZ3JvdXAgTW9kYWxpdGFkaVRyYXNwb3N0byhzb3VyY2UgY2RhIDogQ2xpbmljYWxEb2N1bWVudCwgc291cmNlIHNyYyA6IFNlY3Rpb24sIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IHRndCwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuYyA6IEVuY291bnRlcikgew0KICBzcmMudGl0bGUgYXMgdCAtPiB0Z3QudGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgc3JjLmNvZGUgLT4gdGd0LmNvZGU7DQogIHNyYy50ZXh0IGFzIGNkYVRleHQgLT4gdGd0LnRleHQgYXMgZmhpclRleHQgdGhlbiB7DQogICAgY2RhVGV4dCAtPiBmaGlyVGV4dC5zdGF0dXMgPSAnZ2VuZXJhdGVkJyAibmFycmF0aXZlU3RhdHVzIjsNCiAgICBjZGFUZXh0IGFzIHQgLT4gZmhpclRleHQuZGl2ID0gdCAibmFycmF0aXZlVGV4dCI7DQogIH0iY2RhVGV4dCI7DQogIHNyYy5lbnRyeSBhcyBlbnRyeTEgdGhlbiB7DQogICAgc3JjLmVudHJ5IGFzIGVudHJ5MSAtPiB0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSB0aGVuIHsNCiAgICBlbnRyeTEuYWN0IGFzIGFjdDEgIHRoZW4gQWN0KGFjdDEsIHBhdGllbnQsICBlbmMgLCBidW5kbGUpICJhY3QiOw0KICAgIH0iZW50cnkxIjsNCiB9ImVudHJ5IjsNCn0NCmdyb3VwIE1vdGl2b0RlbGxhVmlzaXRhKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICB9ImNkYVRleHQiOw0KICBzcmMuZW50cnkgYXMgZW50cnkgLT4gYnVuZGxlLmVudHJ5IGFzIGUyLCBlMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTIucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMiwgIGUyLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgIGVudHJ5Lm9ic2VydmF0aW9uIGFzIG9icyB0aGVuIE9ic2VydmF0aW9uKG9icywgcGF0aWVudCAsZW5jICxvYnNlcnZhdGlvbiwgYnVuZGxlKSAib2JzZXJ2YXRpb24iOw0KICB9ImVudHJ5IjsNCn0NCg0KZ3JvdXAgVHJpYWdlKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKXsNCiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogIHNyYy5jb2RlIC0+IHRndC5jb2RlOw0KICBzcmMudGV4dCBhcyBjZGFUZXh0IC0+IHRndC50ZXh0IGFzIGZoaXJUZXh0IHRoZW4gew0KICAgIGNkYVRleHQgLT4gZmhpclRleHQuc3RhdHVzID0gJ2dlbmVyYXRlZCcgIm5hcnJhdGl2ZVN0YXR1cyI7DQogICAgY2RhVGV4dCBhcyB0IC0+IGZoaXJUZXh0LmRpdiA9IHQgIm5hcnJhdGl2ZVRleHQiOw0KICB9ImNkYVRleHQiOw0KICBzcmMuZW50cnkgYXMgZW50cnkgLT4gYnVuZGxlLmVudHJ5IGFzIGUyLCBlMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgICBlMi5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQyLCAgZTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQyKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nICx0Z3QuZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgdGhlbiB7DQogICAgZW50cnkub2JzZXJ2YXRpb24gYXMgb2JzIHRoZW4gT2JzZXJ2YXRpb24ob2JzLCBwYXRpZW50ICxlbmMgLG9ic2VydmF0aW9uLCBidW5kbGUpICJvYnNlcnZhdGlvbiI7DQogIH0iZW50cnkiOw0KfQ0KDQpncm91cCBJbnF1YWRyYW1lbnRvQ2xpbmljb0luaXppYWxlKHNvdXJjZSBjZGEgOiBDbGluaWNhbERvY3VtZW50LCBzb3VyY2Ugc3JjIDogU2VjdGlvbiwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50LCB0YXJnZXQgdGd0LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgZW5jIDogRW5jb3VudGVyKSB7DQogIHNyYy50aXRsZSBhcyB0IC0+IHRndC50aXRsZSA9ICh0LmRhdGFTdHJpbmcpOw0KICBzcmMuY29kZSAtPiB0Z3QuY29kZTsNCiAgc3JjLnRleHQgYXMgY2RhVGV4dCAtPmJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sICBvYnNlcnZhdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9PYnNlcnZhdGlvbi8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ09ic2VydmF0aW9uJyAsdGd0LmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpLCB0Z3QudGV4dCBhcyBmaGlyVGV4dCB0aGVuIHsNCiAgICBzcmMuY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgIHNyYyB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgc3JjLT5vYnNlcnZhdGlvbi5zdGF0dXMgPSdmaW5hbCcic3RhdHVzIjsNCiAgICB9InN0YXR1c2NvZGUiOw0KICAgIHNyYy0+b2JzZXJ2YXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgc3JjLT5vYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICBjZGFUZXh0LT5vYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgIHNyYy5hdXRob3IgYXMgYXV0aG9yIHRoZW4gew0KICAgICAgICBhdXRob3ItPmJ1bmRsZS5lbnRyeSBhcyBlMiwgZTIucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTIucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuIHsNCiAgICAgICAgICBhdXRob3IuYXNzaWduZWRBdXRob3IgYXMgYXNzaWduZWRBdXRob3IgdGhlbiB7DQogICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3ItPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvSW5xdWFkcmFtZW50b0NsaW5pY29Jbml6aWFsZS9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICB9Im1ldGEiOw0KICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBub3RlLmF1dGhvciA9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgICB9InIiOw0KICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5hc3NpZ25lZFBlcnNvbiBhcyBwZXJzb24gdGhlbiB7DQogICAgICAgICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgfSJuYW1lIjsNCiAgICAgICAgICB9ImFzc2lnbmVkQXV0aG9yIjsNCiAgICAgICAgfSJwcmFjdGl0aW9uZXIiOw0KICAgICAgICBhdXRob3IudGltZSBhcyB0LT5ub3RlLnRpbWU9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB2YWx1ZSB0aGVuIFRTRGF0ZVRpbWUodCwgdmFsdWUpOw0KICAgICAgfSJBdXRob3IiOw0KICAgICAgY2RhVGV4dCBhcyB0IC0+bm90ZS50ZXh0ID0gdCAicmVmZXJlbmNlIjsNCiAgICB9InJlZmVyZW5jZSI7DQogIH0iY2RhVGV4dCI7DQogIA0KICAvL1NUQVJUIHNvdHRvc2VjdGlvbnMNCiAgc3JjLmNvbXBvbmVudCBhcyBjb21wb25lbnQgdGhlbiB7DQogICAgY29tcG9uZW50LnNlY3Rpb24gYXMgc290dG9zZWN0aW9uIHRoZW57DQogICAgICBzb3R0b3NlY3Rpb24gLT4gdGd0LnNlY3Rpb24gYXMgc2VjdGlvbiB0aGVuIHsNCiAgICAgICAgLy9BbmFtbmVzaSBOYXJyYXRpdmEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIHNvdHRvc2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnMTEzMjktMCcpIC0+IHNlY3Rpb24uY29kZTsNCiAgICAgICAgc290dG9zZWN0aW9uLmNvZGUgYXMgY29kZTEgd2hlcmUoY29kZSA9ICcxMTMyOS0wJykgIHRoZW4gew0KICAgICAgICAgIHNyYyB3aGVyZSBzb3R0b3NlY3Rpb24uZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgc290dG9zZWN0aW9uLnRpdGxlIGFzIHQtPiBzZWN0aW9uLnRpdGxlPSAodC5kYXRhU3RyaW5nKTsNCiAgICAgICAgICBzb3R0b3NlY3Rpb24udGV4dCBhcyBjZGFUZXh0IC0+IGJ1bmRsZS5lbnRyeSBhcyBlOCwgZTgucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGU4LnJlc291cmNlID0gY3JlYXRlKCdPYnNlcnZhdGlvbicpIGFzIG9ic2VydmF0aW9uLCAgb2JzZXJ2YXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDgsICBlOC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJywgdXVpZDgpLCByZXF1ZXN0LnVybCA9ICdPYnNlcnZhdGlvbicsIHNlY3Rpb24uZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgdGhlbiB7DQogICAgICAgICAgICBjZGFUZXh0IC0+IG9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgY2RhVGV4dCAtPiBvYnNlcnZhdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgDQogICAgICAgICAgICBzb3R0b3NlY3Rpb24uY29kZSAtPiBvYnNlcnZhdGlvbi5jb2RlOw0KICAgICAgICAgICAgc3JjIHdoZXJlIG9ic2VydmF0aW9uLnN0YXR1c0NvZGUuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgICAgIHNyYy0+b2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgICBjZGFUZXh0IC0+IG9ic2VydmF0aW9uLm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgICBjZGFUZXh0IGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgIHNvdHRvc2VjdGlvbi5hdXRob3IgYXMgYXV0aG9ycyB0aGVuIHsNCiAgICAgICAgICAgICAgICBhdXRob3JzLnRpbWUgYXMgdGltZSAtPiBub3RlLnRpbWUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKHRpbWUsIHZhbHVlKSAidGltZUF1dGhvciI7DQogICAgICAgICAgICAgICAgYXV0aG9ycy5hc3NpZ25lZEF1dGhvciBhcyBhc3NpZ25lZEF1dGhvciAtPiBidW5kbGUuZW50cnkgYXMgZTksIGU5LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTkucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuew0KICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3ItPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L0VzYW1lT2JpZXR0aXZvL2F1dGhvciciY29kZSI7DQogICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDksICBlOS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQ5KSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkOSksIG5vdGUuYXV0aG9yID1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgImF1dG9yZSI7DQogICAgICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmFzc2lnbmVkUGVyc29uIGFzIHBlcnNvbiB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgcGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgICAgICAgICB9ImFzc2lnbmVkUGVyc29uIjsNCiAgICAgICAgICAgICAgICB9ImFzc2lnaGVkQXV0aG9yIjsNCiAgICAgICAgICAgICAgfSJhdXRob3IiOw0KICAgICAgICAgICAgfSJyZWZlcmVuY2UiOw0KICAgICAgICAgIH0iY2RhVGV4dCI7DQogICAgICAgIH0id2hlcmUiOw0KICAgICAgICAvLyBBbmFtbmVzaSBTdHJ1dHR1cmF0YS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgICAgIHNvdHRvc2VjdGlvbi5lbnRyeSBhcyBlbnRyeTEgdGhlbiB7DQogICAgICAgICAgICBlbnRyeTEub2JzZXJ2YXRpb24gYXMgb2JzIHRoZW4gew0KICAgICAgICAgICAgICBvYnMuY29kZSB3aGVyZSAoY29kZSA9ICc3NTMyNi05JykgIHRoZW4gew0KICAgICAgICAgICAgICBvYnMtPmJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxLnJlc291cmNlID0gY3JlYXRlKCdDb25kaXRpb24nKSBhcyBjb25kaXRpb24sIGNvbmRpdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Db25kaXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdDb25kaXRpb24nLCBzZWN0aW9uLmVudHJ5ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvQ29uZGl0aW9uLycgKyAlY29uZGl0aW9uLmlkKSB0aGVuIHsNCiAgICAgICAgICAgICAgb2JzLmNvZGUgLT4gY29uZGl0aW9uLmNhdGVnb3J5Ow0KICAgICAgICAgICAgICBvYnMtPmNvbmRpdGlvbi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgICAgb2JzLT5jb25kaXRpb24uZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7IA0KICAgICAgICAgICAgICBvYnMuc3RhdHVzQ29kZSBhcyBzdGF0dXMgd2hlcmUgKGNvZGU9J2NvbXBsZXRlZCcpIC0+IGNvbmRpdGlvbi52ZXJpZmljYXRpb25TdGF0dXMgYXMgc3RhdHVzMiB0aGVuIHsNCiAgICAgICAgICAgICAgICBzdGF0dXMgLT4gIHN0YXR1czIuY29kaW5nIGFzIHN0YXR1czMgdGhlbnsNCiAgICAgICAgICAgICAgICAgIHN0YXR1cyAtPiBzdGF0dXMzLmNvZGUgPSdjb25maXJtZWQnICJmaW5hbGQiOw0KICAgICAgICAgICAgICAgICAgc3RhdHVzIC0+IHN0YXR1czMuc3lzdGVtPSdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi12ZXItc3RhdHVzJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgIH0ic3QzIjsNCiAgICAgICAgICAgICAgfSJzdGF0dXMiOw0KICAgICAgICAgICAgICAvLyBCbG9jY28gTmFycmF0aXZvDQogICAgICAgICAgICAgIHNvdHRvc2VjdGlvbi50ZXh0IGFzIGNkYVRleHQxIC0+IGNvbmRpdGlvbi5ub3RlIGFzIG5vdGUgdGhlbiB7DQogICAgICAgICAgICAgICAgY2RhVGV4dDEgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgICAgICBzb3R0b3NlY3Rpb24uYXV0aG9yIGFzIGF1dGhvcnMgdGhlbiB7DQogICAgICAgICAgICAgICAgICBhdXRob3JzLnRpbWUgYXMgdGltZSAtPiBub3RlLnRpbWUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKHRpbWUsIHZhbHVlKSAidGltZUF1dGhvciI7DQogICAgICAgICAgICAgICAgICBhdXRob3JzLmFzc2lnbmVkQXV0aG9yIGFzIGFzc2lnbmVkQXV0aG9yIC0+IGJ1bmRsZS5lbnRyeSBhcyBlNSwgZTUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlNS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyIHRoZW57DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvciAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9BbmFtbmVzaS9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkNSwgIGU1LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDUpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQ1KSwgbm90ZS5hdXRob3IgPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKTsNCiAgICAgICAgICAgICAgICAgICAgICB9InIiOw0KICAgICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuYXNzaWduZWRQZXJzb24gYXMgcGVyc29uIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgICAgICAgICB9ImFzc2lnbmVkUGVyc29uIjsNCiAgICAgICAgICAgICAgICAgIH0iYXNzaWdoZWRBdXRob3IiOw0KICAgICAgICAgICAgICAgIH0iYXV0aG9yIjsNCiAgICAgICAgICAgICAgfSJjZGFUZXh0MSI7DQogICAgICAgICAgICAgIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZTEgdGhlbiB7DQogICAgICAgICAgICAgICAgZWZmZWN0aXZlMSB3aGVyZSBlZmZlY3RpdmUxLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmUxLmhpZ2guZXhpc3RzKCkgdGhlbnsNCiAgICAgICAgICAgICAgICAgIGVmZmVjdGl2ZTEgIC0+IGNvbmRpdGlvbi5vbnNldD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZG9uc2V0IHRoZW4gSVZMVFNQZXJpb2QoZWZmZWN0aXZlMSxwZXJpb2RvbnNldCkib25zZXRwZXJpb2QiOw0KICAgICAgICAgICAgICAgICAgfSJlZiI7DQogICAgICAgICAgICAgICAgfSJlZmZlY3RpdmV0aW1lMSI7DQogICAgICAgICAgICAgIG9icy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gY29uZGl0aW9uLm9uc2V0ID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShlZmZlY3RpdmVUaW1lLCB2YWx1ZSkgIm9uc2V0RGF0ZVRpbWUiOw0KICAgICAgICAgICAgICBvYnMudmFsdWU6SU5UIGFzIGludC0+b2IudmFsdWU9KGludC52YWx1ZSkgInZhbHVlIjsNCiAgICAgICAgICAgICAgb2JzLnZhbHVlOkJMIGFzIGJvb2xlYW4gLT5vYi52YWx1ZT0oYm9vbGVhbi52YWx1ZSkiYm9vbGVhbiI7DQogICAgICAgICAgICAgIG9icy52YWx1ZTpTVCBhcyB2YWx1ZS0+b2IudmFsdWUgPWNyZWF0ZSgnc3RyaW5nJyksb2IudmFsdWU9ICh2YWx1ZS5kYXRhU3RyaW5nKSAidmFsdWUiOw0KICAgICAgICAgICAgICBvYnMudmFsdWU6Q0UgYXMgdmFsIHRoZW57DQogICAgICAgICAgICAgICAgdmFsLT5vYi52YWx1ZSA9Y3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBjZSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIHZhbC5vcmlnaW5hbFRleHQgYXMgb3JpZ2luYWxUZXh0IHRoZW57DQogICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsVGV4dC5yZWZlcmVuY2UgYXMgcmVmZXJlbmNlLT4gY2UudGV4dD1yZWZlcmVuY2U7DQogICAgICAgICAgICAgICAgICB9Im9yaWdpbmx0ZXh0IjsNCiAgICAgICAgICAgICAgICAgIHZhbCAtPiBjZS5jb2RpbmcgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgIHZhbC5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5IC0+IGNvZGluZy5kaXNwbGF5ID0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtVmVyc2lvbiBhcyB2ZXJzaW9uIC0+IGNvZGluZy52ZXJzaW9uID0gY2FzdCh2ZXJzaW9uLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICB9ImNvZGUiOw0KICAgICAgICAgICAgICAgICAgdmFsLnRyYW5zbGF0aW9uIGFzIHRyYW5zbGF0aW9uIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiBjb2RpbmcudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbi5xdWFsaWZpZXIgYXMgcXVhbGlmaWVyIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgcXVhbGlmaWVyLnZhbHVlIGFzIHZhbHVlIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIGFzIGNvZGUgLT4gY29kaW5nLmNvZGUgPSBjYXN0KGNvZGUsICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW0gYXMgc3lzdGVtIC0+IGNvZGluZy5zeXN0ZW0gPSB0cmFuc2xhdGUoc3lzdGVtLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmNvZGVTeXN0ZW1WZXJzaW9uIGFzIHZlcnNpb24gLT4gY29kaW5nLnZlcnNpb24gPSBjYXN0KHZlcnNpb24sICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB9InZhbHVlIjsNCiAgICAgICAgICAgICAgICAgICAgfSJxdWFsaWZpZXIiOw0KICAgICAgICAgICAgICAgICAgfSJ0cmFuc2xhdGlvbiI7DQogICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICB9InZhbCI7DQogICAgICAgICAgICAgIG9icy52YWx1ZTpDRCBhcyB2YWwgdGhlbnsNCiAgICAgICAgICAgICAgICB2YWwtPmNvbmRpdGlvbi5jb2RlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICB2YWwub3JpZ2luYWxUZXh0IC0+IGNlLnRleHQ7DQogICAgICAgICAgICAgICAgICAgICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgIHZhbC5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0gdHJhbnNsYXRlKHN5c3RlbSwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJyk7DQogICAgICAgICAgICAgICAgICAgICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7ICANCiAgICAgICAgICAgICAgICAgICB9IkNlIjsgDQogICAgICAgICAgICAgICAgfSJWYWx1ZSI7DQogICAgICAgICAgICAgIG9icy5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyaVJlbCB0aGVuIHsNCiAgICAgICAgICAgICAgICBlbnRyaVJlbCAtPiBjb25kaXRpb24uZXZpZGVuY2UgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIGV2aWRlbmNlIHRoZW4gew0KICAgICAgICAgICAgICAgIGVudHJpUmVsLm9ic2VydmF0aW9uIGFzIG9ic2VydmF0aW9uMiB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi5jb2RlIGFzIGNvZGUgdGhlbiB7DQogICAgICAgICAgICAgICAgICBjb2RlLmNvZGUgd2hlcmUgKGNvZGUuY29kZSA9ICc4OTI2MS0yJykgdGhlbiB7IA0KICAgICAgICAgICAgICAgICAgICBvYnMgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ09ic2VydmF0aW9uJykgYXMgb2JzZXJ2YXRpb24sIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBlbnRyaVJlbCAtPiBldmlkZW5jZS5kZXRhaWwgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT2JzZXJ2YXRpb24vJyArICVvYnNlcnZhdGlvbi5pZCkgInJlZiI7DQogICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi5jb2RlIC0+IG9ic2VydmF0aW9uLmNvZGU7DQogICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMiB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi0+b2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgICAgICAgICAgICAgICAgICAgfSJzdGF0dXNjb2RlIjsgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnRleHQgYXMgdGV4dCAtPiBvYnNlcnZhdGlvbi5ub3RlID0gY3JlYXRlKCdBbm5vdGF0aW9uJykgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIHRleHQucmVmZXJlbmNlIGFzIHJlZiAtPiBub3RlLnRleHQgPSAocmVmLnZhbHVlKSAidmFsIjsNCiAgICAgICAgICAgICAgICAgICAgfSJBbm5vbnRhdGlvbiI7IA0KICAgICAgICAgICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgICAgICAgICBvYnMtPm9ic2VydmF0aW9uLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nY29tcGxldGVkJykgLT4gb2Iuc3RhdHVzID0nZmluYWwnOw0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIuc3RhdHVzQ29kZSBhcyBzdGF0dXNjIHdoZXJlIChjb2RlPSdhY3RpdmUnKSAtPiBvYi5zdGF0dXMgPSdyZWdpc3RlcmVkJzsNCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnN0YXR1c0NvZGUgYXMgc3RhdHVzYyB3aGVyZSAoY29kZT0nYWJvcnRlZCcpIC0+IG9iLnN0YXR1cyA9J2NhbmNlbGxlZCc7DQogICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi5zdGF0dXNDb2RlIGFzIHN0YXR1c2Mgd2hlcmUgKGNvZGU9J3N1c3BlbmRlZCcpIC0+IG9iLnN0YXR1cyA9J3BhcnRpYWwnOw0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIudmFsdWU6SU5UIGFzIGludC0+b2JzZXJ2YXRpb24udmFsdWU9KGludC52YWx1ZSkgInZhbHVlIjsNCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnZhbHVlOkJMIGFzIGJvb2xlYW4gLT5vYnNlcnZhdGlvbi52YWx1ZT0oYm9vbGVhbi52YWx1ZSkiYm9vbGVhbiI7DQogICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi52YWx1ZTpTVCBhcyB2YWx1ZS0+b2JzZXJ2YXRpb24udmFsdWUgPWNyZWF0ZSgnc3RyaW5nJyksb2JzZXJ2YXRpb24udmFsdWU9ICh2YWx1ZS5kYXRhU3RyaW5nKSAidmFsdWUiOw0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIC0+IG9ic2VydmF0aW9uLmVmZmVjdGl2ZSA9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB2YWx1ZSB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZlVGltZSwgdmFsdWUpICJ2YWx1ZTIiOw0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi5lZmZlY3RpdmVUaW1lIGFzIGVmZi0+IG9ic2VydmF0aW9uLmVmZmVjdGl2ZT1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXJpb2QpOw0KICAgICAgICAgICAgICAgICAgICAgIH0id2hlcmUiOw0KICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIudmFsdWU6UFEgYXMgdmFsIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgdmFsLT5vYnNlcnZhdGlvbi52YWx1ZSA9IGNyZWF0ZSgnUXVhbnRpdHknKSBhcyBxdWFudGl0eSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbC52YWx1ZSBhcyB2YWx1ZS0+cXVhbnRpdHkudmFsdWUgPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbC51bml0IGFzIHVuaXQtPiBxdWFudGl0eS51bml0ID0gdW5pdCAidW5pdCI7DQogICAgICAgICAgICAgICAgICAgICAgfSJxdWFudGl0eSI7DQogICAgICAgICAgICAgICAgICAgIH0idmFsdWVRdWFudGl0eSI7DQogICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uMi52YWx1ZTpDRSBhcyB2YWwgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICB2YWwtPm9ic2VydmF0aW9uLnZhbHVlID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIGNlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsLm9yaWdpbmFsVGV4dCAtPiBjZS50ZXh0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsIC0+IGNlLmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZSBhcyBjb2RlIC0+IGNvZGluZy5jb2RlID0gY2FzdChjb2RlLCAnc3RyaW5nJyk7DQogICAgICAgICAgICAgICAgICAgICAgICB2YWwuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsgIA0KICAgICAgICAgICAgICAgICAgICAgIH0iQ2UiOyANCiAgICAgICAgICAgICAgICAgICAgfSJWYWx1ZSI7IA0KICAgICAgICAgICAgICAgICAgIH0ib2JzZXIiOw0KICAgICAgICAgICAgICAgICAgfSJ3aGVyZURlY29yc29DbGluaWNvIjsNCiAgICAgICAgICAgICAgICAgIH0iY29kZSI7DQogICAgICAgICAgICAgICAgfSJPYnNlcnZhdGlvbjIiOw0KICAgICAgICAgICAgICB9ImV2aWRlbmNlIjsNCiAgICAgICAgICAgfSJFbnRyeVJlbGF0aW9uc2hpcDEiOw0KICAgICAgICAgICBvYnMuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cmlSZWwgIHRoZW57DQogICAgICAgICAgICBlbnRyaVJlbC5vYnNlcnZhdGlvbiBhcyBvYnNlcnZhdGlvbjIgdGhlbiB7DQogICAgICAgICAgICAgIG9ic2VydmF0aW9uMi5jb2RlIGFzIGNvZGUgdGhlbiB7DQogICAgICAgICAgICAgICBjb2RlLmNvZGUgd2hlcmUgKGNvZGUuY29kZSA9JzMzOTk5LTQnKSB0aGVuew0KICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIgLT4gY29uZGl0aW9uLmNsaW5pY2FsU3RhdHVzID0gY3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBzdGF0dXMgdGhlbiB7DQogICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIudGV4dCBhcyB0ZXh0IHRoZW57DQogICAgICAgICAgICAgICAgICAgIHRleHQucmVmZXJlbmNlIGFzIHJlZnN0YXQgLT4gc3RhdHVzLnRleHQ9KHJlZnN0YXQudmFsdWUpInN0YXRyZWYiOw0KICAgICAgICAgICAgICAgICAgICB9InRleHRzdGF0IjsNCiAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjIgIC0+IHN0YXR1cy5jb2RpbmcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24yLnZhbHVlIGFzIHZhbHVlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlICB3aGVyZSAodmFsdWUuY29kZSA9ICdMQTE2NjY2LTInKS0+IGNvZGluZy5jb2RlID0gJ2FjdGl2ZSciYWN0aXZlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZSAgd2hlcmUgKHZhbHVlLmNvZGUgPSAnTEExODYzMi0yJyktPiBjb2RpbmcuY29kZSA9ICdpbmFjdGl2ZSciaW5hY3RpdmUiOw0KICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlU3lzdGVtIGFzIHN5c3RlbSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25kaXRpb24tY2xpbmljYWwnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT4gY29kaW5nLmRpc3BsYXkgPSBjYXN0KGRpc3BsYXksICdzdHJpbmcnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgfSJ2YWx1ZTEiOw0KICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgICAgIH0iY29kZSI7ICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgfSJ3aGVyZURlY29yc29DbGluaWNvIjsgDQogICAgICAgICAgICAgICB9ImNvZGVzdGF0dXMiOyAgDQogICAgICAgICAgICAgIH0ib2JzZXJ2YXRpb25zdGF0dXMiOyANCiAgICAgICAgICAgICB9ImVudHJ5cmVsYXRpb25zaGlwc3RhdHVzIjsgICAgICAgICAgIA0KICAgICAgICAgICB9ImNvbmRpdGlvbiI7DQogICAgICAgICAgfSAiODkyNjEtMiI7DQogICAgICAgIH0iZW50cnlvYnNlcnZhdGlvbjEiOw0KICAgIC8vQW5hbW5lc2kgRmFtaWxpYXJlLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIGVudHJ5MS5vcmdhbml6ZXIgYXMgb3JnYW5pemVyIHRoZW4gew0KICAgICAgICAgIG9yZ2FuaXplci5jb2RlIHdoZXJlIChjb2RlID0gJzEwMTU3LTYnKSAgdGhlbiB7DQogICAgICAgICAgICAgIG9yZ2FuaXplci0+YnVuZGxlLmVudHJ5IGFzIGU0LCBlNC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTQucmVzb3VyY2UgPSBjcmVhdGUoJ0ZhbWlseU1lbWJlckhpc3RvcnknKSBhcyBGYW1pbHlNZW1iZXJIaXN0b3J5LCBGYW1pbHlNZW1iZXJIaXN0b3J5LmlkID0gdXVpZCgpIGFzIHV1aWQ1LCAgZTQuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0ZhbWlseU1lbWJlckhpc3RvcnkvJywgdXVpZDUpLCByZXF1ZXN0LnVybCA9ICdGYW1pbHlNZW1iZXJIaXN0b3J5Jywgc2VjdGlvbi5lbnRyeSA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0ZhbWlseU1lbWJlckhpc3RvcnkvJyArICVGYW1pbHlNZW1iZXJIaXN0b3J5LmlkKSB0aGVuew0KICAgICAgICAgICAgICBvcmdhbml6ZXIuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmUgdGhlbiB7DQogICAgICAgICAgICAgICAgZWZmZWN0aXZlLnZhbHVlIGFzIGVmZi0+IEZhbWlseU1lbWJlckhpc3RvcnkuZGF0ZT0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShlZmYsIHZhbHVlKSAiZGF0ZSI7DQogICAgICAgICAgICAgIH0iZWZmZWN0aXZlIjsgDQogICAgICAgICAgICAgIG9yZ2FuaXplci0+RmFtaWx5TWVtYmVySGlzdG9yeS5wYXRpZW50PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgICAgb3JnYW5pemVyLnN1YmplY3QgYXMgc3ViamVjdCB0aGVuIHsNCiAgICAgICAgICAgICAgICAgIHN1YmplY3QucmVsYXRlZFN1YmplY3QgYXMgcmVsYXRlZFN1YmplY3QgdGhlbiB7DQogICAgICAgICAgICAgICAgICByZWxhdGVkU3ViamVjdC5jb2RlIC0+IEZhbWlseU1lbWJlckhpc3RvcnkucmVsYXRpb25zaGlwICJyZWxhdGlvbnNoaXAiOw0KICAgICAgICAgICAgICAgICAgcmVsYXRlZFN1YmplY3Quc3ViamVjdCBhcyBzdWJqZWN0IC0+IEZhbWlseU1lbWJlckhpc3Rvcnkuc2V4IGFzIHNleCB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmFkbWluaXN0cmF0aXZlR2VuZGVyQ29kZSBhcyBhZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUgLT4gc2V4LmNvZGluZyBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aXZlR2VuZGVyQ29kZS5jb2RlIGFzIGNvZGUtPiBjb2RpbmcuY29kZSA9IHRyYW5zbGF0ZShjb2RlLCAnI0FkbWluaXN0cmF0aXZlR2VuZGVyJywgJ2NvZGUnKSAiZ2VuZGVyIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RyYXRpdmVHZW5kZXJDb2RlLT4gY29kaW5nLnN5c3RlbSA9ICdodHRwOi8vaGw3Lm9yZy9maGlyL2FkbWluaXN0cmF0aXZlLWdlbmRlcicgInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICAgICAgICB9InN1YmplY3QxIjsNCiAgICAgICAgICAgICAgICAgIH0icmVsYXRlZFN1YmplY3QiOw0KICAgICAgICAgICAgICB9InN1YmplY3QiOw0KICAgICAgICAgICAgICAvLyBibG9jY28gTmFycmF0aXZvDQogICAgICAgICAgICAgIHNvdHRvc2VjdGlvbi50ZXh0IGFzIGNkYVRleHQxIC0+IEZhbWlseU1lbWJlckhpc3Rvcnkubm90ZSBhcyBub3RlIHRoZW4gew0KICAgICAgICAgICAgICAgIGNkYVRleHQxIGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgICAgc290dG9zZWN0aW9uLmF1dGhvciBhcyBhdXRob3JzIHRoZW4gew0KICAgICAgICAgICAgICAgICAgYXV0aG9ycy50aW1lIGFzIHRpbWUgLT4gbm90ZS50aW1lID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZSh0aW1lLCB2YWx1ZSkgInRpbWVBdXRob3IiOw0KICAgICAgICAgICAgICAgICAgYXV0aG9ycy5hc3NpZ25lZEF1dGhvciBhcyBhc3NpZ25lZEF1dGhvciAtPiBidW5kbGUuZW50cnkgYXMgZTcsIGU3LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICAgZTcucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuew0KICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvQW5hbW5lc2kvYXV0aG9yJyJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDcsICBlNy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQ3KSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkNyksIG5vdGUuYXV0aG9yID1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCk7DQogICAgICAgICAgICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmFzc2lnbmVkUGVyc29uIGFzIHBlcnNvbiB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBwZXJzb24ubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgICAgICAgICAgICAgfSJhc3NpZ25lZFBlcnNvbiI7DQogICAgICAgICAgICAgICAgICB9ImFzc2lnaGVkQXV0aG9yIjsNCiAgICAgICAgICAgICAgICB9ImF1dGhvciI7DQogICAgICAgICAgICAgIH0iY2RhVGV4dDEiOw0KICAgICAgICAgICAgICBvcmdhbml6ZXIuY29tcG9uZW50IGFzIGNvbXBvbmVudCAtPiBGYW1pbHlNZW1iZXJIaXN0b3J5LmNvbmRpdGlvbiBhcyBjb25kaXRpb24gdGhlbnsNCiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5vYnNlcnZhdGlvbiBhcyBvYnNlcnZhdGlvbiB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLmNvZGUgLT4gY29uZGl0aW9uLmNvZGUgImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLnRleHQgYXMgdGV4dCAtPiBGYW1pbHlNZW1iZXJIaXN0b3J5Lm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LnJlZmVyZW5jZSBhcyByZWZlcmVuY2UgLT4gbm90ZS50ZXh0ID0gKHJlZmVyZW5jZS52YWx1ZSkgInZhbHVlIjsNCiAgICAgICAgICAgICAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24uc3RhdHVzQ29kZSAtPiBGYW1pbHlNZW1iZXJIaXN0b3J5LnN0YXR1czsNCiAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi52YWx1ZSAtPiBjb25kaXRpb24ub3V0Y29tZSAiY29kZWFibGUiOw0KICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5UmVsYXRpb25zaGlwIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgZW50cnlSZWxhdGlvbnNoaXAub2JzZXJ2YXRpb24gYXMgb2Jzc2VydmF0aW9uMSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNzZXJ2YXRpb24xLmNvZGUgYXMgY29kZSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZS5jb2RlIHdoZXJlIChjb2RlLmNvZGUgPSczNTI2Ny00JykgdGhlbnsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgb2Jzc2VydmF0aW9uMS52YWx1ZSBhcyB2YWx1ZSAtPiBjb25kaXRpb24ub25zZXQgPSBjcmVhdGUoJ0FnZScpIGFzIEFnZSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgYXMgdmFsdWVBZ2UgLT4gQWdlLnZhbHVlID0gdmFsdWVBZ2UgImFnZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnVuaXQgYXMgdW5pdCAtPiBBZ2UuY29kZSA9IHVuaXQgInVuaXQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS51bml0IGFzIHVuaXQgLT4gQWdlLnVuaXQgPSB1bml0ICJ1bml0IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gQWdlLnN5c3RlbSA9ICdodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnJyAic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gInZhbHVlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSJpbnNvcmdlbnphIjsNCiAgICAgICAgICAgICAgICAgICAgICB9ImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgIG9ic3NlcnZhdGlvbjEuY29kZSBhcyBjb2RlIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLmNvZGUgd2hlcmUgKGNvZGUuY29kZSA9JzM5MDE2LTEnKSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNzZXJ2YXRpb24xLnZhbHVlIGFzIHZhbHVlIC0+IEZhbWlseU1lbWJlckhpc3RvcnkuZGVjZWFzZWQgPSBjcmVhdGUoJ0FnZScpIGFzIEFnZSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgYXMgdmFsdWVBZ2UgLT4gQWdlLnZhbHVlID0gdmFsdWVBZ2UgImFnZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnVuaXQgYXMgdW5pdCAtPiBBZ2UuY29kZSA9IHVuaXQgInVuaXQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS51bml0IGFzIHVuaXQgLT4gQWdlLnVuaXQgPSB1bml0ICJ1bml0IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgLT4gQWdlLnN5c3RlbSA9ICdodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnJyAic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICJ2YWx1ZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJkZWNlYXNlZCI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICB9ImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgIH0ib2JzZXIiOw0KICAgICAgICAgICAgICAgICAgICAgIH0iRW50cnlSZWwiOw0KICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmF0aW9uIHdoZXJlIG9ic2VydmF0aW9uLmVmZmVjdGl2ZVRpbWUuZXhpc3RzKCkgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZVRpbWUgLT4gRmFtaWx5TWVtYmVySGlzdG9yeS5jb25kaXRpb24gPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIGNvbmRpdGlvbiB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0aXZlVGltZSAtPiBjb25kaXRpb24ub25zZXQgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0aXZlVGltZSAtPiBwZXJpb2Quc3RhcnQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgc3RhcnQgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsc3RhcnQpICJ2YWwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ImVmZnQiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbi5jb2RlIC0+IGNvbmRpdGlvbi5jb2RlICJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb24udmFsdWUgLT4gY29uZGl0aW9uLm91dGNvbWUgImNvZGVhYmxlIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ImVmZnR0ZW1wIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0iY29udCI7DQogICAgICAgICAgICAgICAgICAgfSJvYnNlcnZhdGlvbkNvbmRpdGlvbiI7DQogICAgICAgICAgICAgICAgIH0iY29tcG9uZW50IjsNCiAgICAgICAgICAgICAgfSJvcmdhbml6ZXIiOw0KICAgICAgICAgICAgfSIxMDE1Ny02IjsNCiAgICAgICAgICB9Im9ic2VydmF0aW9uMSI7DQogICAgICAgfSJzdWJzZWN0aW9uMSI7DQogICAgfSIxMTMyOS0wIjsNCg0KICAgICAgICAvL0VzYW1lIE9iaWV0dGl2byBOYXJyYXRpdmEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBzb3R0b3NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzI5NTQ1LTEnKSAtPiBzZWN0aW9uLmNvZGU7DQogICAgICAgIHNvdHRvc2VjdGlvbi5jb2RlIGFzIGNvZGUxIHdoZXJlKGNvZGUgPSAnMjk1NDUtMScpICB0aGVuIHsNCiAgICAgICAgICBzb3R0b3NlY3Rpb24udGl0bGUgYXMgdCAtPiBzZWN0aW9uLnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogICAgICAgICAgc290dG9zZWN0aW9uLnRleHQgYXMgY2RhVGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTgsIGU4LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlOC5yZXNvdXJjZSA9IGNyZWF0ZSgnT2JzZXJ2YXRpb24nKSBhcyBvYnNlcnZhdGlvbiwgIG9ic2VydmF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQ4LCAgZTguZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycsIHV1aWQ4KSwgcmVxdWVzdC51cmwgPSAnT2JzZXJ2YXRpb24nLCBzZWN0aW9uLmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09ic2VydmF0aW9uLycgKyAlb2JzZXJ2YXRpb24uaWQpIHRoZW4gew0KICAgICAgICAgICAgY2RhVGV4dCAtPiBvYnNlcnZhdGlvbi5zdWJqZWN0PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50LmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgIGNkYVRleHQgLT4gb2JzZXJ2YXRpb24uZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuYy5pZCkgInJlZmVyZW5jZSI7IA0KICAgICAgICAgICAgc290dG9zZWN0aW9uLmNvZGUgLT4gb2JzZXJ2YXRpb24uY29kZTsNCiAgICAgICAgICAgIHNvdHRvc2VjdGlvbiB3aGVyZSBvYnNlcnZhdGlvbi5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICBzb3R0b3NlY3Rpb24gLT4gb2JzZXJ2YXRpb24uc3RhdHVzID0nZmluYWwnInN0YXR1cyI7DQogICAgICAgICAgICB9InN0YXR1c2NvZGUiOw0KICAgICAgICAgICAgY2RhVGV4dCAtPiBvYnNlcnZhdGlvbi5ub3RlIGFzIG5vdGUgdGhlbnsNCiAgICAgICAgICAgICAgY2RhVGV4dCBhcyB0IC0+bm90ZS50ZXh0ID10ICJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgICBzb3R0b3NlY3Rpb24uYXV0aG9yIGFzIGF1dGhvcnMgdGhlbiB7DQogICAgICAgICAgICAgICAgYXV0aG9ycy50aW1lIGFzIHRpbWUgLT4gbm90ZS50aW1lID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZSh0aW1lLCB2YWx1ZSkgInRpbWVBdXRob3IiOw0KICAgICAgICAgICAgICAgIGF1dGhvcnMuYXNzaWduZWRBdXRob3IgYXMgYXNzaWduZWRBdXRob3IgLT4gYnVuZGxlLmVudHJ5IGFzIGU5LCBlOS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGU5LnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIgdGhlbnsNCiAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvciAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvciAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9Fc2FtZU9iaWV0dGl2by9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICB9Im1ldGEiOw0KICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQ5LCAgZTkuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkOSksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDkpLCBub3RlLmF1dGhvciA9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXRvcmUiOw0KICAgICAgICAgICAgICAgICAgICB9InIiOw0KICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5hc3NpZ25lZFBlcnNvbiBhcyBwZXJzb24gdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgICAgICAgfSJhc3NpZ25lZFBlcnNvbiI7DQogICAgICAgICAgICAgICAgfSJhc3NpZ2hlZEF1dGhvciI7DQogICAgICAgICAgICAgIH0iYXV0aG9yIjsNCiAgICAgICAgICAgIH0icmVmZXJlbmNlIjsNCiAgICAgICAgICB9ImNkYVRleHQiOw0KICAgICAgICB9ImNvbmRpemlvbmVlc2FtZU9iaWV0dGl2byI7DQoNCiAgICAgICAgLy9UZXJhcGlhIEZhcm1hY29sb2dpY2EgYWxsJ2luZ3Jlc3NvIE5hcnJhdGl2YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICBzb3R0b3NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzQyMzQ2LTcnKSAtPiBzZWN0aW9uLmNvZGU7IA0KICAgICAgICBzb3R0b3NlY3Rpb24uY29kZSBhcyBjb2RlMSB3aGVyZShjb2RlID0gJzQyMzQ2LTcnKSAgdGhlbiB7DQogICAgICAgIHNvdHRvc2VjdGlvbi50aXRsZSBhcyB0IC0+IHNlY3Rpb24udGl0bGUgPSAodC5kYXRhU3RyaW5nKTsNCiAgICAgICAgICBzb3R0b3NlY3Rpb24udGV4dCBhcyBjZGFUZXh0IC0+YnVuZGxlLmVudHJ5IGFzIGUxMCwgZTEwLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMTAucmVzb3VyY2UgPSBjcmVhdGUoJ01lZGljYXRpb25TdGF0ZW1lbnQnKSBhcyBtZWRpY1N0YXRlbWVudCwgIG1lZGljU3RhdGVtZW50LmlkID0gdXVpZCgpIGFzIHV1aWQxMCwgIGUxMC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvTWVkaWNhdGlvblN0YXRlbWVudC8nLCB1dWlkMTApLCByZXF1ZXN0LnVybCA9ICdNZWRpY2F0aW9uU3RhdGVtZW50Jywgc2VjdGlvbi5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9NZWRpY2F0aW9uU3RhdGVtZW50LycgKyAlbWVkaWNTdGF0ZW1lbnQuaWQpIHRoZW4gew0KICAgICAgICAgIGNkYVRleHQgLT4gbWVkaWNTdGF0ZW1lbnQuc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgIHNvdHRvc2VjdGlvbiB3aGVyZSBtZWRpY1N0YXRlbWVudC5zdGF0dXNDb2RlLmV4aXN0cygpLm5vdCgpIHRoZW4gew0KICAgICAgICAgICAgICBzb3R0b3NlY3Rpb24tPm1lZGljU3RhdGVtZW50LnN0YXR1cyA9J2NvbXBsZXRlZCcic3RhdHVzIjsNCiAgICAgICAgICAgIH0ic3RhdHVzY29kZSI7DQogICAgICAgICAgICBjZGFUZXh0IC0+ICBtZWRpY1N0YXRlbWVudC5tZWRpY2F0aW9uID1jcmVhdGUoJ0NvZGVhYmxlQ29uY2VwdCcpIGFzIG1lZGljYXRpb24gdGhlbiB7DQogICAgICAgICAgICAgIGNkYVRleHQgYXMgdHh0IC0+IG1lZGljYXRpb24udGV4dD10eHQgInRleHQiOw0KICAgICAgICAgICAgfSJtZWRpY2F0aW9uIjsNCiAgICAgICAgICAgIGNkYVRleHQgLT4gbWVkaWNTdGF0ZW1lbnQubm90ZSBhcyBub3RlIHRoZW57DQogICAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgICAgc290dG9zZWN0aW9uLmF1dGhvciBhcyBhdXRob3JzIHRoZW4gew0KICAgICAgICAgICAgICAgIGF1dGhvcnMudGltZSBhcyB0aW1lIC0+IG5vdGUudGltZSA9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyB2YWx1ZSB0aGVuIFRTRGF0ZVRpbWUodGltZSwgdmFsdWUpICJ0aW1lQXV0aG9yIjsNCiAgICAgICAgICAgICAgICBhdXRob3JzLmFzc2lnbmVkQXV0aG9yIGFzIGFzc2lnbmVkQXV0aG9yIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMTEsIGUxMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyIHRoZW57DQogICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3ItPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvVGVyYXBpYUZhcm1hY29sb2dpY2FJbmdyZXNzby9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICB9Im1ldGEiOw0KICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0Ow0KICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQxMSwgIGUxMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQxMSksIHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXIvJywgdXVpZDExKSwgbm90ZS5hdXRob3IgPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKTsNCiAgICAgICAgICAgICAgICAgICAgfSJyIjsNCiAgICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOw0KICAgICAgICAgICAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuYXNzaWduZWRQZXJzb24gYXMgcGVyc29uIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBwZXJzb24ubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsNCiAgICAgICAgICAgICAgICAgIH0iYXNzaWduZWRQZXJzb24iOw0KICAgICAgICAgICAgICAgIH0iYXNzaWdoZWRBdXRob3IiOw0KICAgICAgICAgICAgICB9ImF1dGhvciI7DQogICAgICAgICAgICB9InJlZmVyZW5jZSI7DQogICAgICAgICAgfSJjZGFUZXh0IjsNCiAgICAgICAgfSJjb25kaXppb25ldGVyYXBpYWluZ3Jlc3NvIjsNCg0KICAgICAgICAvL0FsbGVyZ2llDQogICAgICAgIHNvdHRvc2VjdGlvbi5jb2RlIHdoZXJlKGNvZGUgPSAnNDg3NjUtMicpIC0+IHNlY3Rpb24uY29kZTsNCiAgICAgICAgc290dG9zZWN0aW9uLmNvZGUgYXMgY29kZTEgd2hlcmUoY29kZSA9ICc0ODc2NS0yJykgIHRoZW4gew0KICAgICAgICAgIHNvdHRvc2VjdGlvbi50aXRsZSBhcyB0LT4gc2VjdGlvbi50aXRsZT0gKHQuZGF0YVN0cmluZyk7DQogICAgICAgICAgLy8gQWxsZXJnaWEgTmFycmF0aXZhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAgIHNyYyB3aGVyZSBzb3R0b3NlY3Rpb24uZW50cnkuZXhpc3RzKCkubm90KCkgdGhlbiB7DQogICAgICAgICAgICBzb3R0b3NlY3Rpb24udGl0bGUgYXMgdC0+IHNlY3Rpb24udGl0bGU9ICh0LmRhdGFTdHJpbmcpOw0KICAgICAgICAgICAgc290dG9zZWN0aW9uLnRleHQgYXMgY2RhVGV4dCAtPiBidW5kbGUuZW50cnkgYXMgZTgsIGU4LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlOC5yZXNvdXJjZSA9IGNyZWF0ZSgnQWxsZXJneUludG9sZXJhbmNlJykgYXMgQWxsZXJneUludG9sZXJhbmNlLCAgQWxsZXJneUludG9sZXJhbmNlLmlkID0gdXVpZCgpIGFzIHV1aWQ4LCAgZTguZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0FsbGVyZ3lJbnRvbGVyYW5jZS8nLCB1dWlkOCksIHJlcXVlc3QudXJsID0gJ0FsbGVyZ3lJbnRvbGVyYW5jZScsIHNlY3Rpb24uZW50cnkgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvQWxsZXJneUludG9sZXJhbmNlLycgKyAlQWxsZXJneUludG9sZXJhbmNlLmlkKSB0aGVuIHsNCiAgICAgICAgICAgICAgY2RhVGV4dCAtPiBBbGxlcmd5SW50b2xlcmFuY2UucGF0aWVudD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgIGNkYVRleHQgLT4gQWxsZXJneUludG9sZXJhbmNlLmVuY291bnRlcj1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmMuaWQpICJyZWZlcmVuY2UiOyANCiAgICAgICAgICAgICAgDQogICAgICAgICAgICAgIGNkYVRleHQgLT4gQWxsZXJneUludG9sZXJhbmNlLmNsaW5pY2FsU3RhdHVzID0gY3JlYXRlKCdDb2RlYWJsZUNvbmNlcHQnKSBhcyBzdGF0dXMgdGhlbiB7DQogICAgICAgICAgICAgICAgY2RhVGV4dCAgLT4gc3RhdHVzLmNvZGluZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW57DQogICAgICAgICAgICAgICAgICBjZGFUZXh0IC0+IGNvZGluZy5jb2RlID0gJ2FjdGl2ZSciYWN0aXZlIjsNCiAgICAgICAgICAgICAgICAgIGNkYVRleHQgIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2FsbGVyZ3lpbnRvbGVyYW5jZS1jbGluaWNhbCcic3lzdGVtIjsNCiAgICAgICAgICAgICAgICAgIGNkYVRleHQgIC0+IGNvZGluZy5kaXNwbGF5ID0gJ2FjdGl2ZSciYWN0aXZlIjsNCiAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICB9ImNsaW5pY2FsU3RhdHVzIjsNCiAgICAgICAgICAgICAgY2RhVGV4dCAtPiBBbGxlcmd5SW50b2xlcmFuY2Uubm90ZSBhcyBub3RlIHRoZW57DQogICAgICAgICAgICAgIGNkYVRleHQgYXMgdCAtPm5vdGUudGV4dCA9dCAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgICAgICBzb3R0b3NlY3Rpb24uYXV0aG9yIGFzIGF1dGhvcnMgdGhlbiB7DQogICAgICAgICAgICAgICAgICBhdXRob3JzLnRpbWUgYXMgdGltZSAtPiBub3RlLnRpbWUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKHRpbWUsIHZhbHVlKSAidGltZUF1dGhvciI7DQogICAgICAgICAgICAgICAgICBhdXRob3JzLmFzc2lnbmVkQXV0aG9yIGFzIGFzc2lnbmVkQXV0aG9yIC0+IGJ1bmRsZS5lbnRyeSBhcyBlOSwgZTkucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlOS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyIHRoZW57DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7DQogICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvciAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYm9keS9Fc2FtZU9iaWV0dGl2by9hdXRob3InImNvZGUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICAgICAgfSJtZXRhIjsNCiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCBhLmRpc3BsYXkgPSBzOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkOSwgIGU5LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDkpLCByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyLycsIHV1aWQ5KSwgbm90ZS5hdXRob3IgPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSAiYXV0b3JlIjsNCiAgICAgICAgICAgICAgICAgICAgICB9InIiOw0KICAgICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOw0KICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsNCiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuYXNzaWduZWRQZXJzb24gYXMgcGVyc29uIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgICAgICAgICB9ImFzc2lnbmVkUGVyc29uIjsNCiAgICAgICAgICAgICAgICAgIH0iYXNzaWdoZWRBdXRob3IiOw0KICAgICAgICAgICAgICAgIH0iYXV0aG9yIjsNCiAgICAgICAgICAgICAgfSJyZWZlcmVuY2UiOw0KICAgICAgICAgICAgfSJjZGFUZXh0IjsNCiAgICAgICAgICB9IndoZXJlIjsNCiAgICAgICAgICAgLy8gQWxsZXJnaWEgU3RydXR0dXJhdGEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgICAgc290dG9zZWN0aW9uLmVudHJ5IGFzIGVudHJ5MSAtPiBidW5kbGUuZW50cnkgYXMgZTEyLCBlMTIucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICAgZTEyLnJlc291cmNlID0gY3JlYXRlKCdBbGxlcmd5SW50b2xlcmFuY2UnKSBhcyBhbGxlcmd5LCAgYWxsZXJneS5pZCA9IHV1aWQoKSBhcyB1dWlkMTIsICBlMTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0FsbGVyZ3lJbnRvbGVyYW5jZS8nLCB1dWlkMTIpLCByZXF1ZXN0LnVybCA9ICdBbGxlcmd5SW50b2xlcmFuY2UnICxzZWN0aW9uLmVudHJ5ICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0FsbGVyZ3lJbnRvbGVyYW5jZS8nICsgJWFsbGVyZ3kuaWQpIHRoZW4gew0KICAgICAgICAgICAgc3JjIC0+IGFsbGVyZ3kucGF0aWVudD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICBzcmMgLT4gYWxsZXJneS5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsNCiAgICAgICAgICAgIGVudHJ5MS5hY3QgYXMgYWN0YWxsaW50IHRoZW4gew0KICAgICAgICAgICAgICBhY3RhbGxpbnQuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIC0+IGFsbGVyZ3kub25zZXQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKGVmZmVjdGl2ZVRpbWUsIHZhbHVlKSAib25zZXREYXRlVGltZSI7DQogICAgICAgICAgICAgIGFjdGFsbGludCB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkgdGhlbiB7DQogICAgICAgICAgICAgICAgYWN0YWxsaW50LmVmZmVjdGl2ZVRpbWUgYXMgZWZmLT4gYWxsZXJneS5vbnNldD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIElWTFRTUGVyaW9kKGVmZixwZXJpb2QpIm9uc2V0UGVyaW9kIjsNCiAgICAgICAgICAgICAgfSJ3aGVyZSI7DQogICAgICAgICAgICAgLy9ub3RlDQogICAgICAgICAgICAgIHNvdHRvc2VjdGlvbi50ZXh0IGFzIGNkYVRleHQxIC0+IGFsbGVyZ3kubm90ZSBhcyBub3RlIHRoZW4gew0KICAgICAgICAgICAgICAgIGNkYVRleHQxIGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgICAgc290dG9zZWN0aW9uLmF1dGhvciBhcyBhdXRob3JzIHRoZW4gew0KICAgICAgICAgICAgICAgICAgYXV0aG9ycy50aW1lIGFzIHRpbWUgLT4gbm90ZS50aW1lID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZSh0aW1lLCB2YWx1ZSkgInRpbWVBdXRob3IiOw0KICAgICAgICAgICAgICAgICAgYXV0aG9ycy5hc3NpZ25lZEF1dGhvciBhcyBhc3NpZ25lZEF1dGhvciAtPiBidW5kbGUuZW50cnkgYXMgZTEzLCBlMTMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMTMucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuew0KICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2JvZHkvQWxsZXJnaWUvYXV0aG9yJyJjb2RlIjsNCiAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7DQogICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOw0KICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+IGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgYS5kaXNwbGF5ID0gczsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDEzLCAgZTEzLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDEzKSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMTMpLCBub3RlLmF1dGhvciA9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpOw0KICAgICAgICAgICAgICAgICAgICAgIH0iciI7DQogICAgICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsNCiAgICAgICAgICAgICAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOw0KICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5hc3NpZ25lZFBlcnNvbiBhcyBwZXJzb24gdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgcGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7DQogICAgICAgICAgICAgICAgICAgIH0iYXNzaWduZWRQZXJzb24iOw0KICAgICAgICAgICAgICAgICAgfSJhc3NpZ2hlZEF1dGhvciI7DQogICAgICAgICAgICAgICAgfSJhdXRob3IiOw0KICAgICAgICAgICAgICB9ImNkYVRleHQxIjsNCiAgICAgICAgICAgICAgYWN0YWxsaW50LmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5YWN0IHRoZW4gew0KICAgICAgICAgICAgICAgIGVudHJ5YWN0Lm9ic2VydmF0aW9uIGFzIGVudHJ5b2JzIHRoZW4gew0KICAgICAgICAgICAgICAgICAgZW50cnlvYnMudmFsdWUgYXMgY29kZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICBjb2RlLmNvZGUgYXMgY29kZTEtPiBhbGxlcmd5LnR5cGUgPSB0cmFuc2xhdGUoY29kZTEsJyNBbGxlcmd5VHlwZU1hcCcsJ2NvZGUnKSAidHlwZSI7DQogICAgICAgICAgICAgICAgICAgIGNvZGUuY29kZSBhcyBjb2RlMiAtPiBhbGxlcmd5LmNhdGVnb3J5ID0gdHJhbnNsYXRlKGNvZGUyLCcjQWxsZXJneUNhdGVnb3J5TWFwJywnY29kZScpICJjYXRlZ29yeSI7ICANCiAgICAgICAgICAgICAgICAgIH0iY29kZSI7DQogICAgICAgICAgICAgICAgICBlbnRyeW9icy5wYXJ0aWNpcGFudCBhcyBwYXJ0aWMgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIHBhcnRpYy5wYXJ0aWNpcGFudFJvbGUgYXMgcHJhdFJvbGUgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgcHJhdFJvbGUucGxheWluZ0VudGl0eSBhcyBwcmF0ZW50IHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgcHJhdGVudCAtPiBhbGxlcmd5LnJlYWN0aW9uID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZWFjdGlvbiB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICBwcmF0ZW50LmNvZGUgLT4gcmVhY3Rpb24uc3Vic3RhbmNlICJzdWJzIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnlvYnMuZW50cnlSZWxhdGlvbnNoaXAgYXMgZW50cnlvYnMxIHdoZXJlICh0eXBlQ29kZT0nTUZTVCcpIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5b2JzMS5vYnNlcnZhdGlvbiBhcyBlbnRvYnMgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRvYnMuZWZmZWN0aXZlVGltZSBhcyBlZmYgIHRoZW57DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZi5sb3cgYXMgbCAtPiByZWFjdGlvbi5vbnNldCA9Y3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShsLHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iZWZmIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudG9icy52YWx1ZS0+cmVhY3Rpb24ubWFuaWZlc3RhdGlvbiAibWFuaWZlc3QiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iZW50cnlvYnNlcnZhdGlvbiI7DQogICAgICAgICAgICAgICAgICAgICAgICAgIH0iZW50cnlSZWxhdGlvbnNoaXAiOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSJyZWFjdGlvbiI7ICANCiAgICAgICAgICAgICAgICAgICAgICB9InBsYXlpbmdFbnRpdHkiOw0KICAgICAgICAgICAgICAgICAgICB9InBhcnRpY2lwYW50Um9sZSI7DQogICAgICAgICAgICAgICAgICB9InBhcnRpY2lwYW50IjsNCiAgICAgICAgICAgICAgICAgIGVudHJ5b2JzLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5b2JzMiB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgZW50cnlvYnMyLm9ic2VydmF0aW9uIGFzIGVudG9icyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBlbnRvYnMuY29kZSBhcyBjb2RlIHdoZXJlIChjb2RlPSdTRVYnKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVudG9icy52YWx1ZSBhcyB2YWx1ZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIHdoZXJlKHZhbHVlLmNvZGUgPSAnTScpIC0+YWxsZXJneS5jcml0aWNhbGl0eSA9ICd1bmFibGUtdG8tYXNzZXNzJyJhY3RpdmUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIHdoZXJlKHZhbHVlLmNvZGUgPSAnTCcpIC0+YWxsZXJneS5jcml0aWNhbGl0eSA9ICdsb3cnImFjdGl2ZSI7IA0KICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlIHdoZXJlKHZhbHVlLmNvZGUgPSAnSCcpIC0+YWxsZXJneS5jcml0aWNhbGl0eSA9ICdoaWdoJyJhY3RpdmUiOyANCiAgICAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUiOw0KICAgICAgICAgICAgICAgICAgICAgIH0ic2V2ZXJpdHkiOw0KICAgICAgICAgICAgICAgICAgICB9ImVudHJ5b2JzZXJ2YXRpb24yIjsNCiAgICAgICAgICAgICAgICAgIH0iZW50cnlyZWxhdGlvbnNoaXAyIjsNCiAgICAgICAgICAgICAgICAgIGVudHJ5b2JzLmVudHJ5UmVsYXRpb25zaGlwIGFzIGVudHJ5b2JzMyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgZW50cnlvYnMzLm9ic2VydmF0aW9uIGFzIGVudG9icyB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBlbnRvYnMuY29kZSBhcyBjb2RlIHdoZXJlIChjb2RlPSczMzk5OS00JykgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICBlbnRvYnMgLT4gYWxsZXJneS5jbGluaWNhbFN0YXR1cyA9IGNyZWF0ZSgnQ29kZWFibGVDb25jZXB0JykgYXMgc3RhdHVzIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRvYnMgIC0+IHN0YXR1cy5jb2RpbmcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudG9icy52YWx1ZSBhcyB2YWx1ZSB0aGVuew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZSAgd2hlcmUgKHZhbHVlLmNvZGUgPSAnTEExNjY2Ni0yJyktPiBjb2RpbmcuY29kZSA9ICdhY3RpdmUnImFjdGl2ZSI7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jb2RlICB3aGVyZSAodmFsdWUuY29kZSA9ICdMQTE4NjMyLTInKS0+IGNvZGluZy5jb2RlID0gJ2luYWN0aXZlJyJhY3RpdmUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vYWxsZXJneWludG9sZXJhbmNlLWNsaW5pY2FsJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiBjb2RpbmcuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0idmFsdWUxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSJjbGluaWNhbFN0YXR1cyI7DQogICAgICAgICAgICAgICAgICAgICAgfSIzMzk5OS00IjsNCiAgICAgICAgICAgICAgICAgICAgfSJlbnRyeW9ic2VydmF0aW9uMyI7DQogICAgICAgICAgICAgICAgICB9ImVudHJ5cmVsYXRpb25zaGlwMyI7DQogICAgICAgICAgICAgICAgICBlbnRyeW9icy5lbnRyeVJlbGF0aW9uc2hpcCBhcyBlbnRyeW9iczQgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGVudHJ5b2JzNC5hY3QgYXMgZW50YWN0IHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGVudGFjdC50ZXh0IGFzIGFjdGV4dCB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGV4dC5yZWZlcmVuY2UgYXMgcmVmdHh0IC0+IGFsbGVyZ3kubm90ZSA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgbm90ZSAgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnR4dCBhcyByZWYtPm5vdGUudGV4dD0gKHJlZi52YWx1ZSkgIm5vdHh0IjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0ibm90ZXR4dCI7DQogICAgICAgICAgICAgICAgICAgICAgfSJ0eHRhY3QiOw0KICAgICAgICAgICAgICAgICAgICB9ImVudHJ5YWN0MSI7DQogICAgICAgICAgICAgICAgICB9ImVudHJ5cmVsYXRpb25zaGk0IjsNCiAgICAgICAgICAgICAgICB9ImVudHJ5b2JzZXJ2YXRpb24iOw0KICAgICAgICAgICAgICB9ImVudHJ5cmVsYXRpb25zaGlwYWN0IjsNCiAgICAgICAgICAgIH0iZW50cnlhY3QyIjsNCiAgICAgICAgICB9ImFsbGVyZ3kiOw0KICAgICAgICB9ImNvbmRpemlvbmVhbGxlcmdpZSI7ICANCg0KICAgICAgICAvL1Byb2JsZW1pIGFwZXJ0aQ0KICAgICAgICBzb3R0b3NlY3Rpb24uY29kZSB3aGVyZShjb2RlID0gJzExNDUwLTQnKSAtPiBzZWN0aW9uLmNvZGU7DQogICAgICAgIHNvdHRvc2VjdGlvbi5jb2RlIGFzIGNvZGUxIHdoZXJlKGNvZGUgPSAnMTE0NTAtNCcpICB0aGVuIHsNCiAgICAgICAgICBzb3R0b3NlY3Rpb24udGl0bGUgYXMgdCAtPiBzZWN0aW9uLnRpdGxlID0gKHQuZGF0YVN0cmluZyk7DQogICAgICAgICAgc290dG9zZWN0aW9uLnRleHQgYXMgY2RhVGV4dCAtPmJ1bmRsZS5lbnRyeSBhcyBlMTQsIGUxNC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTE0LnJlc291cmNlID0gY3JlYXRlKCdDb25kaXRpb24nKSBhcyBjb25kaXRpb24sICBjb25kaXRpb24uaWQgPSB1dWlkKCkgYXMgdXVpZDE0LCAgZTE0LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Db25kaXRpb24vJywgdXVpZDE0KSwgcmVxdWVzdC51cmwgPSAnQ29uZGl0aW9uJywgc2VjdGlvbi5lbnRyeSAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Db25kaXRpb24vJyArICVjb25kaXRpb24uaWQpIHRoZW4gew0KICAgICAgICAgICAgY2RhVGV4dCAtPiBjb25kaXRpb24uc3ViamVjdD1jcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QYXRpZW50LycgKyAlcGF0aWVudC5pZCkgInJlZmVyZW5jZSI7DQogICAgICAgICAgICBjZGFUZXh0IC0+IGNvbmRpdGlvbi5lbmNvdW50ZXI9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jLmlkKSAicmVmZXJlbmNlIjsgDQogICAgICAgICAgICBzb3R0b3NlY3Rpb24uY29kZSAtPiBjb25kaXRpb24uY29kZTsNCiAgICAgICAgICAgIGNkYVRleHQgLT4gY29uZGl0aW9uLm5vdGUgYXMgbm90ZSB0aGVuew0KICAgICAgICAgICAgICBjZGFUZXh0IGFzIHQgLT5ub3RlLnRleHQgPXQgInJlZmVyZW5jZSI7DQogICAgICAgICAgICAgIHNvdHRvc2VjdGlvbi5hdXRob3IgYXMgYXV0aG9ycyB0aGVuIHsNCiAgICAgICAgICAgICAgICBhdXRob3JzLnRpbWUgYXMgdGltZSAtPiBub3RlLnRpbWUgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgdmFsdWUgdGhlbiBUU0RhdGVUaW1lKHRpbWUsIHZhbHVlKSAidGltZUF1dGhvciI7DQogICAgICAgICAgICAgICAgYXV0aG9ycy5hc3NpZ25lZEF1dGhvciBhcyBhc3NpZ25lZEF1dGhvciAtPiBidW5kbGUuZW50cnkgYXMgZTE1LCBlMTUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgICBlMTUucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuew0KICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3ItPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOw0KICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9ib2R5L1Byb2JsZW1pQXBlcnRpL2F1dGhvciciY29kZSI7DQogICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsNCiAgICAgICAgICAgICAgICAgIH0ibWV0YSI7DQogICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gew0KICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7DQogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7DQogICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsIGEuZGlzcGxheSA9IHM7DQogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0IC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDE1LCAgZTE1LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDE1KSwgcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lci8nLCB1dWlkMTUpLCBub3RlLmF1dGhvciA9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpICJhdXQiOw0KICAgICAgICAgICAgICAgICAgICB9InIiOw0KICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsNCiAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsNCiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7DQogICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7DQogICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5hc3NpZ25lZFBlcnNvbiBhcyBwZXJzb24gdGhlbiB7DQogICAgICAgICAgICAgICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOw0KICAgICAgICAgICAgICAgICAgfSJhc3NpZ25lZFBlcnNvbiI7DQogICAgICAgICAgICAgICAgfSJhc3NpZ2hlZEF1dGhvciI7DQogICAgICAgICAgICAgIH0iYXV0aG9yIjsNCiAgICAgICAgICAgIH0icmVmZXJlbmNlIjsNCiAgICAgICAgICB9ImNkYVRleHQiOw0KICAgICAgICB9ImNvbmRpemlvbmVwcm9ibGVtaWFwZXJ0aSI7DQogICAgICB9IlNlY3Rpb25maGlyIjsNCiAgICB9IlNvdHRvc2VjdGlvbiI7DQogIH0iY29tcG9uZW50IjsNCn0NCg0KLy8tLS0tLS0tLS0tLS0tLS0tQ2xpbmljYWxTdGF0ZW1lbnRzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KZ3JvdXAgQWN0IChzb3VyY2UgY2RhOiBBY3QsIHRhcmdldCBwYXQgOiBQYXRpZW50LCB0YXJnZXQgZW5jIDogRW5jb3VudGVyLCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlKXsNCiAgY2RhLmNvZGUgYXMgY29kZSAtPiBlbmMuZXh0ZW5zaW9uIGFzIGV4dGVuc2lvbjIgdGhlbiBtb2RlT2ZBcnJpdmFsKGNvZGUsIGV4dGVuc2lvbjIpOw0KICBjZGEucGFydGljaXBhbnQgYXMgcGFydGljaXBhbnQgdGhlbiB7DQogICAgcGFydGljaXBhbnQgLT4gZW5jLnBhcnRpY2lwYW50IGFzIEZoaXJQYXJ0aWNpcGFudCB0aGVuIHsNCiAgICAgIHBhcnRpY2lwYW50IGFzIHAgLT4gRmhpclBhcnRpY2lwYW50LnR5cGUgYXMgdHlwZSB0aGVuIHsgDQogICAgICAgIHAgLT4gdHlwZS5jb2RpbmcgYXMgY29kaW5nIHRoZW57DQogICAgICAgICAgcC0+IGNvZGluZy5jb2RlID0gKHAudHlwZUNvZGUpICJjb2RpY2UiOw0KICAgICAgICAgIHAtPiBjb2Rpbmcuc3lzdGVtID0gJ2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUGFydGljaXBhdGlvblR5cGUnICJzeXN0ZW0iOw0KICAgICAgICB9ICJjb2RlVHlwZSI7IA0KICAgICAgfSJ0eXBlIjsNCiAgICB9ImZoaXJQYXJ0aWNpcGFudCI7DQogICAgcGFydGljaXBhbnQucGFydGljaXBhbnRSb2xlIGFzIHBhcnRpY2lwYW50Um9sZSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTEucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lclJvbGUnKSBhcyBwcmFjdGl0aW9uZXJSb2xlLCAgcHJhY3RpdGlvbmVyUm9sZS5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnUHJhY3RpdGlvbmVyUm9sZScsIGVuYy5wYXJ0aWNpcGFudCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcGFydGljaXBhbnQxLCBwYXJ0aWNpcGFudDEuaW5kaXZpZHVhbCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlcGFydCwgcmVmZXJlbmNlcGFydC5yZWZlcmVuY2UgPSAgKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nICsgJXByYWN0aXRpb25lclJvbGUuaWQpIHRoZW4geyANCiAgICAgIHBhcnRpY2lwYW50Um9sZS5jb2RlIC0+IHByYWN0aXRpb25lclJvbGUuY29kZTsNCiAgICB9InBhcnRpY2lwYW50cm9sZSI7DQogIH0icGFydGljaXBhbnQiOyANCn0NCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tRXh0ZW5zaW9uc19EdFR5cGUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQpncm91cCBtb2RlT2ZBcnJpdmFsKHNvdXJjZSBzcmM6IENFLCB0YXJnZXQgZXh0OiBFeHRlbnNpb24pIHsNCiAgc3JjIC0+IGV4dC51cmwgPSAnaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2VuY291bnRlci1tb2RlT2ZBcnJpdmFsJyAidXJsIjsNCiAgc3JjIC0+IGV4dC52YWx1ZSA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kZTEgdGhlbiBjb2Rpbmcoc3JjLGNvZGUxKSJjb2RpbmciOw0KfQ0KDQpncm91cCBjb2Rpbmcoc291cmNlIHNyYyA6IENFLCB0YXJnZXQgdGd0IDogQ29kaW5nKSAgew0KICBzcmMuY29kZSBhcyBjb2RlICAtPiB0Z3QuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOw0KICBzcmMuY29kZVN5c3RlbSBhcyBzeXN0ZW0gLT4gdGd0LnN5c3RlbSA9IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOw0KICBzcmMuZGlzcGxheU5hbWUgYXMgZGlzcGxheSAtPiB0Z3QuZGlzcGxheSA9IGNhc3QoZGlzcGxheSwgJ3N0cmluZycpOw0KICBzcmMuY29kZVN5c3RlbVZlcnNpb24gYXMgdmVyc2lvbiAtPiB0Z3QudmVyc2lvbiA9IGNhc3QodmVyc2lvbiwgJ3N0cmluZycpOw0KfQ0KZ3JvdXAgcGVyaW9kVGltaW5nKHNvdXJjZSBlZmZlY3RpdmVUaW1lOiBQSVZMX1RTLCB0YXJnZXQgdGltaW5nOiBUaW1pbmcpew0KICBlZmZlY3RpdmVUaW1lIC0+IHRpbWluZy5yZXBlYXQgYXMgciB0aGVuew0KICAgIGVmZmVjdGl2ZVRpbWUucGVyaW9kIGFzIHAgLT4gci5wZXJpb2QgPSAocC52YWx1ZSk7DQogICAgZWZmZWN0aXZlVGltZS5wZXJpb2QgYXMgcCAtPiByLnBlcmlvZFVuaXQgPSAocC51bml0KTsgIA0KICB9InJlcGVhdCI7DQp9", "subType": "00"}}, "filename": "VerbaleProntoSoccorso_v2.4.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:44:13.458Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f460be0517258e7dfb99"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/PrescrizioneFarmaceutica", "version": "2.0", "template_id_root": ["2.16.840.1.113883.2.9.10.1.2.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "PrescrizioneFarmaceutica_v2.0.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:44:16.021Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}},{"_id": {"$oid": "6537f462be0517258e7dfb9a"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/PrescrizioneSpecialistica", "version": "2.0", "template_id_root": ["2.16.840.1.113883.2.9.10.1.2.2"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "PrescrizioneSpecialistica_v2.0.map", "type": "Map", "last_update_date": {"$date": "2023-10-24T16:44:18.01Z"}, "deleted": false, "last_sync": {"$date": "2023-10-24T16:45:53.816Z"}}]