[{"_id": {"$oid": "64ba8d07091c057abd6ef9c7"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes", "version": "2.2", "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes" = "CdaToFhirDataTypes"


// Adapted from https://github.com/HL7/ccda-to-fhir/tree/master/mappings
// CDA:  http://build.fhir.org/ig/ahdis/cda-core-2.0/branches/master/index.html
// FHIR: http://hl7.org/fhir/r4/

conceptmap "addressUse" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AddressUse"
  prefix t = "http://hl7.org/fhir/address-use"

  s:H == t:home
  s:HP == t:home
  s:HV == t:home
  s:WP == t:work
  s:DIR == t:work
  s:PUB == t:work
  s:TMP == t:temp
  s:OLD == t:old
  s:BAD == t:old
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ED" alias ED as source
uses "http://hl7.org/fhir/cda/StructureDefinition/INT" alias INT as source
uses "http://hl7.org/fhir/cda/StructureDefinition/II" as source
uses "http://hl7.org/fhir/StructureDefinition/Identifier" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/TS" as source
uses "http://hl7.org/fhir/StructureDefinition/instant" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/CS" as source
uses "http://hl7.org/fhir/StructureDefinition/code" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/CE" as source
uses "http://hl7.org/fhir/StructureDefinition/CodeableConcept" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/ST" as source
uses "http://hl7.org/fhir/StructureDefinition/string" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/EN" as source
uses "http://hl7.org/fhir/StructureDefinition/HumanName" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" as source
uses "http://hl7.org/fhir/StructureDefinition/Address" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/TEL" as source
uses "http://hl7.org/fhir/StructureDefinition/ContactPoint" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/BL" as source
uses "http://hl7.org/fhir/StructureDefinition/boolean" as target
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-TS" as source
uses "http://hl7.org/fhir/StructureDefinition/Period" as target

group Any(source src, target tgt) {
}

group II(source src : II, target tgt : Identifier) extends Any <<types>> {
  src.root as r where src.extension.exists() -> tgt.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
  src.root as r where src.extension.empty() and src.root.matches('[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}') ->  tgt.system = 'urn:ietf:rfc:3986',  tgt.value = ('urn:uuid:' + r.lower()) "rootuuid";
  src.root as r where src.extension.empty() and src.root.contains('.') ->  tgt.system = 'urn:ietf:rfc:3986',  tgt.value = append('urn:oid:', r) "rootoid";
  src.extension as e -> tgt.value = e;
  src.assigningAuthorityName as s ->  tgt.assigner as a,  a.display = s;
  // there's no equivalent for displayable in FHIR - and it probably will never matter, but if it does, it might map to Identifier.use.
}

group INT(source src : INT, target tgt : integer) extends Any <<types>> {
  src.value as v -> tgt.value = cast(v, 'string') "value";
}

group TemplateID(source template : II, target tgt) {
  template -> tgt.extension as ext then {
    template -> ext.url = 'http://hl7.org/fhir/cda/StructureDefinition/templateID' "url";
    template -> ext.value = create('Identifier') as value then II(template, value) "value";
  } "templateId";
}

group Negation(source negation : BL, target tgt) {
  negation -> tgt.modifierExtension as ext then {
    negation -> ext.url = 'http://hl7.org/fhir/cda/StructureDefinition/negationIndicator' "url";
    negation as neg ->  ext.value = create('boolean'),  ext.value = neg "value";
  } "negation";
}

group TSInstant(source src : TS, target tgt : instant) extends Any <<types>> {
  src.value as v -> tgt.value = cast(v, 'string');
}

group TSDateTime(source src : TS, target tgt : dateTime) extends TSInstant <<types>> {
  
  src  where(value.contains('+')) then{
    src.value as v -> tgt.value = cast(v, 'string');
  }"eff";  

  src  where(value.contains('-')) then{
    src.value as v -> tgt.value = cast(v, 'string');
  }"eff";  

  src.value  where(value.matches('^\\d{4}(\\-\\d{2}){2}T\\d{2}(:\\d{2}){2}$')) then{
    src.value as v  -> tgt.value = append(v,'Z') "date";
  }"eff";    

}

group TSDate(source src : TS, target tgt : date) extends TSInstant <<types>> {
}

group IVLTSPeriod(source src : IVL_TS, target tgt : Period) extends Any <<types>> {
  src.low as l -> tgt.start=create('dateTime') as start then TSDateTime(l,start) ;
   
  src.high as h -> tgt.end=create('dateTime') as end then TSDateTime(h,end) ;
  
 
}

group IVLTSDateTime(source src : IVL_TS, target tgt : dateTime) extends Any <<types>> {
  src.low as s then TSDateTime(s, tgt);
}

group STstring(source src : ST, target tgt : string) extends Any <<types>> {
  src as v -> tgt.value = cast(v, 'string') "value";
}

group EDstring(source src : ED, target tgt : string) extends STstring <<types>> {
    }


group INTstring(source src : INT, target tgt : string) extends STstring <<types>> {
}
group ONstring(source src : ON, target tgt : string) extends STstring <<types>> {
}

group CSCode(source src : CS, target tgt : code) extends Any <<types>> {
  src.code as c -> tgt.value = cast(c, 'string');
}

group CECode(source src : CE, target tgt : code) extends CSCode <<types>> {
}

group CDCode(source src : CD, target tgt : code) extends CSCode <<types>> {
}

group CECodeableConcept(source src : CE, target tgt : CodeableConcept) extends Any <<types>> {
  src.originalText as originalText then{
    originalText.reference as reference-> tgt.text= (reference.value);
  }"originltext";
  src -> tgt.coding as coding then {
    src.code as code -> coding.code = cast(code, 'string');
    src.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    src.displayName as display -> coding.display = cast(display, 'string');
    src.codeSystemVersion as version -> coding.version = cast(version, 'string');
  } "code";
  src.translation as translation -> tgt.coding as coding then {
    translation.code as code -> coding.code = cast(code, 'string');
    translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    translation.displayName as display -> coding.display = cast(display, 'string');
    translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
	translation.qualifier as qualifier then{
    qualifier.name as name -> tgt.coding as coding then {
      name.code as code -> coding.code = cast(code, 'string');
       name.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
       name.displayName as display -> coding.display = cast(display, 'string');
       name.codeSystemVersion as version -> coding.version = cast(version, 'string');
      } "name";
	qualifier.value as value -> tgt.coding as coding then {
	 value.code as code -> coding.code = cast(code, 'string');
    value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    value.displayName as display -> coding.display = cast(display, 'string');
    value.codeSystemVersion as version -> coding.version = cast(version, 'string');
	 } "value";
	};
  } "translation";
}

group CSCodeableConcept(source src : CS, target tgt : CodeableConcept) extends CECodeableConcept <<types>> {
}

group CDCodeableConcept(source src : CD, target tgt : CodeableConcept) extends CECodeableConcept <<types>> {
}

group ENHumanName(source src : EN, target tgt : HumanName) extends Any <<types>> {
  src.family as v -> tgt.family = (v.dataString);
  src.given as v -> tgt.given = (v.dataString);
  src.prefix as v -> tgt.prefix = (v.dataString);
  src.suffix as v -> tgt.suffix = (v.dataString);
  // src.use as c -> tgt.use = translate(c, 'http://hl7.org/fhir/ConceptMap/cm-name-use-v3', 'code');
  src.validTime -> tgt.period;
}

group ADAddress(source src : AD, target tgt : Address) extends Any <<types>> {
  src.country as v -> tgt.country = (v.dataString);
  src.state as v -> tgt.state = (v.dataString);
  src.county as v -> tgt.district = (v.dataString);
  src.city as v -> tgt.city = (v.dataString);
  src.postalCode as v -> tgt.postalCode = (v.dataString);
  src.streetAddressLine as v -> tgt.line=(v.dataString);
   
  src   -> tgt.line  as line then { 
   src where src.censusTract.exists() then {
    src.censusTract as v -> line.extension as ext1 then CensusTract(v, ext1) "line";
   }"sfgfdsg";
  } "CensusTract";

  //share firstline "streetAddress";
  //as streetAddress then{
    //src.censusTract as v->tgt.line as line, line.extension as ext1 then CensusTract(v, ext1) "line";
  //src.censusTract as v ->tgt.line as line, line.extension as ext1 then CensusTract(v, ext1) "line";
  src.streetName as v -> tgt.line = (v.dataString);
  src.houseNumber as v -> tgt.line = (v.dataString);
  src.use as c -> tgt.use = translate(c, '#addressUse', 'code') "addressUse";
  src.useablePeriod -> tgt.period;
}

group TELContactPoint(source src : TEL, target tgt : ContactPoint) extends Any <<types>> {
  src.value as v where (src.value.startsWith('tel:')) ->  tgt.value = (v.substring(4)),  tgt.system = 'phone' "valuetel";
  src.value as v where (src.value.startsWith('fax:')) ->  tgt.value = (v.substring(4)),  tgt.system = 'fax' "valuefax";
  src.value as v where (src.value.startsWith('mailto:')) ->  tgt.value = (v.substring(7)),  tgt.system = 'email' "valuemail";
  src.value as v where (src.value.startsWith('http:')) ->  tgt.value = (v.substring(5)),  tgt.system = 'url' "valuehttp";
  src.use where (src.use.startsWith('H')) -> tgt.use = 'home' "usehome";
  src.use where ((src.use = 'WP') or (src.use = 'DIR') or (src.use = 'PUB')) -> tgt.use = 'work' "usework";
  src.use where (src.use = 'BAD') -> tgt.use = 'old' "usebad";
  src.use where (src.use = 'TMP') -> tgt.use = 'temp' "usetmp";
  src.use where (src.use = 'MC') -> tgt.use = 'mobile' "usemobile";
  src.useablePeriod -> tgt.period;
}

group PQQuantity(source src : PQ, target tgt : Quantity) extends Any <<types>> {
  // src.unit as unit -> tgt.code = unit;
  src.unit as unit -> tgt.unit = unit;
  src.value as value -> tgt.value = value;
}

group RTOPQPQRatio(source src : RTO_PQ_PQ, target tgt : Ratio) extends Any <<types>> {
  src.numerator as numerator -> tgt.numerator as targetNumerator then PQQuantity(numerator, targetNumerator);
  src.denominator as denominator -> tgt.denominator as targetDenominator then PQQuantity(denominator, targetDenominator);
}
 
 group CensusTract(source src : ST, target ext : Extension) {
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-censusTract' "url";
    src->  ext.value = create('string'),  ext.value = (src.dataString) "value";
  } 
", "subType": "00"}}, "filename": "CdaToFhirDataTypes_v2.2.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:49:59.055Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d09091c057abd6ef9c8"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER", "version": "3.4", "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER" = "FULLHEADER"

conceptmap "cm-v3-administrative-gender" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:M == t:male
  s:F == t:female
}
conceptmap "priority" {
 prefix s = "http://terminology.hl7.org/ValueSet/v3-ActPriority"
  prefix t = "http://hl7.org/fhir/ValueSet/request-priority"

  s:R == t:routine
  s:P == t:asap
  s:UR == t:urgent
  s:EM == t: stat

}
conceptmap "cm-v3-relatesTo-code" {
  prefix s = "http://terminology.hl7.org/ValueSet/typecode"
  prefix t = "http://hl7.org/fhir/ValueSet/document-relationship-type"

  s:APND == t:appends
  s:XFRM == t:trasform
  s:RPLC == t:replaces
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Specimen" alias Specimen as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/HealthCareFacility" alias HealthCareFacility as queried

imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid3),request.url = 'DocumentReference' then {
   cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
   cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext -> identifier.value = ext "value";
            // r -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"record";
    }"recPat";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference: DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
}

group ClinicalDocumentComposition(source src : ClinicalDocument, target tgt : Composition, target patientResource : Patient, target encounter : Encounter, target bundle : Bundle, target DocumentReference: DocumentReference) {
  src.languageCode -> tgt.language;
  src -> DocumentReference.status = 'current' "status";
  src -> DocumentReference.content = create('BackboneElement') as content then {
  src-> content.attachment = create('Attachment') as attachment,  attachment.title = 'string' "comp";
  }"content";
  src -> DocumentReference.context = create('BackboneElement') as context then {
    src -> context.related = create('Reference') as referenceComp,  referenceComp.reference = ('https://example/Composition/' + %tgt.id) "comp";
   }"context";
  src.id where src.setId.exists().not() -> tgt.identifier "identifier";
  src.setId -> tgt.identifier "identifier";
  src -> tgt.status = 'final' "status";
  src.code -> tgt.type;
  src.title as t -> tgt.title = (t.dataString);
  src where src.title.exists().not() then {
    src.code  as code then {
      code.displayName as display ->tgt.title = cast(display,'string');
    }"display";
  }"title";
  src.effectiveTime as effectiveTime -> tgt.date = create('dateTime') as value then TSDateTime(effectiveTime, value);
  src.versionNumber as versionNumber where(value > 1) -> tgt.extension as ext2 then ChExtEprVersionNumber(versionNumber, ext2);
  src.confidentialityCode -> tgt.confidentiality;
  src.recordTarget as recordTarget then {
    recordTarget.patientRole as patient ->  tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patientResource.id) then ClinicalDocumentPatientRole(patient, patientResource, bundle) "subject";
    recordTarget.patientRole as patient -> DocumentReference.subject = create('Reference') as reference1,  reference1.reference = ('https://example/Patient/' + %patientResource.id);
  } "patientRole";
  
  //START AUTHOR
  src.author as srcAuthor then  {
    srcAuthor.time as time -> tgt.date;
    srcAuthor.assignedAuthor as assignedAuthor then {
      // Codice Fiscale
        assignedAuthor.id as id where (root!='2.16.840.1.113883.2.9.6.3.2') then {
         assignedAuthor->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url='PractitionerRole', tgt.author = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
          // assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
            assignedAuthor -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then { 
              srcAuthor.functionCode -> practitionerRole.code;
                assignedAuthor->practitioner.meta as meta then {
                  assignedAuthor->meta.tag = create('Coding') as coding then {
                    assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                    assignedAuthor -> coding.code ='ClinicalDocument/author'"code";
                  }"coding";
                }"meta";
                assignedAuthor.code -> practitionerRole.code;
                assignedAuthor.id as id -> practitioner.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext; // then {
              //    assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
              //  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
                  }"r";
              }"identifier";
              assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              assignedAuthor.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"diverso";
                assignedAuthor.addr -> practitioner.address;      
                assignedAuthor.telecom -> practitioner.telecom;
                assignedAuthor.assignedPerson as person then {
                person.name -> practitioner.name;
                person.birthTime as birthTime then{
                  birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
                }"birth";
                } "name";
                assignedAuthor -> DocumentReference.author = create('Reference') as referenceAuth,  referenceAuth.reference = ('https://example/Practitioner/' + %practitioner.id) "refAuth";
              } "ASSAUth";
              assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization then {
                representedOrganization.id as id -> organization.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
                  }"r";
              }"identifier";

              representedOrganization->organization.meta as meta then {
                representedOrganization->meta.tag = create('Coding') as coding then {
                  representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                  representedOrganization -> coding.code ='ClinicalDocument/author/representedOrganization'"code";
                }"coding";
              }"meta";
              
                representedOrganization.name as v -> organization.name = (v.other);
                representedOrganization.telecom -> organization.telecom;
                representedOrganization.addr -> organization.address;
                representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1 then {
                  OrgPartOf->organization1.meta as meta then {
                    OrgPartOf->meta.tag = create('Coding') as coding then {
                      OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                      OrgPartOf -> coding.code ='ClinicalDocument/author/representedOrganization/asOrganizationPartOf'"code";
                    }"coding";
                  }"meta";
                  OrgPartOf.id as id -> organization1.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                      id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "aut";
                    }"r";
                }"identifier";
                  OrgPartOf.code -> organization1.type;
                  OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
                  OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10bis,  e10bis.request = create('BackboneElement') as request, request.method = 'PUT',  e10bis.resource = create('Organization') as organization2 then{
                    
                    wholeOrgan->organization2.meta as meta then {
                      wholeOrgan->meta.tag = create('Coding') as coding then {
                        wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                        wholeOrgan -> coding.code ='ClinicalDocument/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                      }"coding";
                    }"meta";

                    wholeOrgan.id as id -> organization2.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                        wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                      }"ext";
                      id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                      id.root as r then {
                        id.extension as ext  -> organization2.id =  (r +'-'+ ext) as uuid5,  e10bis.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "aut";
                      }"r";
                  }"identifier";
                    wholeOrgan.name as v -> organization2.name = (v.other);
                    wholeOrgan.telecom -> organization2.telecom;
                    wholeOrgan.addr -> organization2.address;
                  }"wholeOrganization";
                } "OrgPartOf";
              } "representedOrganization"; 
            }"ParcatitionerROL";
        }"OIDCF";
      // Partita IVA
      assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.6.3.2') then {
        assignedAuthor->bundle.entry as e6bis3,  e6bis3.request = create('BackboneElement') as request, request.method = 'POST',  e6bis3.resource = create('Device') as device,  device.id = uuid() as uuid6bis3,  e6bis3.fullUrl = append('https://example/Device/', uuid6bis3), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
          assignedAuthor->bundle.entry as e251, e251.request = create('BackboneElement') as request, request.method = 'PUT', e251.resource = create('Organization') as organization then {
            assignedAuthor->organization.meta as meta then {
                assignedAuthor->meta.tag = create('Coding') as coding then {
                    assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                    assignedAuthor -> coding.code ='ClinicalDocument/AuthorPartitaIVA'"code";
                  }"coding";
                }"meta";
                assignedAuthor.id as id -> organization.identifier as identifier then {
               id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    assignedAuthor-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid2,  e251.fullUrl = append('https://example/Organization/', uuid2),  device.owner = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %organization.id);
                  }"r" ;
              }"identifier";
             }"OrgPartitaIVA";
         }"Device";
      }"oidPartitaIVA";
     // ID nullFlavor
      assignedAuthor.id as id where nullFlavor.exists() then {
          assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e6bis,  e6bis.request = create('BackboneElement') as request, request.method = 'POST',  e6bis.resource = create('Device') as device,  device.id = uuid() as uuid6bis,  e6bis.fullUrl = append('https://example/Device/', uuid6bis), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device' + %device.id) then{
          // assignedAuthoringDevice.templateId -> device.identifier;
            assignedAuthoringDevice.code -> device.type;
            assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
                manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
            } "manufacturer"; 
            assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
                softwareName -> deviceName.type = 'other' "typeName";		
                softwareName as s -> deviceName.name = (s.displayName) "name";
            } "deviceName";
          }"Device";
      }"NullFlavor";
    } "assignedAuthor";

    //START DATA ENTER
  src.dataEnterer as dataEnt ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST',  e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e6.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url ='PractitionerRole' , tgt.author = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    dataEnt.time as time -> tgt.date;
    dataEnt.assignedEntity as assignedEntity -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner then {
      
      assignedEntity->practitioner.meta as meta then {
        assignedEntity->meta.tag = create('Coding') as coding then {
          assignedEntity -> coding.system ='http://algoritmodiscoring'"system";
          assignedEntity -> coding.code ='ClinicalDocument/dataEnterer'"code";
        }"coding";
      }"meta";
      
      assignedEntity.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedEntity.id as id -> practitioner.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext; 
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        id.root as r then {
          id.extension as ext  -> practitioner.id  =  (r +'-'+ ext) as uuid2,  e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)  "dataenterer";
        }"r";
    }"identifier";

    assignedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
    }"2.16.840.1.113883.2.9.4.3.2";
    assignedEntity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
    }"diverso";

      assignedEntity.addr -> practitioner.address;
      assignedEntity.telecom -> practitioner.telecom;
      assignedEntity.assignedPerson as person then{
        person.name -> practitioner.name;
      person.birthTime as birthTime then{
          birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
        }"birth";
      }"assignedPerson";
      assignedEntity.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization  then {
        
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/dataEnterer/representedOrganization'"code";
          }"coding";
        }"meta";
        
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id =  (r +'-'+ ext) as uuid3, e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)  "dataenterer";
          }"r";
      }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then{
          
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/dataEnterer/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  ->  organization1.id =  (r +'-'+ ext) as uuid4,  e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)  "dataenterer";
            }"r";
        }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2  then{
            
            wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/dataEnterer/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  ->  organization2.id =  (r +'-'+ ext) as uuid5,  e10.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)   "dataenterer";
              }"r";
          }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"asOrganizationPartOf";
      }"RepresentedOrganization";
    }"AssignedEntity";
  }"DataEnter";
  } "srcAuthor";
  
  //START INFORMANT 1
  src.informant as informant  then {
     informant.assignedEntity as assignedEntity  ->bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e11.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then {
        informant -> tgt.attester as attester then {
        informant -> attester.mode='professional' "mode";
        informant -> attester.party = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id)"reference";
        assignedEntity.code -> practitionerRole.code;
        assignedEntity as entity-> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'PUT', e12.resource = create('Practitioner') as practitioner  then {
          
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/informant'"code";
            }"coding";
          }"meta";
          
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id =  (r +'-'+ ext) as uuid2,  e12.fullUrl = append('https://example/Practitioner/', uuid2), practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "dataenterer";
            }"r" ;
        }"identifier";
        assignedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assignedEntity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"diverso";
        entity.addr -> practitioner.address;
        entity.telecom -> practitioner.telecom;
        entity.assignedPerson as person then {
        person.name -> practitioner.name;
        person.birthTime as birthTime then{
          birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
        }"birth";
        }"person";
        entity.representedOrganization as representedOrganization-> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Organization') as organization then {
        
          representedOrganization->organization.meta as meta then {
            representedOrganization->meta.tag = create('Coding') as coding then {
              representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
              representedOrganization -> coding.code ='ClinicalDocument/informant/representedOrganization'"code";
            }"coding";
          }"meta";
        
          representedOrganization.id as id -> organization.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization.id =  (r +'-'+ ext) as uuid3,  e13.fullUrl = append('https://example/Organization/', uuid3),  practitionerRole.organization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organization.id);
            }"r" ;
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf -> organization.partOf as partOf then {
        representedOrganization.asOrganizationPartOf as organizationPartOf -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'PUT', e14.resource = create('Organization') as organization1 then {
          
          organizationPartOf->organization1.meta as meta then {
            organizationPartOf->meta.tag = create('Coding') as coding then {
              organizationPartOf -> coding.system ='http://algoritmodiscoring'"system";
              organizationPartOf -> coding.code ='ClinicalDocument/informant/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          
          organizationPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              organizationPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id =  (r +'-'+ ext) as uuid4,  e14.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organization1.id);
            }"r" ;
        }"identifier";
        organizationPartOf.code -> organization1.type;
        organizationPartOf.statusCode as status where(code='active')-> organization1.active =create ('boolean'),organization1.active='true';
        organizationPartOf.wholeOrganization -> organization1.partOf as partOf1 then{
        organizationPartOf.wholeOrganization  as wholeOrganization-> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'PUT', e15.resource = create('Organization') as organization2  then {
          wholeOrganization->organization2.meta as meta then {
            wholeOrganization->meta.tag = create('Coding') as coding then {
              wholeOrganization -> coding.system ='http://algoritmodiscoring'"system";
              wholeOrganization -> coding.code ='ClinicalDocument/informant/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
            }"coding";
          }"meta";
          
        
          wholeOrganization.id as id -> organization2.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              wholeOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid5,  e15.fullUrl = append('https://example/Organization/', uuid5)  , organization1.partOf = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organization2.id);
            }"r" ;
        }"identifier";
        wholeOrganization.name as v -> organization2.name = (v.other);
        wholeOrganization.telecom -> organization2.telecom;
        wholeOrganization.addr -> organization2.address;
       }"wholeOrganization";
       }"asOrganizationPartOf";
       }"partOf";
        }"qualification";
        }"organization"; 
        }"assignedEntity";
    }"attester";
    }"informant";
    }"inform";
  //START INFORMANT 2
  src.informant as informant then {
   
    informant.relatedEntity as related  -> bundle.entry as e16, e16.request = create('BackboneElement') as request, request.method = 'POST', e16.resource = create('RelatedPerson') as relatedPerson,  relatedPerson.id = uuid() as uuid1,  e16.fullUrl = append('https://example/RelatedPerson/', uuid1),request.url = 'RelatedPerson' then {
    informant -> tgt.attester as attester then {
    informant -> attester.mode='professional' "mode";
    informant-> attester.party = create('Reference') as reference,  reference.reference = ('https://example/RelatedPerson/' + %relatedPerson.id)"reference";
    related.relatedPerson as Person then {
    related.code -> relatedPerson.relationship;
    related.telecom -> relatedPerson.telecom;
    related.addr -> relatedPerson.address;
    Person.name -> relatedPerson.name;
    related.birthTime as date then{
      date.value as value -> relatedPerson.birthDate = truncate(value, 10) "valueD"; 
    }"birthinformant";
    related->relatedPerson.patient= create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patientResource.id) "reference";
     }"relatedPerson1";
      }"relatedPerson";
    }"informant";
  }"inform2";
  
  //START CUSTODIAN
  src.custodian as custodian then {
    custodian.assignedCustodian as assignedCustodian -> bundle.entry as e17, e17.request = create('BackboneElement') as request, request.method = 'PUT', e17.resource = create('Organization') as Organization then {
    
      assignedCustodian->Organization.meta as meta then {
        assignedCustodian->meta.tag = create('Coding') as coding then {
          assignedCustodian -> coding.system ='http://algoritmodiscoring'"system";
          assignedCustodian -> coding.code ='ClinicalDocument/custodian'"code";
        }"coding";
      }"meta";

      assignedCustodian.representedCustodianOrganization as representedCustodianOrganization then{
        representedCustodianOrganization.id as id -> Organization.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext then {
          representedCustodianOrganization -> request.url = append('Organization?identifier=',ext)"UUID";
        }"ext";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        id.root as r then {
          id.extension as ext  -> Organization.id = (r +'-'+ ext) as uuid,  e17.fullUrl = append('https://example/Organization/', uuid);
        }"r" ;
    }"identifier";
    assignedCustodian -> DocumentReference.custodian = create('Reference') as referenceCU,  referenceCU.reference = ('https://example/Organization/' + %Organization.id) "RefCustodian";
    representedCustodianOrganization -> tgt.custodian = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %Organization.id)  then CustodianOrganization(representedCustodianOrganization,Organization) "custodian1";
    }"representedCustodianOrganization";
    }"organization";
  }"custodian";

  //START INFORMATION RECIPIENT 
  src.informationRecipient as informationRecipient then{
      informationRecipient.intendedRecipient as intendedRecipient  then {
            intendedRecipient.informationRecipient as informationRecipient2 then{
                informationRecipient -> tgt.attester as attester then {
                    informationRecipient2 -> attester.mode = 'professional' "mode";
                    informationRecipient2 ->  bundle.entry as e19, e19.request = create('BackboneElement') as request, request.method = 'PUT',  e19.resource = create('Practitioner') as practitioner  then {
                      informationRecipient2->practitioner.meta as meta then {
                        informationRecipient2->meta.tag = create('Coding') as coding then {
                          informationRecipient2 -> coding.system ='http://algoritmodiscoring'"system";
                          informationRecipient2 -> coding.code ='ClinicalDocument/informationRecipient'"code";
                        }"coding";
                      }"meta";
                      
                      intendedRecipient.id as id -> practitioner.identifier as identifier then {
                        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                        id.extension as ext->identifier.value = ext;
                        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                        id.root as r then {
                          id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e19.fullUrl = append('https://example/Practitioner/', uuid2),  attester.party = create('Reference') as reference1, reference1.reference = ('https://example/Practitioner/' + %practitioner.id);
                        }"r" ;
                    }"identifier";
                    intendedRecipient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    intendedRecipient.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"diverso";
                        intendedRecipient.addr -> practitioner.address;
                        intendedRecipient.telecom -> practitioner.telecom;
                        informationRecipient2.name -> practitioner.name;
                        informationRecipient2.birthTime as bt then {
                            bt.value as v -> practitioner.birthDate = (v.date);
                        }"date";
                    }"PersonRecipient";
                }"intendedRecipienPract";
            }"attesterOrg";
            intendedRecipient.receivedOrganization as receivedOrganization then{
                informationRecipient -> tgt.attester as attester then {
                receivedOrganization -> attester.mode = 'official' "mode";
                receivedOrganization -> bundle.entry as e20, e20.request = create('BackboneElement') as request, request.method = 'PUT',  e20.resource = create('Organization') as organization then {
                  
                  receivedOrganization->organization.meta as meta then {
                    receivedOrganization->meta.tag = create('Coding') as coding then {
                      receivedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                      receivedOrganization -> coding.code ='ClinicalDocument/informationRecipient/receivedOrganization'"code";
                    }"coding";
                  }"meta";
                  
                  receivedOrganization.id as id -> organization.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      receivedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                      id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e20.fullUrl = append('https://example/Organization/', uuid3),  attester.party = create('Reference') as reference2, reference2.reference = ('https://example/Organization/' + %organization.id);
                    }"r" ;
                }"identifier";
                receivedOrganization.name as v -> organization.name = (v.other);
                receivedOrganization.telecom -> organization.telecom;
                receivedOrganization.addr -> organization.address;
                receivedOrganization.asOrganizationPartOf as asOrganizationPartOf -> bundle.entry as e21, e21.request = create('BackboneElement') as request, request.method = 'PUT', e21.resource = create('Organization') as organization2 , organization2.id = uuid() as uuid4,  e21.fullUrl = append('https://example/Organization', uuid4), organization.partOf = create('Reference') as referenceor, referenceor.reference = ('https://example/Organization' + %organization2.id) then {
                 
                  asOrganizationPartOf->organization2.meta as meta then {
                    asOrganizationPartOf->meta.tag = create('Coding') as coding then {
                      asOrganizationPartOf -> coding.system ='http://algoritmodiscoring'"system";
                      asOrganizationPartOf -> coding.code ='ClinicalDocument/informationRecipient/receivedOrganization/asOrganizationPartOf'"code";
                    }"coding";
                  }"meta";
                 
                  asOrganizationPartOf.id as id -> organization2.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      asOrganizationPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                     id.root as r then {
                      id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4,  e21.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as referenceor, referenceor.reference = ('https://example/Organization/' + %organization2.id);
                    }"r" ;
                }"identifier";
                    asOrganizationPartOf.code -> organization2.type;
                    asOrganizationPartOf.statusCode as status where (value ='active') -> organization2.active = create('boolean'), organization2.active = 'true';
                    asOrganizationPartOf.wholeOrganization as wholeOrganization3 -> bundle.entry as e22, e22.request = create('BackboneElement') as request, request.method = 'PUT', e22.resource = create('Organization') as organization3 then {
                      
                      wholeOrganization3->organization3.meta as meta then {
                        wholeOrganization3->meta.tag = create('Coding') as coding then {
                          wholeOrganization3 -> coding.system ='http://algoritmodiscoring'"system";
                          wholeOrganization3 -> coding.code ='ClinicalDocument/informationRecipient/receivedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                        }"coding";
                      }"meta";
                      
                      wholeOrganization3.id as id -> organization3.identifier as identifier then {
                        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                        id.extension as ext->identifier.value = ext then {
                          wholeOrganization3-> request.url = append('Organization?identifier=',ext)"UUID";
                        }"ext";
                        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                        id.root as r then {
                          id.extension as ext  -> organization3.id = (r +'-'+ ext) as uuid5,  e22.fullUrl = append('https://example/Organization/', uuid5),  organization2.partOf = create('Reference') as referenceor, referenceor.reference = ('https://example/Organization/' + %organization3.id);
                        }"r" ;   
                    }"identifier";
                        wholeOrganization3.name as v -> organization3.name = (v.other);
                        wholeOrganization3.telecom -> organization3.telecom;
                        wholeOrganization3.addr -> organization3.address;
                    }"wholeOrganization";
                }"asOrganizationPartOf";
                }"receivedOrganization";
            } "intendedRecipienOrg";
            }"attesterOrg";
        }"intendedRecipent";
    
}"informationRecipent";

 //START Legal Authenticator
 src.legalAuthenticator as legalAuth then {
 legalAuth -> tgt.attester as attester then {
     legalAuth.assignedEntity as entity then {
       // Codice Fiscale
       entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') ->  bundle.entry as e23, e23.request = create('BackboneElement') as request, request.method = 'POST', e23.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid,  e23.fullUrl = append('https://example/PractitionerRole/', uuid), request.url = 'PractitionerRole' then {
               legalAuth -> attester.mode = 'legal' "mode";
               legalAuth.time -> attester.time;
               legalAuth -> attester.party = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then{
             entity ->  bundle.entry as e24, e24.request = create('BackboneElement') as request, request.method = 'PUT', e24.resource = create('Practitioner') as practitioner then {
             entity->practitioner.meta as meta then {
                 entity->meta.tag = create('Coding') as coding then {
                   entity -> coding.system ='http://algoritmodiscoring'"system";
                   entity -> coding.code ='ClinicalDocument/legalAuthenticator'"code";
                 }"coding";
               }"meta";
               
               entity.id as id -> practitioner.identifier as identifier then {
                 id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                 id.extension as ext->identifier.value = ext;
                 id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                 id.root as r then {
                   id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid1,  e24.fullUrl = append('https://example/Practitioner/', uuid1), practitionerRole.practitioner = create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                 }"r" ; 
             }"identifier";
             entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
               id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
             }"2.16.840.1.113883.2.9.4.3.2";
               entity.addr -> practitioner.address;
               entity.telecom -> practitioner.telecom;
               entity.assignedPerson as person then {
                 person.name -> practitioner.name;
                 person.birthTime as birthTime then{
                   birthTime.value as date -> practitioner.birthDate = truncate(date, 10) "birthTimelegal";
                 } "birth";
               }"person";
             }"practitioner";
             entity.code -> practitionerRole.code; 
             entity.representedOrganization as rapresentedOrg ->  bundle.entry as e25, e25.request = create('BackboneElement') as request, request.method = 'PUT', e25.resource = create('Organization') as organization then {
               
                 rapresentedOrg->organization.meta as meta then {
                   rapresentedOrg->meta.tag = create('Coding') as coding then {
                     rapresentedOrg -> coding.system ='http://algoritmodiscoring'"system";
                     rapresentedOrg -> coding.code ='ClinicalDocument/legalAuthenticator/representedOrganization'"code";
                   }"coding";
                 }"meta";
                 
                 rapresentedOrg.id as id -> organization.identifier as identifier then {
                   id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                   id.extension as ext->identifier.value = ext then {
                     rapresentedOrg-> request.url = append('Organization?identifier=',ext)"UUID";
                   }"ext";
                   id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                   id.root as r then {
                     id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid2,  e25.fullUrl = append('https://example/Organization/', uuid2),  practitionerRole.organization = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %organization.id);
                   }"r" ;
               }"identifier";
               rapresentedOrg.name as v -> organization.name = (v.other);
               rapresentedOrg.telecom -> organization.telecom;
               rapresentedOrg.addr -> organization.address;
               rapresentedOrg.asOrganizationPartOf as asOrgPartOf then {
                   asOrgPartOf as asOrgPartOf1 -> bundle.entry as e26, e26.request = create('BackboneElement') as request, request.method = 'PUT', e26.resource = create('Organization') as asorganization  then {
                   asOrgPartOf1->asorganization.meta as meta then {
                       asOrgPartOf1->meta.tag = create('Coding') as coding then {
                         asOrgPartOf1 -> coding.system ='http://algoritmodiscoring'"system";
                         asOrgPartOf1 -> coding.code ='ClinicalDocument/legalAuthenticator/representedOrganization/asOrganizationPartOf'"code";
                       }"coding";
                     }"meta";
                     
                     asOrgPartOf1.id as id -> asorganization.identifier as identifier then {
                       id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                       id.extension as ext->identifier.value = ext then {
                         asOrgPartOf1-> request.url = append('Organization?identifier=',ext)"UUID";
                       }"ext";
                       id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                       id.root as r then {
                         id.extension as ext  -> asorganization.id  = (r +'-'+ ext) as uuid2,  e26.fullUrl = append('https://example/Organization/', uuid2),  organization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %asorganization.id);
                       }"r" ;
                   }"identifier";
                       asOrgPartOf1.code -> asorganization.type;
                       asOrgPartOf1.statusCode as status where (code='active') -> asorganization.active = create('boolean'), asorganization.active = true;
                         asOrgPartOf1.wholeOrganization as wholeOrg then{
                           wholeOrg as wholeOrg1 -> bundle.entry as e27, e27.request = create('BackboneElement') as request, request.method = 'PUT', e27.resource = create('Organization') as wholeorganization,  wholeorganization.id = uuid() as uuid4,  e27.fullUrl = append('https://example/Organization/', uuid4), asorganization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %wholeorganization.id) then {
                             wholeOrg1->wholeorganization.meta as meta then {
                               wholeOrg1->meta.tag = create('Coding') as coding then {
                                 wholeOrg1 -> coding.system ='http://algoritmodiscoring'"system";
                                 wholeOrg1 -> coding.code ='ClinicalDocument/legalAuthenticator/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                               }"coding";
                             }"meta";
                             wholeOrg1.id as id -> wholeorganization.identifier as identifier then {
                               id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                               id.extension as ext->identifier.value = ext then {
                                 wholeOrg1-> request.url = append('Organization?identifier=',ext)"UUID";
                               }"ext";
                               id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                               id.root as r then {
                                 id.extension as ext  -> wholeorganization.id= (r +'-'+ ext) as uuid4,  e27.fullUrl = append('https://example/Organization/', uuid4), asorganization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %wholeorganization.id);
                               }"r" ;
                           }"identifier";
                               wholeOrg1.name as v -> wholeorganization.name = (v.other);
                               wholeOrg1.telecom -> wholeorganization.telecom;
                               wholeOrg1.addr -> wholeorganization.address;
                           }"wholeOrg1";
                       }"wholeOrg";
                   }"asOrgPO";   
               }"asOrgID";
             }"LAOrganiz";
          }"PractitionerLegal";
        }"PractitionerROLlegal";

     //Partita IVA
       entity.id as id where (root='2.16.840.1.113883.2.9.6.3.2')->bundle.entry as e251, e251.request = create('BackboneElement') as request, request.method = 'PUT', e251.resource = create('Organization') as organization then {
        entity -> attester.mode = 'official' "mode";
        entity->organization.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
                entity -> coding.system ='http://algoritmodiscoring'"system";
                entity -> coding.code ='ClinicalDocument/legalAuthenticatorPartitaIVA'"code";
               }"coding";
             }"meta";
             entity.id as id -> organization.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
               id.extension as ext->identifier.value = ext then {
                entity-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
               id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
               id.root as r then {
                 id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid2,  e251.fullUrl = append('https://example/Organization/', uuid2),  attester.party = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %organization.id);
               }"r" ;
           }"identifier";
          }"OrgPartitaIVA";
       } "entity";
     }"legalAuth";
   }"LegalAuthenticator";

  // START Authenticator 
  src.authenticator as Auth ->  bundle.entry as e28, e28.request = create('BackboneElement') as request, request.method = 'POST', e28.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e28.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then {
   Auth -> tgt.attester as attester then {
      Auth.time -> attester.time;
      Auth -> attester.mode = 'professional' "mode";
      Auth.assignedEntity as entity ->  attester.party = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e29, e29.request = create('BackboneElement') as request, request.method = 'PUT', e29.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid2,  e29.fullUrl = append('https://example/Practitioner', uuid2),  practitionerRole.practitioner = create('Reference') as reference, reference.reference = ('https://example/Practitioner' + %practitioner.id) then {
          
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/authenticator'"code";
            }"coding";
          }"meta";
          
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e29.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
            }"r" ; 
        }"identifier";
        entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        entity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"diverso";
        entity.addr -> practitioner.address "address";
        entity.telecom -> practitioner.telecom "telecom";
        entity.assignedPerson as person then {
          person.name -> practitioner.name "personName";
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate = truncate(date, 10) "birthTimeauth";
          } "birth";
        }"person"; 

      } "practitioner";
      entity.representedOrganization as reporganization -> bundle.entry as e30, e30.request = create('BackboneElement') as request, request.method = 'PUT', e30.resource = create('Organization') as organization  then {
        
        reporganization->organization.meta as meta then {
          reporganization->meta.tag = create('Coding') as coding then {
            reporganization -> coding.system ='http://algoritmodiscoring'"system";
            reporganization -> coding.code ='ClinicalDocument/authenticator/representedOrganization'"code";
          }"coding";
        }"meta";
        
        reporganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            reporganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id =(r +'-'+ ext) as uuid3,  e30.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %organization.id);
          }"r" ;   
      }"identifier";
      reporganization.name as v -> organization.name = (v.other);
      reporganization.telecom -> organization.telecom;
      reporganization.addr -> organization.address;
    
      reporganization.asOrganizationPartOf as organizationpartof-> bundle.entry as e31, e31.request = create('BackboneElement') as request, request.method = 'PUT', e31.resource = create('Organization') as asOrganizationpartof then {
        
        organizationpartof->asOrganizationpartof.meta as meta then {
          organizationpartof->meta.tag = create('Coding') as coding then {
            organizationpartof -> coding.system ='http://algoritmodiscoring'"system";
            organizationpartof -> coding.code ='ClinicalDocument/authenticator/representedOrganization/asOrganizationPartOf'"code";
          }"coding";
        }"meta";
        
        organizationpartof.id as id -> asOrganizationpartof.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            organizationpartof-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> asOrganizationpartof.id = (r +'-'+ ext) as uuid4, e31.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %asOrganizationpartof.id);
          }"r" ;   
      }"identifier";
        organizationpartof.code -> asOrganizationpartof.type;
        organizationpartof.statusCode as status where (code='active') -> asOrganizationpartof.active = create('boolean'), asOsrganizationpartof.active = 'true';     
            organizationpartof.wholeOrganization as wholeorg -> bundle.entry as e32, e32.request = create('BackboneElement') as request, request.method = 'PUT', e32.resource = create('Organization') as wholeOrganization,  wholeOrganization.id = uuid() as uuid5,  e32.fullUrl = append('https://example/Organization/', uuid5), asOrganizationpartof.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %wholeOrganization.id) then {
              
              wholeorg->wholeOrganization.meta as meta then {
                wholeorg->meta.tag = create('Coding') as coding then {
                  wholeorg -> coding.system ='http://algoritmodiscoring'"system";
                  wholeorg -> coding.code ='ClinicalDocument/authenticator/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                }"coding";
              }"meta";
              
              wholeorg.id as id -> wholeOrganization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  wholeorg-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> wholeOrganization.id = (r +'-'+ ext) as uuid5,  e32.fullUrl = append('https://example/Organization/', uuid5), asOrganizationpartof.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %wholeOrganization.id);
                }"r" ;  
            }"identifier";
            wholeorg.name as v -> wholeOrganization.name = (v.other);
            wholeorg.telecom -> wholeOrganization.telecom;
            wholeorg.addr -> wholeOrganization.address;

            }"wholeorg";
        }"organizationpartof";
    } "reporganization";
    }"entity"; 
    } "attester";
  } "Auth";
  // PARTICIPANT
  src.participant as participant where (typeCode!='IND') then{
         participant.associatedEntity as associetedEntity  -> bundle.entry as e313,   e313.request = create('BackboneElement') as request, request.method = 'POST',  e313.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1 ,  e313.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1 then { 
          //  participant.time as time->participant1.period as period ,period.start=(time.value);
            participant->participant1.period=create('Period') as period then {
                participant.time as time ->period.start= create('dateTime') as start then TSDateTime(time,start);
              }"period";
              participant as p -> participant1.type as type then { 
                p -> type.coding as coding then{
                  p-> coding.code = (p.typeCode) "codice";
                  p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
                } "codeType"; 
              }"type";
              participant-> participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id)"par";
              participant.functionCode -> practitionerRole.code;
              associetedEntity  -> bundle.entry as e33, e33.request = create('BackboneElement') as request, request.method = 'PUT', e33.resource = create('Practitioner') as practitioner then {
                
                associetedEntity->practitioner.meta as meta then {
                  associetedEntity->meta.tag = create('Coding') as coding then {
                    associetedEntity -> coding.system ='http://algoritmodiscoring'"system";
                    associetedEntity -> coding.code ='ClinicalDocument/participant'"code";
                  }"coding";
                }"meta";
                
                associetedEntity.id as id -> practitioner.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext;
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2, e33.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) ;
                  }"r" ;    
              }"identifier";
              associetedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              associetedEntity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"diverso";
              associetedEntity.code -> practitionerRole.code;
              associetedEntity.addr -> practitioner.address;
              associetedEntity.telecom -> practitioner.telecom;
              associetedEntity.associatedPerson as associatedperson then {
              associatedperson.name -> practitioner.name;
              associatedperson.birthTime as birthTime then{
                birthTime.value as date -> practitioner.birthDate = truncate(date, 10) "birthTimelegal";
              } "birth";
            } "name";
            associetedEntity.scopingOrganization as scopingOrganization ->  bundle.entry as e34, e34.request = create('BackboneElement') as request, request.method = 'PUT', e34.resource = create('Organization') as organization then{
              
              scopingOrganization->organization.meta as meta then {
                scopingOrganization->meta.tag = create('Coding') as coding then {
                  scopingOrganization -> coding.system ='http://algoritmodiscoring'"system";
                  scopingOrganization -> coding.code ='ClinicalDocument/participant/scopingOrganization'"code";
                }"coding";
              }"meta";
              
              scopingOrganization.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  scopingOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e34.fullUrl = append('https://example/Organization/', uuid3),  practitionerRole.organization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organization.id);
                }"r" ; 
            }"identifier";
              scopingOrganization.name as v -> organization.name = (v.other);
              scopingOrganization.telecom -> organization.telecom;
              scopingOrganization.addr -> organization.address; 
              scopingOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e35,  e35.request = create('BackboneElement') as request, request.method = 'PUT',  e35.resource = create('Organization') as organization1 then{
                OrgPartOf.id as id -> organization1.identifier as identifier then {
                  
                  OrgPartOf->organization1.meta as meta then {
                    OrgPartOf->meta.tag = create('Coding') as coding then {
                      OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                      OrgPartOf -> coding.code ='ClinicalDocument/participant/scopingOrganization/asOrganizationPartOf'"code";
                    }"coding";
                  }"meta";
                  
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,  e35.fullUrl = append('https://example/Organization/', uuid4),  organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) ;
                  }"r" ;   
              }"identifier";
                OrgPartOf.code -> organization1.type;
                OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = true;
                OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e36, e36.request = create('BackboneElement') as request, request.method = 'PUT',  e36.resource = create('Organization') as organization2 then {
                  
                  wholeOrgan->organization2.meta as meta then {
                    wholeOrgan->meta.tag = create('Coding') as coding then {
                      wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                      wholeOrgan -> coding.code ='ClinicalDocument/participant/scopingOrganization/asOrganizationPartOf/wholeOrganization'"code";
                    }"coding";
                  }"meta";

                  
                  wholeOrgan.id as id -> organization2.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                      id.extension as ext  -> organization1.id= (r +'-'+ ext) as uuid5,  e36.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)  ;
                    }"r" ;   
                }"identifier";
                  wholeOrgan.name as v -> organization2.name = (v.other);
                  wholeOrgan.telecom -> organization2.telecom;
                  wholeOrgan.addr -> organization2.address;
                }"wholeOrgan";
              }"OrgPartOf";       
            }"scopingOrganization";
          } "associetedEntity";
        } "Participant1";
        }"participant";
         src.participant as participant where (typeCode='IND') then{
        participant.associatedEntity as associetedEntity where (classCode='PROV')-> bundle.entry as e313,   e313.request = create('BackboneElement') as request, request.method = 'POST',  e313.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1 ,  e313.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant2 then { 
        
          //participant.time as time->participant2.period as period, period.start=(time.value);
            participant->participant2.period=create('Period') as period then {
                participant.time as time ->period.start= create('dateTime') as start then TSDateTime(time,start);
              }"period";
              participant as p -> participant2.type as type then { 
                p -> type.coding as coding then{
                  p-> coding.code = (p.typeCode) "codice";
                  p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
                } "codeType"; 
              }"type";
              participant-> participant2.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id)"par";
              participant.functionCode -> practitionerRole.code;
              associetedEntity  -> bundle.entry as e33, e33.request = create('BackboneElement') as request, request.method = 'PUT', e33.resource = create('Practitioner') as practitioner then {
                
                associetedEntity->practitioner.meta as meta then {
                  associetedEntity->meta.tag = create('Coding') as coding then {
                    associetedEntity -> coding.system ='http://algoritmodiscoring'"system";
                    associetedEntity -> coding.code ='ClinicalDocument/participant'"code";
                  }"coding";
                }"meta";
                
                associetedEntity.id as id -> practitioner.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext;
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2, e33.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) ;
                  }"r" ;    
              }"identifier";
              associetedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              associetedEntity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"diverso";
              associetedEntity.code -> practitionerRole.code;
              associetedEntity.addr -> practitioner.address;
              associetedEntity.telecom -> practitioner.telecom;
              associetedEntity.associatedPerson as associatedperson then {
              associatedperson.name -> practitioner.name;
              associatedperson.birthTime  as birthTime then{
                birthTime.value as date -> practitioner.birthDate = truncate(date, 10) "birthTimelegal";
              } "birth";
            } "name";
            associetedEntity.scopingOrganization as scopingOrganization ->  bundle.entry as e34, e34.request = create('BackboneElement') as request, request.method = 'PUT', e34.resource = create('Organization') as organization then{
              
              scopingOrganization->organization.meta as meta then {
                scopingOrganization->meta.tag = create('Coding') as coding then {
                  scopingOrganization -> coding.system ='http://algoritmodiscoring'"system";
                  scopingOrganization -> coding.code ='ClinicalDocument/participant/scopingOrganization'"code";
                }"coding";
              }"meta";
              
              scopingOrganization.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  scopingOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e34.fullUrl = append('https://example/Organization/', uuid3),  practitionerRole.organization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organization.id);
                }"r" ;   
            }"identifier";
              scopingOrganization.name as v -> organization.name = (v.other);
              scopingOrganization.telecom -> organization.telecom;
              scopingOrganization.addr -> organization.address; 
              scopingOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e35,  e35.request = create('BackboneElement') as request, request.method = 'PUT',  e35.resource = create('Organization') as organization1  then{
                
                OrgPartOf->organization1.meta as meta then {
                  OrgPartOf->meta.tag = create('Coding') as coding then {
                    OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                    OrgPartOf -> coding.code ='ClinicalDocument/participant/scopingOrganization/asOrganizationPartOf'"code";
                  }"coding";
                }"meta";
                
                OrgPartOf.id as id -> organization1.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,  e35.fullUrl = append('https://example/Organization/', uuid4),  organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id);
                  }"r" ;   
              }"identifier";
                OrgPartOf.code -> organization1.type;
                OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = true;
                OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e36, e36.request = create('BackboneElement') as request, request.method = 'PUT',  e36.resource = create('Organization') as organization2  then {
                  
                  wholeOrgan->organization2.meta as meta then {
                    wholeOrgan->meta.tag = create('Coding') as coding then {
                      wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                      wholeOrgan -> coding.code ='ClinicalDocument/participant/scopingOrganization/asOrganizationPartOf/wholeOrganization'"code";
                    }"coding";
                  }"meta";
                  
                  wholeOrgan.id as id -> organization2.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                      id.extension as ext  ->organization1.id = (r +'-'+ ext) as uuid5,  e36.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id);
                    }"r" ; 
                }"identifier";
                  wholeOrgan.name as v -> organization2.name = (v.other);
                  wholeOrgan.telecom -> organization2.telecom;
                  wholeOrgan.addr -> organization2.address;
                }"wholeOrgan";
              }"OrgPartOf";       
            }"scopingOrganization";
            } "associetedEntity";
            } "Participant2";
   
  

     participant.associatedEntity as associetedEntity where (classCode='NOK') or (classCode='ECON')or (classCode='CAREGIVER') then{
      associetedEntity-> bundle.entry as e3131,   e3131.request = create('BackboneElement') as request, request.method = 'POST',  e3131.resource = create('RelatedPerson') as RelatedPerson, RelatedPerson.id = uuid() as uuid1, e3131.fullUrl = append('https://example/RelatedPerson/', uuid1), request.url= 'RelatedPerson' then {
            associetedEntity->  patientResource.link as link then {
                associetedEntity ->  link.type='refer'"type";
                associetedEntity -> link.other = create('Reference') as reference,  reference.reference = ('https://example/RelatedPerson/' + %RelatedPerson.id) "reference";
                associetedEntity.id->RelatedPerson.identifier;
                associetedEntity-> RelatedPerson.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patientResource.id) "reference";
                associetedEntity.code->RelatedPerson.relationship;
                associetedEntity.telecom->RelatedPerson.telecom;
                associetedEntity.associatedPerson as associatedperson then {
                associatedperson.name->RelatedPerson.name;
            }"associatedPerson";
            }"link";
        }"participant3"; 
    }"WHERE";
 // START PARTICIPANT GUAR
  // src.participant as participant then {
  //   participant.time as timeHigh then {
  //     timeHigh.high as HIGH -> patientResource.identifier as identifierP then {
  //       HIGH -> identifierP.period as periodEnd then{
  //         HIGH as high -> periodEnd.end = (high.value)"periodend";
  //       }"period09";
  //      }"timeH";
  //   }"timePart";
    participant.associatedEntity as associetedentity where (classCode='GUAR') then {
      associetedentity.scopingOrganization as representedOrganization ->  bundle.entry as e37, e37.request = create('BackboneElement') as request, request.method = 'PUT', e37.resource = create('Organization') as organization  then {    
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/participant/scopingOrganization'"code";
          }"coding";
        }"meta";
        
        associetedentity.code -> organization.type;
        associetedentity.scopingOrganization as scopingOrganization then { 
          associetedentity.id as id -> organization.identifier as identifier then {
            participant.time as time then {
              time.high as high ->identifier.period as period then{
               high -> period.end = (high.value)"periodend";
              }"period";
            }"time";
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              associetedentity-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  ->organization.id = (r +'-'+ ext) as uuid1,  e37.fullUrl = append('https://example/Organization/', uuid1), patientResource.generalPractitioner = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid1);
            }"r" ;  
        }"identifier";
        scopingOrganization.name as v -> organization.name = (v.other);
        scopingOrganization.telecom -> organization.telecom;
        scopingOrganization.addr -> organization.address; 
        scopingOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e38,  e38.request = create('BackboneElement') as request, request.method = 'PUT',  e38.resource = create('Organization') as organizationPOF then{
          
          OrgPartOf->organizationPOF.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/participant/scopingOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          
          OrgPartOf.id as id -> organizationPOF.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  ->organizationPOF.id = (r +'-'+ ext) as uuid2, e38.fullUrl = append('https://example/Organization/', uuid2), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organizationPOF.id);
            }"r" ; 
        }"identifier";
          OrgPartOf.code -> organizationPOF.type;
          OrgPartOf.statusCode as status where (value ='active') -> organizationPOF.active = create('boolean'), organizationPOF.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e39,  e39.request = create('BackboneElement') as request, request.method = 'PUT',  e39.resource = create('Organization') as organizationW then {
            
            wholeOrgan->organizationW.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/participant/scopingOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            
            wholeOrgan.id as id -> organizationW.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  ->organizationW.id =(r +'-'+ ext) as uuid3,  e39.fullUrl = append('https://example/Organization/', uuid3), organizationPOF.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organizationW.id) ;
              }"r" ; 
          }"identifier";
            wholeOrgan.name as v -> organizationW.name = (v.other);
            wholeOrgan.telecom -> organizationW.telecom;
            wholeOrgan.addr -> organizationW.address;
          }"wholeOrgan";
        }"OrgPartOf";       
      }"scopingOrganization";
      } "associetedEntity";
    }"repOrg";
  };  
  src.inFulfillmentOf as inFulfillmentOf then{
    inFulfillmentOf.order as order -> bundle.entry as e40,  e40.request = create('BackboneElement') as request, request.method = 'POST', e40.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e40.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest', encounter.basedOn = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then {
        order.id -> serviceRequest.identifier;
        order -> serviceRequest.status='active'"status";
        order -> serviceRequest.intent='order'"intent";
        order -> serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patientResource.id) "reference";
        order -> serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
         order.code -> serviceRequest.code;
        order.priorityCode as priorityCode then{
          priorityCode.code as v -> serviceRequest.priority = translate(v, '#priority', 'code') "priority";
      }"priorityCode";
    } "order";
  } "inFulfillmentOf";
  src.documentationOf as docOf then {
    docOf.serviceEvent as serviceEvent -> tgt.event as event then {
      serviceEvent.code -> event.code "eventCode";
      serviceEvent.effectiveTime as effectiveTime then {
        effectiveTime -> event.period =create('Period') as period then IVLTSPeriod(effectiveTime,period)"period";//as period then {
        //effectiveTime.low -> period.start;
       // effectiveTime.high -> period.end;        
      //  effectiveTime where (effectiveTime.value) -> period.start = create('dateTime') as startP then TSDateTime(effectiveTime,startP) "startP";
      //}"period_DT";
    }"eventDT";
    serviceEvent.effectiveTime as effectivetime1 -> event.period = create('Period') as period then{
        effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
      }"efft";
      serviceEvent.performer as performer ->  bundle.entry as e41, e41.request = create('BackboneElement') as request, request.method = 'POST',  e41.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e41.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
			 performer -> event.detail = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
        performer.assignedEntity as assignedEntity -> bundle.entry as e42,  e42.request = create('BackboneElement') as request, request.method = 'PUT', e42.resource = create('Practitioner') as practitioner then {
            assignedEntity->practitioner.meta as meta then {
            assignedEntity->meta.tag = create('Coding') as coding then {
              assignedEntity -> coding.system ='http://algoritmodiscoring'"system";
              assignedEntity -> coding.code ='ClinicalDocument/documentationOf/serviceEvent/performer'"code";
            }"coding";
          }"meta";

          performer.functionCode -> practitionerRole.code;
          assignedEntity.code -> practitionerRole.code;
          assignedEntity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  ->practitioner.id =(r +'-'+ ext) as uuid2,  e42.fullUrl = append('https://example/Practitioner/', uuid2), practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) ;
            }"r" ; 
        }"identifier";
        assignedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assignedEntity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"diverso";
          assignedEntity.addr -> practitioner.address;
          assignedEntity.telecom -> practitioner.telecom;
          assignedEntity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime  as birthTime then{
              birthTime.value as date -> practitioner.birthDate = truncate(date, 10) "birthTimelegal";
            } "birth";
            
          } "name";
          assignedEntity.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
            
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/documentationOf/serviceEvent/performer/representedOrganization'"code";
              }"coding";
            }"meta";
            
            representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  ->organization.id =(r +'-'+ ext) as uuid3, e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3);
              }"r" ;  
          }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then{
              
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/documentationOf/serviceEvent/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta";
              
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  ->organization1.id =(r +'-'+ ext) as uuid4,  e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id);
                }"r" ;       
            }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2  then{
                
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/documentationOf/serviceEvent/performer/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                  }"coding";
                }"meta";
                
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  ->organization2.id =(r +'-'+ ext) as uuid5,  e10.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id);
                  }"r" ;  
                 }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"asOrganizationPartOf";
          }"RepresentedOrganization";
        }"AssignedEntity";
      }"performer";
   } "docOf";
  };
};
  src where src.componentOf.exists().not() ->  tgt.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then ClinicalDocumentEncounter(src, bundle, encounter,patientResource)"encounterExist";
  src.componentOf as comp then {
    comp where comp.encompassingEncounter.exists().not() ->  tgt.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then ClinicalDocumentEncounter(srcEnc, bundle, encounter,patientResource)"enc";
    comp.encompassingEncounter as srcEnc ->  tgt.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then ClinicalDocumentEncounter(srcEnc, bundle, encounter,patientResource);
    }"encompassingEncounter";
    
    //Related document 
    //   src.relatedDocument as relatedDocument -> tgt.relatesTo as relatesTo then{
    //     relatedDocument where(typeCode = 'RPLC') ->relatesTo.code = 'replaces'"code";
    //     relatedDocument where(typeCode = 'APND') ->relatesTo.code = 'appends'"code"; 
    //     relatedDocument where(typeCode = 'XFRM') ->relatesTo.code = 'transforms'"code"; 
    //     relatedDocument.parentDocument as parentDocument then {
    //     parentDocument -> relatesTo.target = create('Reference') as reference,  reference.reference = 'https://example/CompositionPadre/' "referenceComposition";
    //   } "parentDocument";
    // }"relatto";
}

group ClinicalDocumentRelatesTo(source src: parentDocument, target tgt: composition){
    src.id -> tgt.identifier;
    src.code -> tgt.type;
    src.setId -> tgt.identifier;
    src.versionNumber as vNumber -> tgt.extension as ext then ChExtEprVersionNumber(vNumber, ext) "versionNumberEXT";
}



group EXTbirthplace(source src : AD, target ext : Extension) {
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/patient-birthPlace' "url";
  src -> ext.value = create('Address') as value then ADAddress(src, value) "value";

} 
group ClinicalDocumentPatientRole(source src : PatientRole, target tgt : Patient, target bundle : Bundle) {
  src.addr -> tgt.address;
  src.telecom -> tgt.telecom;
  src.patient as patient then {
    patient.name -> tgt.name;
    patient.administrativeGenderCode as gender then {
      gender.code as v -> tgt.gender = translate(v, '#cm-v3-administrative-gender', 'code') "gender";
    } "gender";
    patient.birthTime  as birthTime then{
      birthTime.value as date -> tgt.birthDate = truncate(date, 10) "birthTimelegal";
    } "birth";
    patient.deceasedInd as deceased where (value='false')-> tgt.deceased = create('boolean'), tgt.deceased = false "deceasedBL";
    patient.deceasedInd as deceased where (value='true') then {
        patient.deceasedTime as Time-> tgt.deceased = create('dateTime') as deceasedTime then TSDateTime(Time,deceasedTime);
    };
    patient.deceasedTime as Timet where Timet.empty() -> tgt.deceased = create('boolean'), tgt.deceased = true "deceasedBL";
    patient.maritalStatusCode -> tgt.maritalStatus "maritalStatus";
    patient.guardian as guardian then {
        guardian.guardianPerson as person -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('RelatedPerson') as relatedPerson,  relatedPerson.id = uuid() as uuid1,  e.fullUrl = append('https://example/RelatedPerson/', uuid1), request.url= 'RelatedPerson' then {
         person.name -> relatedPerson.name;
          person.birthTime  as birthTime then{
            birthTime.value as date -> relatedPerson.birthDate = truncate(date, 10) "birthTimelegal";
          } "birth";
          person-> relatedPerson.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %tgt.id) "reference";
          person ->  tgt.link as link then {
          person ->  link.type='refer'"type";
          person -> link.other = create('Reference') as reference,  reference.reference = ('https://example/RelatedPerson/' + %relatedPerson.id) "reference";
           guardian.addr -> relatedPerson.address;
           guardian.telecom -> relatedPerson.telecom;
           guardian.id -> relatedPerson.identifier;
           guardian.code -> relatedPerson.relationship;
         } "person";
       }"guardianPerson";
        guardian.guardianOrganization as guardianorg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organizationcontact then {
           
          guardianorg->organizationcontact.meta as meta then {
            guardianorg->meta.tag = create('Coding') as coding then {
              guardianorg -> coding.system ='http://algoritmodiscoring'"system";
              guardianorg -> coding.code ='ClinicalDocument/recordTarget/PatientRole/patient/guardian/guardianOrganization'"code";
            }"coding";
          }"meta";
          
          guardianorg ->  tgt.contact as contact then {
            guardianorg -> contact.organization  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organizationcontact.id) "OrganizationContact";
            guardianorg.id as id -> organizationcontact.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                guardianorg-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  ->organizationcontact.id =(r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Organization/', uuid2);
              }"r" ;

          }"identifier";
                 guardianorg.name as v -> organizationcontact.name = (v.other);
                 guardianorg.telecom -> organizationcontact.telecom;
                 guardianorg.addr -> organizationcontact.address;
            guardianorg.asOrganizationPartOf as OrgPartOf -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'PUT',  e2.resource = create('Organization') as organizationpartOf  then {
               
              OrgPartOf->organizationpartOf.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/recordTarget/PatientRole/patient/guardian/guardianOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta";
           
              OrgPartOf -> organizationcontact.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organizationpartOf.id) "asorganization";
               OrgPartOf.id as id -> organizationpartOf.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  ->organizationpartOf.id =(r +'-'+ ext) as uuid3,  e2.fullUrl = append('https://example/Organization/', uuid3) ;
                }"r" ;  
            }"identifier";
                OrgPartOf.code -> organizationpartOf.type;
                OrgPartOf.statusCode as status where (value ='active') -> organizationpartOf.active = 'true';
                    OrgPartOf.wholeOrganization as wholeORG -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as WholeOrganization then {
                       
                      wholeORG->WholeOrganization.meta as meta then {
                        wholeORG->meta.tag = create('Coding') as coding then {
                          wholeORG -> coding.system ='http://algoritmodiscoring'"system";
                          wholeORG -> coding.code ='ClinicalDocument/recordTarget/PatientRole/patient/guardian/guardianOrganization/asOrganizationPartOf/wholeOrganization'"code";
                        }"coding";
                      }"meta";
                      
                      wholeORG -> organizationpartOf.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %WholeOrganization.id) "asOrganization";
                       wholeORG.id as id -> WholeOrganization.identifier as identifier then {
                        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                        id.extension as ext->identifier.value = ext then {
                          wholeORG-> request.url = append('Organization?identifier=',ext)"UUID";
                        }"ext";
                        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                        id.root as r then {
                          id.extension as ext  ->WholeOrganization.id =(r +'-'+ ext) as uuid4,  e3.fullUrl = append('https://example/Organization/', uuid4);
                        }"r" ; 
                    }"identifier";
                       wholeORG.name as v -> WholeOrganization.name = (v.other);
                      wholeORG.telecom -> WholeOrganization.telecom;
                      wholeORG.addr -> WholeOrganization.address;
                      }"WholeOrganization";
                 }"OrganizationPartOf";
              }"contact";
         } "guardianorganization";
    }"guardian";
    patient.birthplace as birthplace then {
      birthplace.place as place then {
       place.addr as address-> tgt.extension as ext1 then EXTbirthplace(address, ext1) "birthplace";
         } "place";
      }"birthplace";
 src.providerOrganization as org ->  bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as providerorganization then {
      
      org->providerorganization.meta as meta then {
        org->meta.tag = create('Coding') as coding then {
          org -> coding.system ='http://algoritmodiscoring'"system";
          org -> coding.code ='ClinicalDocument/recordTarget/PatientRole/patient/providerOrganization'"code";
            }"coding";
      }"meta";
  
      
       org.id as id -> providerorganization.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext then {
          org-> request.url = append('Organization?identifier=',ext)"UUID";
        }"ext";
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        id.root as r then {
          id.extension as ext  ->providerorganization.id =(r +'-'+ ext) as uuid5,  e4.fullUrl = append('https://example/Organization/', uuid5), tgt.managingOrganization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %providerorganization.id) "reference";
        }"r" ;  
    }"identifier";
          org.name as v -> providerorganization.name = (v.other);
           org.telecom -> providerorganization.telecom;
            org.addr -> providerorganization.address;
            org.asOrganizationPartOf as OrgPartOfProvider ->bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organizationpartOfprovider then {
              
              OrgPartOfProvider->organizationpartOfprovider.meta as meta then {
                OrgPartOfProvider->meta.tag = create('Coding') as coding then {
                  OrgPartOfProvider -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOfProvider -> coding.code ='ClinicalDocument/recordTarget/PatientRole/patient/providerOrganization/asOrganizationPartOf'"code";
                    }"coding";
              }"meta";
              
              
              OrgPartOfProvider.id as id -> organizationpartOfprovider.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOfProvider-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  ->organizationpartOfprovider.id =(r +'-'+ ext) as uuid6,  e5.fullUrl = append('https://example/Organization/', uuid6),providerorganization.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organizationpartOfprovider.id) "asorganization";
                }"r" ;    
            }"identifier";
              OrgPartOfProvider.code -> organizationpartOfprovider.type;
              OrgPartOfProvider.statusCode as status where (value ='active') -> organizationpartOfprovider.active = 'true';
              OrgPartOfProvider.wholeOrganization as wholeORGproveder-> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'PUT',  e6.resource = create('Organization') as WholeOrganizationprovider then {
                
                wholeORGproveder->WholeOrganizationprovider.meta as meta then {
                  wholeORGproveder->meta.tag = create('Coding') as coding then {
                    wholeORGproveder -> coding.system ='http://algoritmodiscoring'"system";
                    wholeORGproveder -> coding.code ='ClinicalDocument/recordTarget/PatientRole/patient/providerOrganization/asOrganizationPartOf/wholeOrganization'"code";
                      }"coding";
                }"meta";
                
                wholeORGproveder-> organizationpartOfprovider.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %WholeOrganizationprovider.id) "asOrganization";
                wholeORGproveder.id as id -> WholeOrganizationprovider.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeORGproveder-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  ->WholeOrganizationprovider.id =(r +'-'+ ext) as uuid7,  e6.fullUrl = append('https://example/Organization/', uuid7);
                  }"r" ;   
              }"identifier";
                wholeORGproveder.name as v -> WholeOrganizationprovider.name = (v.other);
                wholeORGproveder.telecom -> WholeOrganizationprovider.telecom;
                wholeORGproveder.addr -> WholeOrganizationprovider.address;
              }"wholeOrganizationprovider";
            }"OrganizationPartOfprovider";
  } "organization";
   
 }"patient";
}
group CustodianOrganization(source src : CustodianOrganization, target tgt : Organization){
 src.name as v -> tgt.name = (v.other);
  src.telecom -> tgt.telecom;
  src.addr -> tgt.address;
 
 }
 
group ClinicalDocumentEncounter(source src : EncompassingEncounter, target bundle : Bundle, target encounter : Encounter, target patient : Patient) {
  src.id -> encounter.identifier;
  src.code as code1-> encounter.class = create('Coding') as coding then {
   code1.code as code -> coding.code = cast(code, 'string');
    code1.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
   code1.displayName as display->coding.display= cast(display, 'string');
  }"class";
  src where src.code.exists().not()-> encounter.class = create('Coding') as coding then {
    src  -> coding.code ='AMB' "code";
    src ->coding.system= 'http://terminology.hl7.org/CodeSystem/v3-ActCode' "codeS";
    src ->coding.display= 'ambulatory' "display";
   }"NonCodeclass";
  src -> encounter.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
  src -> encounter.status='finished'"status";
  // effectiveTime=period
  src where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  src.effectiveTime as eff  -> encounter.period=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  // effectiveTime = time-stamp
  src where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
  src.effectiveTime as effectivetime1 -> encounter.period = create('Period') as period then{
    effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
  }"efft";
  }"where";
 // src.effectiveTime as effectivetime1 -> encounter.period as period, period.start=(effectivetime1.value);
  src.dischargeDispositionCode as dischargeDispositionCode then{
    dischargeDispositionCode -> encounter.hospitalization as hospitalization then{ 
        dischargeDispositionCode -> hospitalization.dischargeDisposition "disDisp";
        }"disposition";
  } "discharge";

  src.responsibleParty as responsibleParty -> encounter.participant as participant then {
    responsibleParty.assignedEntity as entity ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', participant.individual = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
        entity.code -> practitionerRole.code;
        entity-> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',  e1.resource = create('Practitioner') as practitioner then {
          
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/responsibleParty'"code";
                }"coding";
          }"meta";
          
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  ->practitioner.id =(r +'-'+ ext) as  uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id);
            }"r" ; 
          }"identifier";
          entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          entity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
          entity.addr -> practitioner.address;
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime as birthTime then{
              birthTime.value as date -> practitioner.birthDate = truncate(date,10) "birthTimeENC";
            } "birth";
       } "name";
       }"practitioner";
       entity.representedOrganization as raporg ->  bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'PUT',  e2.resource = create('Organization') as rapresentedorganization then {
           
        raporg->rapresentedorganization.meta as meta then {
          raporg->meta.tag = create('Coding') as coding then {
            raporg -> coding.system ='http://algoritmodiscoring'"system";
            raporg -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/responsibleParty/representedOrganization'"code";
                }"coding";
          }"meta";
        
          //raporg.id -> rapresentedorganization.identifier;
           raporg.id as id -> rapresentedorganization.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              raporg-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> rapresentedorganization.id =(r +'-'+ ext) as uuid3,  e2.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %rapresentedorganization.id);
            }"r" ;  
            }"identifier";
           raporg.name as v -> rapresentedorganization.name = (v.other);
           raporg.telecom -> rapresentedorganization.telecom;
           raporg.addr -> rapresentedorganization.address;
           raporg.asOrganizationPartOf as OrgPartOf -> bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization1,  organization1.id = uuid() as uuid4,  e3.fullUrl = append('https://example/Organization/', uuid4), rapresentedorganization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) then{
            //OrgPartOf.id -> organization1.identifier;
            
            OrgPartOf->organization1.meta as meta then {
              OrgPartOf->meta.tag = create('Coding') as coding then {
                OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                OrgPartOf -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/responsibleParty/representedOrganization/asOrganizationPartOf'"code";
                    }"coding";
              }"meta";
            
            OrgPartOf.id as id -> organization1.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization1.id =(r +'-'+ ext) as uuid4,  e3.fullUrl = append('https://example/Organization/', uuid4), rapresentedorganization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id);
              }"r" ;  
            }"identifier";
            OrgPartOf.code -> organization1.type;
            OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = true;
            OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization2 then {
             // wholeOrgan.id -> organization2.identifier;
             
             wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/responsibleParty/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                    }"coding";
              }"meta";
             
             wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id =(r +'-'+ ext) as uuid5,  e4.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) ;
              }"r" ; 
            }"identifier";
              wholeOrgan.name as v -> organization2.name = (v.other);
              wholeOrgan.telecom -> organization2.telecom;
              wholeOrgan.addr -> organization2.address;
            }"wholeOrgan";
          }"OrgPartOf";       
   } "organization";
    }"entity";
 }"particpant";

 src.encounterParticipant as participant  then {
    participant.assignedEntity as assignedEntity -> bundle.entry as e313,   e313.request = create('BackboneElement') as request, request.method = 'POST',  e313.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1 ,  e313.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1 then { 
   // participant.time as time->participant1.period as period ,period.start=(time.value);
    participant->participant1.period=create('Period') as period then {
        participant.time as time ->period.start= create('dateTime') as start then TSDateTime(time,start);
      }"period";
     participant as p -> participant1.type as type then { 
       p -> type.coding as coding then{
         p-> coding.code = (p.typeCode) "codice";
         p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
       } "codeType"; 
     }"type";
     participant-> participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id)"par";
     participant.functionCode -> practitionerRole.code;
     assignedEntity  -> bundle.entry as e33, e33.request = create('BackboneElement') as request, request.method = 'PUT', e33.resource = create('Practitioner') as practitioner then {
       
        assignedEntity->practitioner.meta as meta then {
        assignedEntity->meta.tag = create('Coding') as coding then {
        assignedEntity -> coding.system ='http://algoritmodiscoring'"system";
        assignedEntity -> coding.code ='ClinicalDocument/encounterParticipant'"code";
         }"coding";
       }"meta";
       
       assignedEntity.id as id -> practitioner.identifier as identifier then {
         id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
         id.extension as ext->identifier.value = ext;
         id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
         id.root as r then {
           id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2, e33.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) ;
         }"r" ;    
     }"identifier";
     assignedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
       id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
     }"2.16.840.1.113883.2.9.4.3.2";
     assignedEntity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
    }"diverso";
     assignedEntity.code -> practitionerRole.code;
     assignedEntity.addr -> practitioner.address;
     assignedEntity.telecom -> practitioner.telecom;
     assignedEntity.associatedPerson as assignedPerson then {
        assignedPerson.name -> practitioner.name;
        assignedPerson.birthTime  as birthTime then{
          birthTime.value as date -> practitioner.birthDate = truncate(date, 10) "birthTimelegal";
        } "birth";
   } "name";
   assignedEntity.representedOrganization as representedOrganization ->  bundle.entry as e34, e34.request = create('BackboneElement') as request, request.method = 'PUT', e34.resource = create('Organization') as organization then{
     
    representedOrganization->organization.meta as meta then {
        representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/encounterParticipant/scopingOrganization'"code";
       }"coding";
     }"meta";
     
     representedOrganization.id as id -> organization.identifier as identifier then {
       id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
       id.extension as ext->identifier.value = ext then {
        representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
       }"ext";
       id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
       id.root as r then {
         id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e34.fullUrl = append('https://example/Organization/', uuid3),  practitionerRole.organization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %organization.id);
       }"r" ; 
   }"identifier";
   representedOrganization.name as v -> organization.name = (v.other);
   representedOrganization.telecom -> organization.telecom;
   representedOrganization.addr -> organization.address; 
   representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e35,  e35.request = create('BackboneElement') as request, request.method = 'PUT',  e35.resource = create('Organization') as organization1 then{
       OrgPartOf.id as id -> organization1.identifier as identifier then {
         
         OrgPartOf->organization1.meta as meta then {
           OrgPartOf->meta.tag = create('Coding') as coding then {
             OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
             OrgPartOf -> coding.code ='ClinicalDocument/encounterParticipant/scopingOrganization/asOrganizationPartOf'"code";
           }"coding";
         }"meta";
         
         id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
         id.extension as ext->identifier.value = ext then {
           OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
         }"ext";
         id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
         id.root as r then {
           id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,  e35.fullUrl = append('https://example/Organization/', uuid4),  organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) ;
         }"r" ;   
     }"identifier";
       OrgPartOf.code -> organization1.type;
       OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = true;
       OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e36, e36.request = create('BackboneElement') as request, request.method = 'PUT',  e36.resource = create('Organization') as organization2 then {
         
         wholeOrgan->organization2.meta as meta then {
           wholeOrgan->meta.tag = create('Coding') as coding then {
             wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
             wholeOrgan -> coding.code ='ClinicalDocument/encounterParticipant/scopingOrganization/asOrganizationPartOf/wholeOrganization'"code";
           }"coding";
         }"meta";

         
         wholeOrgan.id as id -> organization2.identifier as identifier then {
           id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
           id.extension as ext->identifier.value = ext then {
             wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
           }"ext";
           id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
           id.root as r then {
             id.extension as ext  -> organization1.id= (r +'-'+ ext) as uuid5,  e36.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)  ;
           }"r" ;   
       }"identifier";
         wholeOrgan.name as v -> organization2.name = (v.other);
         wholeOrgan.telecom -> organization2.telecom;
         wholeOrgan.addr -> organization2.address;
            }"wholeOrgan";
         }"OrgPartOf";       
       }"representedOrganization";
    } "assignedEntity";
  } "Participant";
 };
 src.location as Location then {
  Location.healthCareFacility as HCF -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'PUT', e5.resource = create('Location') as loc then {
    
    HCF->loc.meta as meta then {
      HCF->meta.tag = create('Coding') as coding then {
        HCF -> coding.system ='http://algoritmodiscoring'"system";
        HCF -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/location/healthCareFacility'"code";
            }"coding";
      }"meta";
    
    HCF -> encounter.location as locations then {
   
    
    HCF.id as id -> loc.identifier as identifier then {
      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
      id.extension as ext-> identifier.value = ext then {
        HCF-> request.url = append('Location?identifier=',ext)"UUID";
      }"ext";
      id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      id.root as r then {
        id.extension as ext  -> loc.id =(r +'-'+ ext) as uuid6,  e5.fullUrl = append('https://example/Location/', uuid6), locations.location = create('Reference') as reference, reference.reference = ('https://example/Location/' + %loc.id)"locc";
      }"r" ; 
      }"identifier";
      HCF.code -> loc.type;
      HCF.location as srcLocation then {
        srcLocation.name as v -> loc.name = (v.other);
        srcLocation.addr -> loc.address;
      }"location2";
     HCF.serviceProviderOrganization as servProvOrg ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT',  e.resource = create('Organization') as serviceProviderOrganization  then {
      
      servProvOrg->serviceProviderOrganization.meta as meta then {
        servProvOrg->meta.tag = create('Coding') as coding then {
          servProvOrg -> coding.system ='http://algoritmodiscoring'"system";
          servProvOrg -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/location/healthCareFacility/serviceProviderOrganization'"code";
              }"coding";
        }"meta";
      
      servProvOrg.id as id -> serviceProviderOrganization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            servProvOrg-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> serviceProviderOrganization.id =(r +'-'+ ext) as uuid,  e.fullUrl = append('https://example/Organization/', uuid), loc.managingOrganization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %serviceProviderOrganization.id);
          }"r" ;  
        }"identifier";
        servProvOrg.name as v -> serviceProviderOrganization.name = (v.other);
        servProvOrg.telecom -> serviceProviderOrganization.telecom;
        servProvOrg.addr -> serviceProviderOrganization.address;
        servProvOrg.asOrganizationPartOf as asOrgPartOf then {
        asOrgPartOf as asOrgPartOf1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Organization') as asorganization then {
            
          asOrgPartOf1->asorganization.meta as meta then {
            asOrgPartOf1->meta.tag = create('Coding') as coding then {
              asOrgPartOf1 -> coding.system ='http://algoritmodiscoring'"system";
              asOrgPartOf1 -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/location/healthCareFacility/serviceProviderOrganization/asOrganizationPartOf'"code";
                  }"coding";
            }"meta";

            asOrgPartOf1.id as id -> asorganization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                asOrgPartOf1-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> asorganization.id =(r +'-'+ ext) as uuid1,  e1.fullUrl = append('https://example/Organization/', uuid1), serviceProviderOrganization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %asorganization.id);
              }"r" ;  
            }"identifier";
            asOrgPartOf1.code -> asorganization.type;
            asOrgPartOf1.statusCode as status where (code='active') -> asorganization.active = create('boolean'), asorganization.active = 'true';
            asOrgPartOf1.wholeOrganization as wholeOrg then{
                wholeOrg as wholeOrg1 -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Organization') as wholeorganization then {
                   
                  wholeOrg1->wholeorganization.meta as meta then {
                    wholeOrg1->meta.tag = create('Coding') as coding then {
                      wholeOrg1 -> coding.system ='http://algoritmodiscoring'"system";
                      wholeOrg1 -> coding.code ='ClinicalDocument/componentOf/EncompassingEncounter/location/healthCareFacility/serviceProviderOrganization/asOrganizationPartOf'"code";
                          }"coding";
                    }"meta";

                    wholeOrg1.id as id -> asorganization.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                        wholeOrg1-> request.url = append('Organization?identifier=',ext)"UUID";
                      }"ext";
                      id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                      id.root as r then {
                        id.extension as ext  ->  wholeorganization.id =(r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Organization/', uuid2), asorganization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %wholeorganization.id);
                      }"r" ;    
                    }"identifier";
                    wholeOrg1.name as v -> wholeorganization.name = (v.other);
                    wholeOrg1.telecom -> wholeorganization.telecom;
                    wholeOrg1.addr -> wholeorganization.address;
                  }"wholeOrg1";
              }"wholeOrg";
          }"OrganizationPartOfprovider";
       }"asOrg1";
    }"SPO";
 // }"location1";
}"hcf";
  }"location1"; 
 }"location";

}

group ClinicalDocumentationOf(source src: representedOrganization, target tgt: organization, target bundle : Bundle){
  src.name -> tgt.name;
  src.telecom -> tgt.telecom;
  src.addr -> tgt.address;
  src.asOrganizationPartOf as asOrganizationPartOf then {
        asOrganizationPartOf -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT',  e.resource = create('Organization') as organization2  then {
          
          asOrganizationPartOf->organization2.meta as meta then {
            asOrganizationPartOf->meta.tag = create('Coding') as coding then {
              asOrganizationPartOf -> coding.system ='http://algoritmodiscoring'"system";
              asOrganizationPartOf -> coding.code ='ClinicalDocument/documentationOf/serviceEvent/performer/representedOrganization/asOrganizationPartOf'"code";
                  }"coding";
            }"meta";
          
          asOrganizationPartOf.id as id -> organization2.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext-> identifier.value = ext then {
              asOrganizationPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  ->  organization2.id =(r +'-'+ ext) as uuid,  e.fullUrl = append('https://example/Organization/', uuid), tgt.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/'+ %organization2.id);
            }"r" ;   
        }"identifier";
          asOrganizationPartOf.code -> organization2.type;
          asOrganizationPartOf.statusCode where(value = 'active') -> organization2.active = 'true';
          asOrganizationPartOf.wholeOrganization as wholeOrganization -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization3  then{
            
            wholeOrganization->organization3.meta as meta then {
              wholeOrganization->meta.tag = create('Coding') as coding then {
                wholeOrganization -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrganization -> coding.code ='ClinicalDocument/documentationOf/serviceEvent/performer/representedOrganization/asOrganizationPartOf'"code";
                    }"coding";
              }"meta";
            
            wholeOrganization.id as id -> organization3.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
               wholeOrganization -> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  ->  organization3.id =(r +'-'+ ext) as uuid1,  e.fullUrl = append('https://example/Organization/', uuid1), organization2.partOf = create('Reference') as referenceOrg, referenceOrg.reference = append('https://example/Organization/', uuid1);
              }"r" ;  
          }"identifier";
            wholeOrganization.id -> organization3.identifier;
            wholeOrganization.name -> organization3.name;
            wholeOrganization.telecom -> organization3.telecom;
            wholeOrganization.addr -> organization3.address;
          } "wholeOrganization";
    } "organizationPartOf";
  } "creation";
 }




// group ClinicalDocumentLocation(source src : HealthCareFacility, target bundle : Bundle, target loc : Location){
//     src.id -> loc.identifier;
//     src.code -> loc.type;
//     src.location as srcLocation then {
//     srcLocation.name as v -> loc.name = (v.other);
//     srcLocation.addr -> loc.address;
//     }"location2";
//     src.serviceProviderOrganization as servProvOrg ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT',  e.resource = create('Organization') as serviceProviderOrganization,  serviceProviderOrganization.id = uuid() as uuid,  e.fullUrl = append('https://example/Organization/', uuid),  loc.managingOrganization = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %serviceProviderOrganization.id)  then {
      
//       servProvOrg->serviceProviderOrganization.meta as meta then {
//         servProvOrg->meta.tag = create('Coding') as coding then {
//           servProvOrg -> coding.system ='http://algoritmodiscoring'"system";
//           servProvOrg -> coding.code ='ClinicalDocument/author'"code";
//               }"coding";
//         }"meta";
      
//       servProvOrg.id as id -> serviceProviderOrganization.identifier as identifier then {
//         id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
//         id.extension as ext-> identifier.value = ext then {
//           servProvOrg-> request.url = append('Organization?identifier=',ext)"UUID";
//         }"ext";
//         id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
//     }"identifier";
//       servProvOrg.id -> serviceProviderOrganization.identifier;
//             servProvOrg.name as v -> serviceProviderOrganization.name = (v.other);
//             servProvOrg.telecom -> serviceProviderOrganization.telecom;
//             servProvOrg.addr -> serviceProviderOrganization.address;
//             servProvOrg.asOrganizationPartOf as asOrgPartOf then {
//             asOrgPartOf as asOrgPartOf1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Organization') as asorganization,  asorganization.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Organization/', uuid1),   serviceProviderOrganization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %asorganization.id) then {
              
//               asOrgPartOf1->asorganization.meta as meta then {
//                 asOrgPartOf1->meta.tag = create('Coding') as coding then {
//                   asOrgPartOf1 -> coding.system ='http://algoritmodiscoring'"system";
//                   asOrgPartOf1 -> coding.code ='ClinicalDocument/author'"code";
//                       }"coding";
//                 }"meta";
              
//               asOrgPartOf1.id as id -> asorganization.identifier as identifier then {
//                 id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
//                 id.extension as ext-> identifier.value = ext then {
//                   asOrgPartOf1-> request.url = append('Organization?identifier=',ext)"UUID";
//                 }"ext";
//                 id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
//             }"identifier";
//               asOrgPartOf1.id -> asorganization.identifier;
//                 asOrgPartOf1.code -> asorganization.type;
//                 asOrgPartOf1.statusCode as status where (code='active') -> asorganization.active = create('boolean'), asorganization.active = 'true';
//                 //asOrgPartOf1.effectiveTime -> 
//                 asOrgPartOf1.wholeOrganization as wholeOrg then{
//                     wholeOrg as wholeOrg1 -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Organization') as wholeorganization,  wholeorganization.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Organization/', uuid2),  asorganization.partOf = create('Reference') as reference, reference.reference = ('https://example/Organization/' + %wholeorganization.id) then {
                      
//                       wholeOrg1->wholeorganization.meta as meta then {
//                         wholeOrg1->meta.tag = create('Coding') as coding then {
//                           wholeOrg1 -> coding.system ='http://algoritmodiscoring'"system";
//                           wholeOrg1 -> coding.code ='ClinicalDocument/author'"code";
//                               }"coding";
//                         }"meta";
                      
//                       wholeOrg1.id as id -> wholeorganization.identifier as identifier then {
//                         id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
//                         id.extension as ext->identifier.value = ext then {
//                          wholeOrg1 -> request.url = append('Organization?identifier=',ext)"UUID";
//                         }"ext";
//                         id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
//                     }"identifier";
//                       wholeOrg1.id -> wholeorganization.identifier;
//                         wholeOrg1.name as v -> wholeorganization.name = (v.other);
//                         wholeOrg1.telecom -> wholeorganization.telecom;
//                         wholeOrg1.addr -> wholeorganization.address;
//                     }"wholeOrg1";
//                 }"wholeOrg";
//             }"OrganizationPartOfprovider";
//         }"asOrg1";
//     }"SPO";
// }

group ChExtEprVersionNumber(source src: INT, target ext: Extension) {
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/composition-clinicaldocument-versionNumber' "url";
  src.value as v -> ext.value = cast(v, 'string')"value";
}

group ClinicalDocumentOrganization(source src : CustodianOrganization, target tgt : Organization) {
  src.id -> tgt.identifier;
  src.name as v -> tgt.name = (v.other);
  src.telecom -> tgt.telecom;
  src.addr -> tgt.address;
}
 ", "subType": "00"}}, "filename": "FULLHEADER_v3.4.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:01.619Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d0c091c057abd6ef9c9"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/LetteraDimissioneOspedaliera", "version": "2.8", "template_id_root": ["2.16.840.1.113883.2.9.10.1.5"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/LetteraDimissioneOspedaliera" = "LetteraDimissioneOspedaliera"

conceptmap "AllergyTypeMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"

  prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

  s:OINT == t:intolerance
  s:ALG == t:allergy
  s:DALG == t:allergy
  s:EALG == t:allergy
  s:FALG == t:allergy
  s:NAINT == t:intolerance
  s:FNAINT == t:intolerance
  s:DNAINT == t:intolerance
  s:ENAINT == t:intolerance
  s:FINT == t:intolerance
  s:DINT == t:intolerance
  s:EINT == t:intolerance
}

conceptmap "AllergyCategoryMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

  s:DALG == t:medication
  s:EALG == t:enviroment
  s:FALG == t:food
  s:FNAINT == t:food
  s:DNAINT == t:medication
  s:ENAINT == t:enviroment
  s:FINT == t:food
  s:DINT == t:medication
  s:EINT == t:enviroment
}

conceptmap "AllergyCriticality" {

  prefix s = "https://art-decor.org/art-decor/decor-valuesets--hl7it-?id=2.16.840.1.113883.2.9.77.22.11.6"
  prefix t = "https://www.hl7.org/fhir/codesystem-allergy-intolerance-criticality.html"
  
  s:L == t:low
  s:H == t:high
  s:M == t:unable_to_assess
}


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('https://example/DocumentReference/', uuid5), request.url = 'DocumentReference' then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
   cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
      patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext->identifier.value = ext;
        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
      }"record";
      patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
      or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
      or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
      or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
      or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
      or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
      or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
      or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
      or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
      or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
      or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
      or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
      or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
        id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
        }"ext";
    }"recPat";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
       //discretizzi il primo livello di component 
	     component.section as srcSection then {
        srcSection.code where(code = '46241-6') -> composition.section as tgtSection  then ClinicalDocumentSectionMotivoRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "motivoRicovero";
        srcSection.code where(code = '47039-3') -> composition.section as tgtSection  then ClinicalDocumentSectionInquadramentoClinico(cda, srcSection, patient, tgtSection, bundle,encounter) "inquadramentoClinico";
        srcSection.code where(code = '8648-8')  ->  composition.section as tgtSection  then ClinicalDocumentSectionDecorsoOspedaliero(cda, srcSection, patient, tgtSection, bundle,encounter) "DecorsoOspedaliero";
        srcSection.code where(code = '55109-3') -> composition.section as tgtSection  then ClinicalDocumentSectionComplicanze(cda, srcSection, patient, tgtSection, bundle,encounter) "Complicazioni";
        srcSection.code where(code = '11493-4') -> composition.section as tgtSection  then ClinicalDocumentSectionRiscontri(cda, srcSection, patient, tgtSection, bundle,encounter) "HospitalDischargeStudiesSummary";
        srcSection.code where(code = '34104-0') -> composition.section as tgtSection  then ClinicalDocumentSectionConsulenza(cda, srcSection, patient, tgtSection, bundle,encounter) "HospitalDischargeStudiesSummary";
        srcSection.code where(code = '30954-2') -> composition.section as tgtSection  then ClinicalDocumentSectionEsamiEseguitiRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "EsamiEseguitiDuranteilRicovero";
        srcSection.code where(code = '47519-4') -> composition.section as tgtSection  then ClinicalDocumentSectionProcedureEseguiteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "HistoryOfProceduresDocument";
        srcSection.code where(code = '48765-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAllergie(cda, srcSection, patient, tgtSection, bundle,encounter) "EsamiEseguitiDuranteIlRicovero";
        srcSection.code where(code = '10160-0') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(cda, srcSection, patient, tgtSection, bundle,encounter) "TerapiaFarmacologicaAllaDimissione";       
        srcSection.code where(code = '11535-2') -> composition.section as tgtSection  then ClinicalDocumentSectionDiagnosiDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "DiagnosiDiDimissione";
        srcSection.code where(code = '18776-5') -> composition.section as tgtSection  then ClinicalDocumentSectionIstruzioniFollowUp(cda, srcSection, patient, tgtSection, bundle,encounter) "DiagnosiDiDimissione";
        srcSection.code where(code = '10183-2') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "TerapiaFarmacologicaAllaDimissione";
       };
      };
    } "body";
  };
}


// -------------------------------------------------------------------------------------------------------------------


group ClinicalDocumentSectionMotivoRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then {
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
     } "cdaText";
   } "cText";
 src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
   } "entry";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
      src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
        src.code -> Observation.code;
        src where observation.statusCode.exists().not() then {
          src->Observation.status ='final'"status";
        }"statuscode";
        cdaText -> Observation.note as note then{
          cdaText as t ->note.text =t "reference";
        }"reference";
      }"cdaText";
  }"where";
}

group ClinicalDocumentSectionInquadramentoClinico(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      // ANAMNESI
      section2 -> tgt.section as sec2 then{
      section2.code where(code = '11329-0') ->  sec2.code;
        section2.title as t -> sec2.title = (t.dataString);
        //section2.code -> sec2.code;
        src where src.entry.exists() then{
          section2.text as cdaText -> sec2.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";          
          } "cdaText";  
        }"exist";

        src where src.entry.exists().not() then {
          section2.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', sec2.entry = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %condition.id) then {
              section2.code -> condition.code;
              src where condition.statusCode.exists().not() then {
                src->condition.status ='final'"status";
              }"statuscode";
              cdaText -> condition.note as note then{
                cdaText->condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";          
                cdaText->condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";       
                cdaText as t ->note.text =t "reference";
              }"reference";
          }"cdaText";
        }"where";

        section2.entry as entry1 then {
          entry1.observation as obs then {
            //EntryRelationship per il Problem
            obs.code where (code = '75326-9')  then {
            obs->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Condition') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Condition/', uuid1), request.url = 'Condition', sec2.entry = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then{
            obs.code -> condition.category;
            obs->condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            obs->condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            obs.statusCode as status where (code='completed') -> condition.verificationStatus as status2 then {
              status ->  status2.coding as status3 then{
                status -> status3.code ='confirmed' "finald";
                status -> status3.system='http://terminology.hl7.org/CodeSystem/condition-ver-status'"system";
              }"st3";
            }"status";
            obs.effectiveTime as effective1 then {
              effective1 where effective1.low.exists() or effective1.high.exists() then{
                effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                }"ef";
              }"effectivetime1";
            
            obs.value:CD as val then{
              val->condition.code =create('CodeableConcept') as ce then {
                val.originalText -> ce.text;
                val -> ce.coding as coding then {
                val.code as code -> coding.code = cast(code, 'string');
                val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                val.displayName as display -> coding.display = cast(display, 'string');
                }"coding";  
              }"Ce"; 
            }"Value";
            obs.entryRelationship as entriRel  then{
              entriRel -> condition.evidence = create('BackboneElement') as evidence then{
              entriRel.observation as observation2 then {
                observation2.code as code then {
                code.code where (code.code = '89261-2') then { 
                  obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' then {
              
                   entriRel -> evidence.detail  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) "ref";
                  
                observation2.code -> observation.code;
                  observation2 where observation.statusCode.exists().not() then {
                    observation2->observation.status ='final'"status";
                    }"statuscode";            
                  observation2.text as text -> observation.note = create('Annotation') as note then{
                    text.reference as ref -> note.text = (ref.value) "val";
                  }"Annontation"; 
                  obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                  obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
                  observation2.statusCode as statusc where (code='completed') -> ob.status ='final';
                  observation2.statusCode as statusc where (code='active') -> ob.status ='registered';
                  observation2.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
                  observation2.statusCode as statusc where (code='suspended') -> ob.status ='partial';
                  observation2.value:INT as int->ob.value=(int.value) "value";
                  observation2.value:BL as boolean ->ob.value=(boolean.value)"boolean";
                  observation2.value:CD as val then{
                    val->ob.value =create('CodeableConcept') as ce then {
                      val.originalText as originalText then{
                        originalText.reference as reference-> ce.text=reference;
                      }"originltext";
                      val -> ce.coding as coding then {
                        val.code as code -> coding.code = cast(code, 'string');
                        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        val.displayName as display -> coding.display = cast(display, 'string');
                        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      }"code";
                      val.translation as translation -> ce.coding as coding then {
                        translation.code as code -> coding.code = cast(code, 'string');
                        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        translation.displayName as display -> coding.display = cast(display, 'string');
                        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        translation.qualifier as qualifier then{
                          qualifier.value as value -> ce.coding as coding then {
                            value.code as code -> coding.code = cast(code, 'string');
                            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                            value.displayName as display -> coding.display = cast(display, 'string');
                            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                          }"value";
                        }"qualifier";
                      }"translation";
                    }"coding";
                  }"val";
                  observation2.value:PQ as val then{
                    val->ob.value = create('Quantity') as quantity then {
                      val.value as value->quantity.value = value;
                      val.unit as unit-> quantity.unit = unit "unit";
                    }"quantity";
                  }"valueQuantity";
                  observation2.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
                  observation2.value:CE as val then{
                    val->observation.value =create('CodeableConcept') as ce then {
                      val.originalText -> ce.text;
                      val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      }"coding";  
                    }"Ce"; 
                  }"Value"; 
                 }"obser";
                }"whereDecorsoClinico";
                }"code";
                         
              }"Observation2";
            }"evidence";
         }"EntryRelationship1";
         obs.entryRelationship as entriRel  then{
          entriRel.observation as observation2 then {
            observation2.code as code then {
             code.code where (code.code ='33999-4') then{
               observation2 -> condition.clinicalStatus = create('CodeableConcept') as status then {
                observation2.text as text then{
                  text.reference as refstat -> status.text=(refstat.value)"statref";
                  }"textstat";
                 observation2  -> status.coding = create('Coding') as coding then{
                   observation2.value as value then{
                     value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                     value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"inactive";
                     value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                     value.displayName as display -> coding.display = cast(display, 'string');
                     }"value1";
                 }"coding";
               }"code";                       
             }"whereDecorsoClinico"; 
            }"codestatus";  
           }"observationstatus"; 
          }"entryrelationshipstatus";           
          }"whereEntryPatologicaProssima";
        } "observationcondition";
        }"entry";
    }"subsection1";
 
  // ESAME PBIETTIVO
  section2.code where(code = '29545-1') then ClinicalDocumentSottoSectionOBS(section2, sec2, bundle,enc,patient) "esameObiettivo";
      // TETAPIA FARMACOLOGICA
   section2.code where(code = '42346-7') then ClinicalDocumentSottoSectionMS(section2, sec2, bundle,patient,enc) "TerapiaFarmacologicaAllIngresso";
    }"sec2fhir";
  }"componentSec";
 };
}


group ClinicalDocumentSectionDecorsoOspedaliero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
      cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS (section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
  
}

group ClinicalDocumentSectionComplicanze(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exist";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

  //src then  ClinicalDocumentSottoSectionOBS(src, tgt, bundle,enc) "Decorso";

}

group ClinicalDocumentSectionRiscontri(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";          
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
      src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      cdaText->observation.note as note then {
      cdaText as t ->note.text =t "reference";
    }"reference";
  } "cdaText";
  src.component as component then {
    component.section as section2 then{
      src then  ClinicalDocumentSottoSectionOBS(section2, tgt, bundle,enc,patient) "Decorso";
    }"1";
  }"2";
}

group ClinicalDocumentSectionConsulenza(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exist";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then ObservationConsulenza(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionEsamiEseguitiRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then ObservationEsamiDuranteRicovero(obs, patient ,enc ,observation, bundle) "act";
  }"entry";

}

group ClinicalDocumentSectionProcedureEseguiteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";
 
  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Procedure/', uuid1), request.url = 'Procedure', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then {
      src -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";        
      src->procedure.status ='unknown'"statuscode";
      cdaText -> procedure.note as note then{
        cdaText as t ->note.text =t "reference";
      }"reference";
    }"cdaText";
  }"where";  

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Procedure/', uuid1), request.url = 'Procedure', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then {
    src -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    entry1.procedure as proceduresrc then{
      proceduresrc.code -> procedure.code;
      proceduresrc.text as txt -> procedure.note as note then {
        txt.reference as ref -> note.text = (ref.value);
      }"text";
      
      proceduresrc where proc.statusCode .exists().not() then {
      proceduresrc->procedure.status ='unknown'"statuscode";
      }"status";
      proceduresrc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
      proceduresrc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
      proceduresrc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
      proceduresrc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
      proceduresrc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
      proceduresrc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
      proceduresrc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
      proceduresrc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
      proceduresrc.effectiveTime as efft -> procedure.performed = create('Period') as period then IVLTSPeriod(efft,period);
      proceduresrc.entryRelationship as entriRel ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', procedure.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
        entriRel->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        entriRel->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
        entriRel.observation as obs then{
          obs.code -> observation.code;
          obs where observation.statusCode.exists().not() then {
            obs->observation.status ='final'"status";
            }"statuscode";           
        }"ObservationValue";
      }"Observation"; 
    }"Procedure";
  }"Entry";
}

group ClinicalDocumentSectionAllergie(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/AllergyIntolerance/', uuid1), request.url = 'AllergyIntolerance', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
      src -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      src -> allergy.clinicalStatus = create('CodeableConcept') as status then {
        src -> status.text = 'string' "text";
        src -> status.coding = create('Coding') as coding then{
          src -> coding.code = 'active'"active";
          src -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
        }"coding";
      }"allergy";
        src.code -> allergy.code;
        cdaText -> allergy.note as note then{
          cdaText as t ->note.text =t "reference";
        }"reference";
    }"cdaText";
  }"where";  


  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/AllergyIntolerance/', uuid1), request.url = 'AllergyIntolerance', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
    src -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    entry1.act as actallint then {
  actallint.effectiveTime as eff -> allergy.onset = create('Period') as per then IVLTSPeriod(eff,per);
  actallint.entryRelationship as entryact then {
    entryact.observation as entryobs then {
      entryobs.value as code then{
        code.code as code1-> allergy.type = translate(code1,'#AllergyTypeMap','code') "type";
        code.code as code2 -> allergy.category = translate(code2,'#AllergyCategoryMap','code') "category";  
      }"code";
    
      entryobs.participant as partic then {
        partic.participantRole as pratRole then {
           pratRole.playingEntity as pratent then {
               pratent -> allergy.reaction = create('BackboneElement') as reaction then{
               pratent.code -> reaction.substance "subs";
           entryobs.entryRelationship as entryobs1 where (typeCode='MFST') then {
           entryobs1.observation as entobs then {
             entobs.effectiveTime as eff  then{
            eff.low as l -> reaction.onset = create('dateTime') as start then TSDateTime(l,start) "val";
            }"eff";
            entobs.value->reaction.manifestation "manifest";
                     }"observ";
                   }"entry";
               }"cod";  
          }"react";
        }"pratentit";
       }"PratRole";

       entryobs.entryRelationship as entryobs2 then {
        entryobs2.observation as entobs then {
          entobs.code as code where (code='SEV') then {
          entobs.value as value then{
             value.code where(value.code = 'M') ->allergy.criticality = 'unable-to-assess'"active";
             value.code where(value.code = 'L') ->allergy.criticality = 'low'"active"; 
             value.code where(value.code = 'H') ->allergy.criticality = 'high'"active"; 
              }"entobs";
             } "sev";
            }"severity";
          }"observ";
       

       entryobs.entryRelationship as entryobs3 then {
        entryobs3.observation as entobs then {
          entobs.code as code where (code='33999-4') then {
           entobs -> allergy.clinicalStatus = create('CodeableConcept') as status then {
           entobs  -> status.coding = create('Coding') as coding then{
            entobs.value as value then{
                value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"active";
                value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                value.displayName as display -> coding.display = cast(display, 'string');
                 }"value1";
               }"coding";
             }"clinicalStatus";
            }"stat";
          }"obobs3serv";
       }"entry3";

        entryobs.entryRelationship as entryobs4 then {
         entryobs4.act as entact then {
          entact.text as actext then {
              actext.reference as reftxt -> allergy.note = create('BackboneElement') as note  then {
              reftxt as ref->note.text= (ref.value) "notxt";
                }"notetxt";
              }"txtact";
          }"obobs4serv";
       }"entry4";

         }"partic";
        };
       };
      }"allergy";
}

group ClinicalDocumentSectionDiagnosiDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      src -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> observation.code;
          src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
              }"statuscode";
            cdaText -> observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
  }"entry";
}

group ClinicalDocumentSectionIstruzioniFollowUp(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";
  src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('CarePlan') as carePlan,  carePlan.id = uuid() as uuid1,  e1.fullUrl = append('https://example/CarePlan/', uuid1), request.url = 'CarePlan', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/CarePlan/' + %carePlan.id) then {
    cdaText-> carePlan.note as note then{
      cdaText as t ->note.text =t "reference";
    }"reference";
    src-> carePlan.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
    src-> carePlan.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    src -> carePlan.status='active'"status";
    src -> carePlan.intent='order'"intent";
  }"entry";
}

group ClinicalDocumentSectionTerapiaFarmacologicaDuranteRicovero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then{
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exists";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medicationAdm,  medicationAdm.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationAdministration/', uuid1), request.url = 'MedicationAdministration', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medicationAdm.id) then {
      cdaText->medicationAdm.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      cdaText->medicationAdm.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      cdaText->medicationAdm.medication = create('CodeableConcept') as codecon then{
        cdaText -> codecon.text = 'string' "text";
      }"code";
      src ->medicationAdm.effective = create('Period') as period then{
        src->period.start=(start.now())"low";
        src->period.end=(end.now())"high";
        }"Period";
        src where sub.statusCode.exists().not() then {
          src->medicationAdm.status ='completed'"status";
        }"statuscode";
        cdaText -> medicationAdm.note as note then{
        cdaText as t ->note.text =t "reference";
      }"reference";
    }"cdaText";
  }"where";  

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medicationAdm,  medicationAdm.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationAdministration/', uuid1), request.url = 'MedicationAdministration', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medicationAdm.id) then {
    entry1->medicationAdm.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
    entry1->medicationAdm.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
         entry1.substanceAdministration as sa then{
                sa.text as tx -> medicationAdm.note as note then{
                  sa.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner then{
                    performer.time as ti -> note.time = (ti.value);
                    performer.assignedEntity as assEnty then{
                      assEnty->practitioner.meta as meta then {
                        assEnty->meta.tag = create('Coding') as coding then {
                          assEnty -> coding.system ='http://algoritmodiscoring'"system";
                          assEnty -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaRicovero/performer'"code";
                        }"coding";
                      }"meta";
              
                      assEnty.id as id -> practitioner.identifier as identifier then {
                        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                        id.extension as ext->identifier.value = ext; 
                        id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                        id.root as r then {
                          id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = 'Practitioner', medicationAdm.performer as perf,  perf.actor  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
                        }"r";
                    }"identifier";
                    assEnty.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assEnty.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"diverso";
                    assEnty.assignedPerson as assi then {
                        assi.name -> practitioner.name;
                      }"assi";
                    }"assEntity";
                  }"perf";
              tx.reference as ref -> note.text = (ref.value);
            }"tx"; 
      sa.statusCode as st -> medicationAdm.status = (st.code);
      sa.effectiveTime as eff -> medicationAdm.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";
      
      sa ->  medicationAdm.dosage as dos then {
        sa.routeCode -> dos.route;        
      }"dos";
      sa ->  medicationAdm.dosage as dos then {
        sa.approachSiteCode -> dos.site;        
      }"dos";
      

      sa.doseQuantity as doseQuant ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest', medicationAdm.request  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then{
        doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
          doseQuant.originalText as ot then{
            ot.reference -> dosageInstruction.text;
          }"ot";
          doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
            doseQuant -> dosageRate.dose = create('Range') as d then{
              doseQuant -> d.low = create('SimpleQuantity') as l then{
                doseQuant.low as lo -> l.value = (lo.value); 
                doseQuant.low as lo -> l.unit = (lo.unit); 
              }"low";
              doseQuant -> d.high = create('SimpleQuantity') as h then{
                doseQuant.high as hi -> h.value = (hi.value);
                doseQuant.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";
        sa-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
        sa-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
        sa -> medicationRq.status='active'"status";
        sa -> medicationRq.intent='order'"intent";
        sa.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
          rateQuantity.originalText as ot then{
            ot.reference -> dosageInstruction1.text;
          }"ot";
          rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
            rateQuantity -> dosageRate.rate = create('Range') as d then{
              rateQuantity -> d.low = create('SimpleQuantity') as l then{
                rateQuantity.low as lo -> l.value = (lo.value); 
                rateQuantity.low as lo -> l.unit = (lo.unit); 
              }"low";
              rateQuantity -> d.high = create('SimpleQuantity') as h then{
                rateQuantity.high as hi -> h.value = (hi.value);
                rateQuantity.high as hi -> h.unit = (hi.unit); 
              }"low";
            }"d";
          }"dosageRate";
        }"Dosage";

       
        sa -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', medicationAdm.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) then{
        sa-> medicationRq.medication=create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) "reference";
          sa.administrationUnitCode -> medication.form;
          sa.consumable as consumable then {
            consumable.manufacturedProduct as manufac then{
                manufac.manufacturedMaterial as manuprod then{
                  manuprod.code -> medication.code;
             
          }"manufactproduct"; 
        }"manufac";
      }"consumable";

          sa.entryRelationship as entryRR then{
            entryRR.observation as observation then{
                  observation.code where displayName='Grammatura' -> medication.ingredient as ingredient then{
                    sa.consumable as consumable then{
                            consumable.manufacturedProduct as manufacturedProduct then{
                                manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                    manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                }"material";
                            }"product";
                        }"consumable";
                        observation.value as value -> ingredient.strength as strength then{
                            value -> strength.numerator as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> strength.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                      }"strenght";
                    }"ingredient";
                    observation.code where displayName='Quantità nella Confezione' then{
                        observation.value as value -> medication.amount as amount then{
                            value -> amount.numerator  as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> amount.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                        }"amount";
                  }"quantita";
              }"obs";
          }"entryRr";

        }"medication";
          sa.entryRelationship as entryRelationship then{
                        
            entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
              sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                sup.quantity as q -> quantity.value = (q.value);
              }"quantity";              
            }"sub";           
          }"entryR";
      
      sa.participant as participant then {
        participant.time as t -> medicationRq.authoredOn = (t.value);     
        participant.participantRole as participantR -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner  then{
          participantR->practitioner.meta as meta then {
            participantR->meta.tag = create('Coding') as coding then {
              participantR -> coding.system ='http://algoritmodiscoring'"system";
              participantR -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaRicovero/participant'"code";
                  }"coding";
                }"meta";
                participantR.id as id -> practitioner.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext; 
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                  id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid1) ,medicationRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
                  }"r";
              }"identifier";
              participantR.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              participantR.playingEntity as assi then {
                  assi.name -> practitioner.name;
                }"assi";
            }"perf";
       
        sa.effectiveTime: EIVL as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
          eff -> dosage.timing = create('Timing') as timing then {
            eff -> timing.repeat as rep then {
              eff.event as ev -> rep.where = (ev.code);
            }"rep";
          }"timing";
        }"period";
  
        sa.effectiveTime: TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";
  
          
        sa.effectiveTime: PIVL_TS as eff -> medicationAdm.dosage = create('BackboneElement') as dosage then{
          eff -> dosage.rate = create('Ratio') as ratio then{
            eff -> ratio.numerator = create('Quantity') as quan then{
              eff.period as per ->  quan.value = (per.value);
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
            eff -> ratio.denominator = create('Quantity') as quan then{
              eff.period ->  quan.value = '1';
              eff.period as per ->  quan.unit = (per.unit);
            }"quanti";
          }"ratio";
        }"eff";     

      }"Medicationrequest";
    }"sa";

  }"entry";
}"sa";

}




group ClinicalDocumentSottoSectionOBS(source src : Section,  target tgt, target bundle : Bundle, target enc : Encounter , target patient : Patient){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
   
    src.code -> observation.code;
    src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
      }"statuscode";
    cdaText->observation.note as note then{
      cdaText as t ->note.text =t "reference";      
    }"reference";
  } "cdaText";
}

group ClinicalDocumentSottoSectionMS(source src : Section,  target tgt, target bundle : Bundle, target patient : Patient,target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('MedicationStatement') as Medicationstatement,  Medicationstatement.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationStatement/', uuid1), request.url = 'MedicationStatement', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %Medicationstatement.id), tgt.text as fhirText then {
    cdaText->Medicationstatement.note as note then{
      cdaText as t ->note.text =t "reference";
      cdaText as t-> Medicationstatement.medication= create('CodeableConcept') as medication, medication.text=t"text";
    }"reference";
    
    src->Medicationstatement.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    

     src->Medicationstatement.status ='unknown'"status";
    
  } "cdaText";
}


group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {

  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
  obs->ob.status ='final'"status";
  }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";

  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3";
  }"where";

  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVLPQ";                      
      }"obsRange";              
    }"refRange";  
}


group ObservationConsulenza (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2c";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3c";
   }"where";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVLPQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1 then{
      performer.assignedEntity as assEntity then {

        assEntity->practitioner.meta as meta then {
          assEntity->meta.tag = create('Coding') as coding then {
            assEntity -> coding.system ='http://algoritmodiscoring'"system";
            assEntity -> coding.code ='ClinicalDocument/body/Consulenza/performer'"code";
          }"coding";
        }"meta";

        assEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), ob.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest', ob.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner then{
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/Consulenza/participant'"code";
          }"coding";
        }"meta";

        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid3,  e1.fullUrl = append('https://example/Practitioner/', uuid3), serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";
}

group ObservationEsamiDuranteRicovero (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2r";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3r";
  }"where";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        };
      } "translation";
    }"coding";
  }"val";

  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";

  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
    obs.effectiveTime as eff -> ob.effective = create('Period') as per then IVLTSPeriod(eff,per);
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVLPQ";                      
      }"obsRange";              
    }"refRange";  

    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1 then{
      performer.assignedEntity as assEntity then {

        assEntity->practitioner.meta as meta then {
          assEntity->meta.tag = create('Coding') as coding then {
            assEntity -> coding.system ='http://algoritmodiscoring'"system";
            assEntity -> coding.code ='ClinicalDocument/body/EsamiDuranteRicovero/performer'"code";
          }"coding";
        }"meta";

        assEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), ob.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";
    
    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest', ob.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
      participant.time as t -> serviceRequest.authoredOn = (t.value);
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";

      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner then{
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/EsamiDuranteRicovero/participant'"code";
          }"coding";
        }"meta";

        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext; 
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid3,  e1.fullUrl = append('https://example/Practitioner/', uuid3), serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
      }"identifier";
      participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
        id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
      }"2.16.840.1.113883.2.9.4.3.2";
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
   }"participant";
}

group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
  effectiveTime -> timing.repeat as r then{
    effectiveTime.period as p -> r.period = (p.value); 
    effectiveTime.period as p -> r.periodUnit = (p.unit);   
  }"repeat";
}

//---------------------------------------------------------------------------------------

group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle){
  cda.code -> ac.code;
  cda.statusCode as statusc where (code='completed') -> ob.status ='final';
  cda.statusCode as statusc where (code='active') -> ob.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2a";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  cda.effectiveTime as eff -> ac.effective = create('Period') as period then IVLTSPeriod(eff,period) "value3a";
   }"where";
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('https://example/' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('https://example/' + %enc.id) "reference";
  cda.participant  as part->  enc.participant as participant then{
     part  -> participant.type as type then { 
          part -> type.coding as coding then{
            part-> coding.code = (part.typeCode) "codice";
            part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
          } "codeType"; 
        }"type";
    part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
      participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e.fullUrl = append('https://example/Practitioner/', uuid1),  reference.reference = ('https://example/Practitioner/' + %practitioner.id) then { 

      participantRole->practitioner.meta as meta then {
        participantRole->meta.tag = create('Coding') as coding then {
          participantRole -> coding.system ='http://algoritmodiscoring'"system";
          participantRole -> coding.code ='ClinicalDocument/body/Act/participant'"code";
        }"coding";
      }"meta";


      participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"identifier";
        participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
         }"participanRoleBund";  
    }"participantRole";
  }"participant";
  cda.entryRelationship as entryRelationship then {
    entryRelationship.observation as observation ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as obs,  obs.id = uuid() as uuid2,  e.fullUrl = append('https://example/Observation/', uuid2), request.url = append('Observation/', uuid2), ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then Observation(observation,pat,enc,obs,bundle) "OBS";
  }"entryRelationship";
}

group ClinicalDocumentSectionTerapiaDimissione (source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then {
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";  
  }"exist";

  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then {
      src-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      src-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
      src -> medicationRq.status='active'"status";
      src -> medicationRq.intent='order'"intent";
      cdaText->medicationRq.medication = create('CodeableConcept') as codecon then{
        cdaText -> codecon.text = 'string' "text";
      }"code";
      cdaText -> medicationRq.note as note then{
        cdaText as t ->note.text =t "reference";
      }"reference";
    }"cdaText";
  }"where";

  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then {
        src-> medicationRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
        src-> medicationRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
        src -> medicationRq.status='active'"status";
        src -> medicationRq.intent='order'"intent";
        entry1.substanceAdministration as substract then{      
          substract.consumable as cons then{
            cons.manufacturedProduct as man1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', medicationRq.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then {
              man1.manufacturedMaterial as mm then{
                mm.code -> medication.code;
              }"mm";
              substract.administrationUnitCode -> medication.form;

              substract.entryRelationship as entryR then{
                entryR.observation as observation then{
                       observation.code where displayName='Grammatura' -> medication.ingredient as ingredient then{
                        substract.consumable as consumable then{
                                consumable.manufacturedProduct as manufacturedProduct then{
                                    manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                        manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                    }"material";
                                }"product";
                            }"consumable";
                            observation.value as value -> ingredient.strength as strength then{
                                value -> strength.numerator as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> strength.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                           }"strenght";
                        }"ingredient";
                        observation.code where displayName='Quantità nella Confezione' then{
                            observation.value as value -> medication.amount as amount then{
                                value -> amount.numerator  as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> amount.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                            }"amount";
                       }"quantita";
                   }"obs";
              }"entryR";
      
              substract.entryRelationship as entryRelationship then{
                entryRelationship.supply as sup -> medicationRq.dispenseRequest as dispreq then {              
                    sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                      sup.quantity as q -> quantity.value = (q.value);
                    }"quantity";              
                }"sub";
              }"entry";
            }"man1";
          }"cons";
          substract.text as tx -> medicationRq.note as note then{
            tx.reference as ref -> note.text = (ref.value);
          }"tx"; 
          substract.statusCode as st -> medicationRq.status = (st.code);

          substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            eff -> dosage.timing = create('Timing') as timing then {
              eff -> timing.repeat as rep then {
                eff -> rep.bounds = create('Period') as period then IVLTSPeriod(eff,period)"period";
              }"rep";
            }"timing";
          }"period";

          substract.effectiveTime: EIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            eff -> dosage.timing = create('Timing') as timing then {
              eff -> timing.repeat as rep then {
                eff.event as ev -> rep.when = (ev.code);
              }"rep";
            }"timing";
          }"period";

          substract.effectiveTime: IVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

          substract.effectiveTime: PIVL_TS as eff -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
          }"eff";     

          substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            substract.routeCode -> dosage.route;        
          }"dosage";
          
          substract -> medicationRq.dosageInstruction = create('Dosage') as dosage then{
            substract.approachSiteCode -> dosage.site;        
          }"dosage";

          substract.doseQuantity as doseQuant -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction then{
            doseQuant.originalText as ot then{
              ot.reference -> dosageInstruction.text;
            }"ot";
            doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
              doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                  doseQuant.low as lo -> l.value = (lo.value); 
                  doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                  doseQuant.high as hi -> h.value = (hi.value); 
                  doseQuant.high as hi -> h.unit = (hi.unit);
                }"low";
              }"d";
            }"dosageRate";
          }"Dosage";
          
          substract.rateQuantity as rateQuantity -> medicationRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
            rateQuantity.originalText as ot then{
              ot.reference -> dosageInstruction1.text;
            }"ot";
            rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
              rateQuantity -> dosageRate.rate = create('Range') as d then{
                rateQuantity -> d.low = create('SimpleQuantity') as l then{
                  rateQuantity.low as lo -> l.value = (lo.value); 
                  rateQuantity.low as lo -> l.unit = (lo.unit); 
                }"low";
                rateQuantity -> d.high = create('SimpleQuantity') as h then{
                  rateQuantity.high as hi -> h.value = (hi.value);
                  rateQuantity.high as hi -> h.unit = (hi.unit); 
                }"low";
              }"d";
            }"dosageRate";
          }"rateq";
          
          substract.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner  then{
            part.time as time -> medicationRq.authoredOn = (time.value);
            part.participantRole as partRole then{
              partRole->practitioner.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaRicovero/participant'"code";
                    }"coding";
                  }"meta";
                  partRole.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext; 
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                    id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid1) ,medicationRq.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
                    }"r";
                }"identifier";
                partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                  id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                }"2.16.840.1.113883.2.9.4.3.2";
                partRole.playingEntity as assi then {
                    assi.name -> practitioner.name;
                  }"assi";
              }"perf";
           }"partRole";
        }"participant"; 
    }"substract";
}", "subType": "00"}}, "filename": "LetteraDimissioneOspedaliera_v2.8.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:04.208Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d0e091c057abd6ef9ca"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/ProfiloSanitarioSinteticoBody", "version": "1.9", "template_id_root": ["2.16.840.1.113883.2.9.10.1.4.1.1"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/ProfiloSanitarioSinteticoBody" = "ProfiloSanitarioSinteticoBody"

conceptmap "OBSstatus" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
prefix t = "http://hl7.org/fhir/observation-status"

s:completed == t:final
s:active == t:registered
s:aborted == t:cancelled
s:suspended == t:partial
}
conceptmap "EventStatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/event-status"
    
    s:"completed" == t:"completed"
    s:"active" == t:"in-progress"
    s:"aborted" == t:"stopped"
    s:"suspended" == t:"on-hold"
    }
conceptmap "FinancialStatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/fm-status"
    
    s:"active" == t:"active"
    s:"aborted" == t:"cancelled"
    s:"suspended" == t:"draft"
    }
conceptmap "MedicationStatusMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/CodeSystem/medicationrequest-status"
    
    s:completed == t:completed
    s:active == t:active
    s:aborted == t:cancelled
    s:suspended == t:"on-hold"
    }
conceptmap "cm-v3-administrative-gender" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

s:M == t:male
s:F == t:female
}

conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}


conceptmap "ClinicalStatusMap" {
    prefix s = "https://loinc.org/99493-9/"
    prefix t = "http://terminology.hl7.org/CodeSystem/condition-clinical"

    s: "LA16666-2" == t: active
    s: "LA18632-2" == t: inactive
    s: "LA9041-0" == t: resolved
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  
    bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition', 
    bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2),  bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3), request.url = 'Encounter', 
    bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"recPat";
    }"patient";
    } "ClinicalDocumentToBody";
}


group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> encounter.status = 'finished' "finished";
    cda -> encounter.class = create("Coding") as coding then{
        cda -> coding.code = 'summary' "code";
    }"coding";
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    //cda.effectiveTime -> bundle.timestamp;
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda.component as component then {
    component.structuredBody as body then {
        body.component as component  then {
            component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, composition);       
        } "section";
        } "component";
    }"body";
    }"diagnostic";
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target composition : Composition) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        // sezioni che sono strutturate
        src.code where (code = '30954-2') then{
            entry.organizer as organizer -> bundle.entry as e0, e0.request = create('BackboneElement') as request, request.method = 'POST', e0.resource = create('DiagnosticReport') as dia,  dia.id = uuid() as uuid0,  e0.fullUrl = append('https://example/DiagnosticReport/', uuid0), request.url ='DiagnosticReport' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %dia.id) then DiagnosticReportFunction(organizer,patient,enc,dia,bundle) "diagnostic"; // add function to DiagnosticReport
        }"entryObs";

        src.code where (code = '29762-2') or (code = '10162-6') then{
            entry.observation as observation -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url ='Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, enc, obs1, bundle) "obs1";
        }"entryObs";
        src.code where (code = '8716-3') or (code = '47420-5') then{
            entry.organizer as organizer -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then ObservationOrganizer(src, organizer, patient, enc, obs2, bundle) "obs2";
            entry.observation as organizer -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then ObservationOrganizer(src, organizer, patient, enc, obs2, bundle) "obs2";
        } "organizer";
        src.code where code = '11450-4' then{
            entry.act as act -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Condition') as condition,  condition.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Condition/', uuid3), request.url = 'Condition', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then ConditionFunction(act ,condition, patient, enc, bundle) "condition";        
        }"listaDeiProblemi";
        src.code where (code = '48765-2') then{
            entry.act as act -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then allergyFunction(act, allergy, patient,enc) "allergy";
        } "entryAct";
        src.code where code = '10160-0' then{
            entry.substanceAdministration as subAdmin -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('MedicationStatement') as medicationstatement,  medicationstatement.id = uuid() as uuid6,  e6.fullUrl = append('https://example/MedicationStatement/', uuid6), request.url = 'MedicationStatement', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %medicationstatement.id) then MedicationStatement(subAdmin, medicationstatement, patient, enc, bundle) "TerapiaFarmacologica";
        }"terapia";
        src.code where code = '11369-6' then{
            entry.substanceAdministration as subVACC -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST',   e7.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid7,  e7.fullUrl = append('https://example/Immunization/', uuid7), request.url = 'Immunization' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then Immunization(subVACC, patient, enc, immunization, bundle) "immunization";
        }"vacc";
        src.code where code = '10157-6' then{
            entry.organizer as organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";            
        }"family";
        src.code where code = '46264-8' then{
            entry.supply as supply -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST',   e8.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Procedure/', uuid8), request.url = 'Procedure' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then Procedure(supply, patient, enc, procedure, bundle)  "protesi";
        }"impianti";
        src.code where code = '47519-4' then{
            entry.procedure as procedure -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST',   e9.resource = create('Procedure') as procedure2,  procedure2.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Procedure/', uuid9), request.url = 'Procedure', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure2.id) then Procedure(procedure, patient, enc, procedure2, bundle)  "tratt";
        }"trattamentiProcedure";
        src.code where code = '46240-8' then{
            // entry.encounter as encounter -> enc then{
            //     encounter.id -> enc.identifier;
                
            //     encounter -> enc.status = 'unknown' "status";
            //     encounter.code as code -> enc.classHistory as classHistory then{
            //         code -> classHistory.class as class then{
            //             code.code as code -> class.code = cast(code, 'string');
            //             code.codeSystem as system -> class.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            //             code.displayName as display -> class.display = cast(display, 'string');
            //         }"class";
            //         encounter.effectiveTime -> classHistory.period "period";
            //     }"history";
            //     encounter.text as text -> enc.type as type then{
            //         text.reference as reference -> type.text = (reference.value) "text";
            //     }"type";
            //     encounter.performer as performer -> enc.participant as participant then Practitioner(performer,enc,bundle) "performer";
            // }"encounter";  
            entry.encounter as encounter -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST',   e9.resource = create('Encounter') as encounterF,  encounterF.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Encounter/', uuid9), request.url = 'Encounter', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounterF.id) then EncounterFunction(encounter, patient, enc, encounterF, bundle)  "encounter";
            

        }"visiteRicoveri";
        src.code where code = '57827-8' then{
            entry.act as act -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST',   e13.resource = create('Coverage') as coverage,  coverage.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Coverage/', uuid13), request.url = 'Coverage' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Coverage/' + %coverage.id) then Coverage(act, patient, enc, coverage, bundle)  "esen";
        }"esenzioni";
        src.code where code ='PSSIT99' then{
            entry.act as act -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST',   e14.resource = create('OrganizationAffiliation') as affiliation,  affiliation.id = uuid() as uuid14,  e14.fullUrl = append('https://example/OrganizationAffiliation/', uuid14), request.url = 'OrganizationAffiliation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/OrganizationAffiliation/' + %affiliation.id) then OrganizationAffiliation(act, patient, enc, affiliation, bundle)  "OrgAffiliation";
        }"retiPatologia";
    }"entry";
    src where src.entry.exists() then {
        src.code where code = '18776-5' then{
            src -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('CarePlan') as careplan, careplan.id = uuid() as uuid11,  e11.fullUrl = append('https://example/CarePlan/', uuid11), request.url = 'CarePlan', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/CarePlan/' + %careplan.id) then{    
                src.entry as entry then CarePlanFunction(entry, careplan, patient, enc, bundle) "prestazioni";
            }"pianiCura";
        }"raccoglitore";
    }"esiste";
   
    src where src.entry.exists().not() then {
        // Anmanesi Familiare narrativa
        src.code where code = '10157-6' then{
            src.text as text ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then {          
            src -> familyMember.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference"; 
            src -> familyMember.status = 'health-unknown' "statusS";
            text -> familyMember.note as note then{
                text as t ->note.text =t "reference";
              }"reference";
              text ->  familyMember.relationship =create('CodeableConcept') as relation then {
                text as txt -> relation.text=txt "text";
              }"medication";
            }"family";
        }"familyraccoglitore";
        //Piano di cura narrativa 
        src.code where code = '18776-5' then{
            src.text as text -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('CarePlan') as careplan, careplan.id = uuid() as uuid11,  e11.fullUrl = append('https://example/CarePlan/', uuid11), request.url = 'CarePlan', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/CarePlan/' + %careplan.id) then{ 
                src-> careplan.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                //src-> careplan.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
                src -> careplan.status='active'"status";
                src -> careplan.intent='order'"intent"; 
                text -> careplan.note as note then{
                    text as t ->note.text =t "reference";
                  }"reference";   
            }"pianiCura";
        }"raccoglitore";
        // sezioni che sono narrative
        src.code where (code = '30954-2') or (code = '29762-2') or (code = '8716-3') or (code = '47420-5') or (code = '42348-3') then{
        src.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then {
            src -> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
            //src -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";  
            src -> obs1.status = 'preliminary' "obsst";
            src.code -> obs1.code "obscde";
            src -> obs1.status = 'final' "statusS";
            text -> obs1.note as note then{
                text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
            } "narrative";    
        }"txtsec";
    }"narrative";
}"code";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group Procedure(source src: cdaElement , target patient: Patient, target encounter: Encounter, target tgt: Procedure, target bundle: Bundle){
    
    //toASK
    src.text as tx -> tgt.note as note then {
        tx.reference as reff -> note.text = (reff.value) "r";
    }"tx";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.10.3' then{
        src.effectiveTime as effectiveTime -> tgt.performed = (effectiveTime.value);
        src.code -> tgt.code;
    }"ref";

    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    //src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src.statusCode as s then {
        s.code as cos-> tgt.status = translate(cos, '#EventStatus', 'code') "codeS";
    }"status";
    src where statusCode.exists().not() -> tgt.status = 'unknown' "status2";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.9.1' then{
        src -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Device/', uuid1), request.url = 'Device', tgt.usedReference = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
            src -> deviceRes.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";                
            src.code -> deviceRes.type;
        }"device";
        src.effectiveTime as effectiveTime where (value.exists()) -> tgt.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
        src.effectiveTime as effectiveTime where (low.exists()) -> tgt.performed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    }"presenzaProtesiImpianto";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.9.2' then{
        src.code as code -> tgt.note as note then{
            code.displayName as displayName -> note.text = (displayName) "text";
        }"note";
    }"assenza";
    src.templateId where root='2.16.840.1.113883.2.9.10.1.4.3.11.1' then{
        src.id -> tgt.identifier "id";
        src.code -> tgt.code;
        src.effectiveTime as effectiveTime where (value.exists()) -> tgt.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
        src.effectiveTime as effectiveTime where (low.exists()) -> tgt.performed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

        src.entryRelationship as entryR then{
            entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.reasonReference = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "observation";
        }"entryRelProcedure";
    }"procedureTrattamenti";
}

group Observation(source cda, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda-> ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    //cda-> ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    
    cda.id -> ob.identifier;
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:INT as int -> ob.value = (int.value) "intval";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
    
    //toASK è giusto siano invertiti?
    // cda.methodCode -> ob.interpretation;
    // cda.interpretationCode -> ob.method;
    cda.methodCode -> ob.method;
    cda.interpretationCode -> ob.interpretation;
    cda.targetSiteCode -> ob.bodySite;

    //added    
    cda.referenceRange as refrange then{
        refrange.observationRange as obsrange then{
            obsrange.value as val -> ob.referenceRange = create('BackboneElement') as refrangeFH then{
                val -> refrangeFH.low = create('SimpleQuantity') as lowfhir then{
                    val.low as l -> lowfhir.value = (l.value) "val";
                    val.low as l -> lowfhir.unit = (l.unit) "val";
                }"de";
                val -> refrangeFH.high = create('SimpleQuantity') as highfhir then{
                    val.high as h -> highfhir.value = (h.value) "val";
                    val.high as h -> highfhir.unit = (h.unit) "val";
                }"de";
            }"refFhir"; 
        }"obsrange";
    }"regrange";


}  

group ObservationOrganizer(source section: section, source cda:organizer, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda-> ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    //cda-> ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    
    cda.id -> ob.identifier;    
    section.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
    cda.component as component then{
        component.observation as observation -> bundle.entry as ei, ei.request = create('BackboneElement') as request, request.method = 'POST', ei.resource = create('Observation') as obsi,  obsi.id = uuid() as uuidi,  ei.fullUrl = append('https://example/Observation/', uuidi), request.url = 'Observation' ,ob.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsi.id) then Observation(observation, patient, encounter, obsi, bundle) "hasMember";
    }"component";
}  

group Coverage(source src: act , target patient: Patient, target encounter: Encounter, target tgt: Coverage, target bundle: Bundle){
    src-> tgt.beneficiary =create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src-> tgt.payor =create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src.id as id -> tgt.identifier as idf then{
        id -> idf.value = (id.root) "ID";
    }"id";
    
    src.code -> tgt.type;
    src.statusCode as statusCode then{
        statusCode.code as s -> tgt.status = translate(s,'#FinancialStatus','code') "status";
    }"sc";
    src where statusCode.exists().not() -> tgt.status = 'active' "statusAbsent";
    
    // src.effectiveTime as effectiveTime -> tgt.period as period then{
    //     effectiveTime.low as l -> period.start = (l.value);
    // }"period";

    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.period = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.period = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";


    src.entryRelationship as entryRelationship then{
        entryRelationship.act as ac -> tgt.class as class then{
            ac.text as text -> class.type as type then{
                text.reference as reference -> type.text = (reference.value) "value";
            }"ref";
            ac -> class.value = 'commenti' "note";
        }"QUI";
    }"entryr";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : Patient, target encounter : Encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    //src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 

    //toASK
    src.effectiveTime as effTime then{
        effTime.low as l -> tgt.recordedDate as r then TSDateTime(l, r) "value";
    }"efftime";
    
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{

            
            observation1.id -> tgt.identifier;
            observation1.templateId where root = '2.16.840.1.113883.2.9.10.1.4.3.1.4' -> tgt.code as code then{
                observation1 -> code.coding as coding then{
                    observation1 -> coding.code = 'No known allergy' "code";
                }"code";
                src.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
                src.effectiveTime as effectiveTime  -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            } "Noallergy";

            observation1.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";


            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            

            //toASK qui dovrei fare un controllo sul code 
            observation1.value -> tgt.code;

            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.code -> reaction.manifestation "manifestation";
                        observation2.text as tx then{
                            tx.reference as reff -> reaction.description = (reff.value) "tx";
                        }"tx";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                            effectiveTime.high as high -> tgt.lastOccurrence = create('dateTime') as value then TSDateTime(high, value) "valuePeriodHigh";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.text as tx then{
                        tx.reference as reff -> reaction.description = (reff.value) "tx";
                    }"tx";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
        
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{

                    observation4 -> tgt.clinicalStatus as clinicalStatus then{
                        observation4.value as value then{
                            value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                                valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                                valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                                valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                                valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                                valu.displayName as display-> coding.display= cast(display, 'string') "display";
                            }"coding";                            
                        }"value";
                        
                        observation4.text as tx then{
                            tx.reference as ref -> clinicalStatus.text = (ref.value);
                        }"tx";

                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}

group MedicationStatement(source src: subAdmin, target tgt: Medicationstatement, target patient: Patient, target encounter : Encounter, target bundle: Bundle){
    
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";  
    //src -> tgt.context = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
    src.statusCode -> tgt.status "status"; 

    
    src.id -> tgt.identifier;
    src.text as text -> tgt.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    }"note";
    
    src.effectiveTime as eff where (value.exists()) -> tgt.effective  = create('dateTime') as value then TSDateTime(eff, value) "value1";
    src.effectiveTime: IVL_TS as eff -> tgt.effective = create('Period')  as value then IVLTSPeriod(eff, value) "valuePeriod";

    src -> tgt.dosage = create('Dosage') as dosage then{
        src.effectiveTime: PIVL_TS as eff  then{
            eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
        }"eff";
    
        src where  (src.doseQuantity.exists() or src.rateQuantity.exists() or src.routeCode.exists() or src.approachSiteCode.exists()) then{
            src.doseQuantity as doseQuant then{
                doseQuant.originalText as ot then{
                    ot.reference -> dosage.text;
                }"ot";  
                doseQuant -> dosage.doseAndRate as dosageRate then{
                    doseQuant -> dosageRate.dose = create('Range') as d then{
                        doseQuant -> d.low = create('SimpleQuantity') as l then{
                            doseQuant.low as lo -> l.value = (lo.value); 
                            doseQuant.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        doseQuant -> d.high = create('SimpleQuantity') as h then{
                            doseQuant.high as hi -> h.value = (hi.value);
                            doseQuant.high as hi -> h.unit = (hi.unit); 
                        }"low";
                    }"d";
                }"dosageRate";
            } "doseQuantity";
            src.rateQuantity as rateQuantity then{
                rateQuantity.originalText as ot then{
                    ot.reference -> dosage.text;
                }"ot";
                rateQuantity -> dosage.doseAndRate as dosageRate then{
                    rateQuantity -> dosageRate.rate = create('Range') as d then{
                        rateQuantity -> d.low = create('SimpleQuantity') as l then{
                            rateQuantity.low as lo -> l.value = (lo.value); 
                            rateQuantity.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        rateQuantity -> d.high = create('SimpleQuantity') as h then{
                            rateQuantity.high as hi -> h.value = (hi.value);
                            rateQuantity.high as hi -> h.unit = (hi.unit); 
                        }"high";
                    }"r";
                }"dosageRate";
            }"rate";
        
            src.routeCode -> dosage.route "route";
            src.approachSiteCode -> dosage.site "site";
            src.targetSiteCode -> dosage.site "site";
    
        }"route";    
    }"dos";


    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src, medication,patient,bundle) "medication";
    }"consumable";

}
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
    effectiveTime -> timing.repeat as r then{
      effectiveTime.period as p -> r.period = (p.value); 
      effectiveTime.period as p -> r.periodUnit = (p.unit);   
    }"repeat";
  }

group Medication(source src:  , target tgt: Medication, target patient: Patient, target bundle : Bundle){

    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code -> tgt.code "CE";
                src.administrationUnitCode -> tgt.form "form";
            }"material";
        }"product";
    }"consumable";

    src.entryRelationship as entryR then{
        entryR.observation as observation then{
            observation.code where displayName='Grammatura' -> tgt.ingredient as ingredient then{
                src.consumable as consumable then{
                    consumable.manufacturedProduct as manufacturedProduct then{
                        manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                            manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                        }"material";
                    }"product";
                }"consumable";
                observation.value as value -> ingredient.strength as strength then{
                    value -> strength.numerator as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> strength.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"strenght";
            }"ingredient";
            observation.code where displayName='Quantità nella Confezione' then{
                observation.value as value -> tgt.amount as amount then{
                    value -> amount.numerator  as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> amount.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"amount";
            }"quantita";
        }"obs";
    }"entryR";
}

group Immunization(source substance: substanceAdministration, target patient: Patient,target encounter : Encounter, target tgt: immunization, target bundle: Bundle) {

        substance -> tgt.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        //substance -> tgt.encounter  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "encounterRef"; 

        substance.id as id -> tgt.identifier as idf then{
            id.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        }"id";
        substance.text as text -> tgt.note as note then{
            text.reference as reference -> note.text = (reference.value) "text";
        }"note";
        substance.statusCode  as statusc where (code='completed') -> tgt.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> tgt.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> tgt.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> tgt.status ='not-done'; 

        substance.effectiveTime as time -> tgt.occurrence = create('dateTime') as value then TSDateTime(time, value) "efftime";
        substance.routeCode -> tgt.route;
        substance.approachSiteCode ->tgt.site;
        substance -> tgt.doseQuantity = create('SimpleQuantity') as quantity then{
          substance.doseQuantity as q then{
            q -> quantity.value = (q.value) "val";
            q -> quantity.unit = (q.unit) "uni"; 
          }"qua"; 
        }"q";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> tgt.vaccineCode;
              manufactmat.lotNumberText as t -> tgt.lotNumber = (t.dataString);
            }"manufactmat";
            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{
              manufactOrg.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  manufactOrg -> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/', uuid), tgt.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/' + %organization.id) "idasi";       
                }"r" ;
            }"identifier";                                         
              manufactOrg.name as n -> organization.name = (n.other);
                  manufactOrg-> organization.meta as meta then {
                  manufactOrg-> meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/Vaccinazioni/manufacturerOrganization'"code";
                }"coding";
              }"meta";
            }"manufactOrg";          
          }"manufact";
        }"cons";
       
        substance.participant as part ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1 then{
              part-> location.meta as meta then {
              part-> meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/Vaccinazione/participant'"code";
          }"coding";
        }"meta";
          part.participantRole as partRole then{
            partRole.id as id -> location.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                partRole -> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location', uuid), tgt.location  = create('Reference') as reference,  reference.reference = ('https://example/' + %location.id) "idasi";       
              }"r" ;
          }"identifier";                          
          }"role";
        }"part";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '30973-2') then {
              obs -> tgt.protocolApplied = create('BackboneElement') as prot then{
                obs.value as v then {
                  v.value as int -> prot.doseNumber = (int.toString()); 
                }"value"; 
              }"val";            
            }"codecontrol";
          }"obs";
        }"entrirel1";

        substance.entryRelationship as entrirel2 then{
          entrirel2.observation as obs then{          
            obs.code where( code = '59781-5')then{
              obs.value as value then{
                value.high as h then{
                    h.value as value -> tgt.expirationDate = truncate(value, 10); //truncate(date, 10);   
                }"val";
              }"value";
            }"codecontrol";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '59785-6') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', tgt.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"codecontrol";
          }"obs";
        }"entrirel4";
      
        substance.entryRelationship as entrirel5 then{
            entrirel5.observation as obs then{          
              obs.code where( code = '75321-0') or (code = '5321-0') -> tgt.reaction as reaction then {
                obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , reaction.detail  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then Observation(obs, patient, encounter, observation, bundle) "observation";
              }"codecontrol";
            }"obs";
        }"entrirel5";

        substance.entryRelationship as entrirel5 then{
            entrirel5.act as act then{          
              act.text as tx -> tgt.note as note then{
                tx.reference as reference -> note.text = (reference.value) "text";
            }"note";
            }"obs";
        }"entrirel5";
  
}

group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    
    src.id -> tgt.identifier;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    //src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src where entryRelationship.exists().not() then{
        src.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
        src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    }"onset";

    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            
            //toASK
            obsentry.value -> tgt.code;

            obsentry.code -> tgt.category;
            obsentry.effectiveTime as effectiveTime where (value.exists()) -> tgt.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
            obsentry.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            obsentry.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
            obsentry.entryRelationship as entryR2 then{
                entryR2.observation as obsentry2 then{

                    obsentry2.code where code ='89261-2' then{
                        obsentry2 -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', evidence.detail = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsy.id) then Observation(obsentry2, patient, encounter, obsy, bundle) "observation";
                    }"observation";

                    obsentry2.code where code = '33999-4' then{
                        obsentry2.value as value -> tgt.clinicalStatus as clinicalstatus then {
                            value as val -> clinicalstatus.coding = create('Coding') as coding then {
                                val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                                val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                                val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                                val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                                val.displayName as display-> coding.display= cast(display, 'string') "display";
                            }"coding";           
                            obsentry2.text as text then{
                                text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                            }"text";
                        }"clinicalstatus";
                    }"clinicalStatus2";

                    obsentry2.code where code ='SEV' then{
                        obsentry2.value -> tgt.severity;
                    }"severity";
                }"observation";
                entryR2.act as act then{
                    act.text as text -> tgt.note as note then{
                        text.reference as reference -> note.text = (reference.value) "text";
                    }"note";
                }"act";
            }"entryR";
        }"EntryRelObsevation";
    } "entryR";
}

group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patReference";    
    src.id -> tgt.identifier; 
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('date') as value then TSDate(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationshipCode";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                    //administrativeGenderCode.displayName as dn -> coding.display = dn;
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            //observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            // observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then{
            //     effectiveTime -> value.start = (effectiveTime.value) "va";
            // }"value";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}

group Practitioner(source src : performer, target tgt: Encounter, target bundle: Bundle){
    src -> bundle.entry as e22, e22.request = create('BackboneElement') as request, request.method = 'PUT', e22.resource = create('Practitioner') as practitioner1 then{       
        src.assignedEntity as assignedEntity -> tgt.participant as participant then{

            src.time as time where (value.exists()) ->  participant.period = create('dateTime') as value then TSDateTime(time, value) "value1";
            src.time as time where (low.exists()) ->  participant.period = create('Period') as value then IVLTSPeriod(time, value) "valuePeriod";
            
            // src.time as time -> participant.period as period then{
            //     time -> period.start "start";
            // } "period"; 

            assignedEntity.id as id ->practitioner1.identifier as identifier then{
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext "ext";
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                    id.extension as ext -> practitioner1.id = (r + '-' + ext) as uuid22,  e22.fullUrl = append('https://example/Practitioner/', uuid22), participant.individual = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner1.id) "id";
                }"r";
            }"identifier";
            assignedEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              assignedEntity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"diverso";
            assignedEntity -> practitioner1.meta as meta then {
                src-> meta.tag = create('Coding') as coding then {
                    src -> coding.system ='http://algoritmodiscoring'"system";
                    src -> coding.code ='ClinicalDocument/body/VisiteRicoveri/performer/' "code";
                }"coding";
            }"meta";
            assignedEntity.addr -> practitioner1.address;      
            assignedEntity.telecom -> practitioner1.telecom;
            assignedEntity.assignedPerson as person then{
                person.name ->  practitioner1.name "name"; 
                person.birthTime -> practitioner1.birthDate;
            }"partname";
        }"participant";
    }"resurceCreation";
}

group CarePlanFunction(source src: entry, target tgt: CarePlan, target patient:Patient, target encounter: enc, target bundle: Bundle){
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src -> tgt.status ='unknown' "status";
    src -> tgt.intent = 'plan' "intent";
    src -> tgt.activity as activity then{  
        src -> activity.detail as detail then{
            src.observation as observation then{ 
                observation  then{
                    observation -> detail.status = 'unknown' "status";
                    observation -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', detail.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "obs1";
                }"activity";
            }"entryObs";
    
            src.substanceAdministration as substanceAdministration -> tgt.activity as activity then{ 
                substanceAdministration -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('MedicationRequest') as medre1,  medre1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/MedicationRequest/', uuid2), request.url = 'MedicationRequest', activity.reference = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medre1.id) then MedicationRequest(substanceAdministration, patient, encounter,medre1,bundle)"Terapie";
            }"entrySub";
    
            src.procedure as procedureC -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST',   e8.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Procedure/', uuid8), request.url = 'Procedure' , activity.outcomeReference  = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id) then Procedure(procedureC, patient, encounter, procedure, bundle) "proc";
            
            src.encounter as encounterCDA -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounterFHIR,  encounterFHIR.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter', tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounterFHIR.id) then{
                
                //encounterCDA -> encounterFHIR.partOf = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "encounterHeader";
                encounterCDA -> encounterFHIR.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "refPatient";

                encounterCDA.id -> encounterFHIR.identifier;
                encounterCDA.statusCode -> encounterFHIR.status;
                encounterCDA where statusCode.exists().not() -> encounterFHIR.status = 'unknown' "status";
                encounterCDA.code as code -> encounterFHIR.class as class then{
                    code.code as code -> class.code = cast(code, 'string');
                    code.codeSystem as system -> class.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                    code.displayName as display -> class.display = cast(display, 'string');
                }"class";
                encounterCDA.text as text -> encounterFHIR.type as type then {
                    text.reference as reference -> type.text = (reference.value) "value";
                }"text";

                encounterCDA.effectiveTime as effectiveTime -> encounterFHIR.period = create('Period') as period then{
                    effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";
                }"efft";

            }"viste";
            
            src.act as act then{                
                act.id -> tgt.identifier;
                act.code -> activity.outcomeCodeableConcept;
                act.text as text -> activity.progress = create('Annotation') as progress then{
                    text.reference as reference -> progress.text = (reference.value) "value";
                }"text";
                act.effectiveTime as effectiveTime -> detail.scheduled = create('Period') as period then{
                    effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";
                }"efft";
                act -> detail.status = 'completed' "status";
            } "act";
        }"detail";
    }"activityIni";
}


group MedicationRequest(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationRequest, target bundle: Bundle){
    //default  + mandatory
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    //src -> tgt.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src -> tgt.intent = 'order' "intent";
    src where statusCode.exists().not() -> tgt.status = 'unknown' "st";
    src.statusCode as sc then {
        sc.code as cos-> tgt.status = translate(cos, '#MedicationStatusMap', 'code') "codeS";
    }"status";
    //
    
    src.id -> tgt.identifier;
    src.text as txt -> tgt.note as note then{
        txt.reference as reference -> note.text = (reference.value) "text";
    }"note";

    src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff -> rep.bounds  = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: EIVL_TS as effe -> tgt.dosageInstruction = create('Dosage') as dosage then{
        effe -> dosage.timing = create('Timing') as timing then {
          effe -> timing.repeat as rep then {
            effe.eventCode as ev -> rep.when = (ev.code);
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

      src.effectiveTime: PIVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
      }"eff";
    
    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) then{
        src ->  tgt.dosageInstruction = create('Dosage') as dosageInstruction then{
            src.doseQuantity as doseQuant then{
                doseQuant.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";  
                doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
                doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                    doseQuant.low as lo -> l.value = (lo.value); 
                    doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                    doseQuant.high as hi -> h.value = (hi.value);
                    doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
                }"d";
            }"dosageRate";
        } "doseQuantity";
            src.rateQuantity as rateQuantity then{
                rateQuantity.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";
                rateQuantity -> dosageInstruction.doseAndRate as dosageRate then{
                    rateQuantity -> dosageRate.rate = create('Range') as d then{
                        rateQuantity -> d.low = create('SimpleQuantity') as l then{
                            rateQuantity.low as lo -> l.value = (lo.value); 
                            rateQuantity.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        rateQuantity -> d.high = create('SimpleQuantity') as h then{
                            rateQuantity.high as hi -> h.value = (hi.value);
                            rateQuantity.high as hi -> h.unit = (hi.unit); 
                        }"high";
                    }"r";
                }"dosageRate";

            }"rate";
        
        src.routeCode -> dosageInstruction.route "route";
        src.approachSiteCode -> dosageInstruction.site "site";
        src.targetSiteCode -> dosageInstruction.site "site";

        }"dosageIn";
    }"condition";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src,medication,patient,bundle) "medication";       
    src.entryRelationship as entryRelationship then{
        entryRelationship.supply as supply -> tgt.dispenseRequest as dispenseRequest then{
            supply.quantity as quantityCDA -> dispenseRequest.quantity as quantityFHIR then{
                quantityCDA -> quantityFHIR.value = (quantityCDA.value) "value";
            }"quantity";
        }"supply";
    }"entryR";

    src.participant as participant then{
        participant then Practitioner(participant, tgt, bundle) "function"; 
        participant.effectiveTime -> tgt.authoredOn "autor"; 
    }"Partecipant";
}

group OrganizationAffiliation(source src: act, target patient: Patient, target enc: Encounter, target tgt: OrgAffiliation, target bundle: Bundle){
    
    src.id-> tgt.identifier;
    // src.code -> tgt.specialty as specialty then{
    //     src.entryRelationship as entryR then{
    //         entryR.text as text then{
    //             text.reference as reference -> specialty.text = (reference.value) "value";
    //         }"text";
    //     } "entryR";
    // } "specialty";
    src.statusCode where code = 'active' -> tgt.active = true;
    src.statusCode where(code = 'active').not() -> tgt.active = false;  
    src.effectiveTime as eff -> tgt.period;
    //src.code -> tgt.specialty;

            src -> tgt.specialty = create('CodeableConcept') as spec then{
                src.code as code   then{
                    code -> spec.coding = create('Coding') as cd then{
                        code -> cd.code = (code.code) "code";
                        code -> cd.display = (code.displayName) "code";
                        code.codeSystem as r -> cd.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    }"cd";
                }"spec";  

                src.entryRelationship as entry then{
                    entry.act as a then{
                        a.text as tx then{
                            tx.reference as reff -> spec.text = (reff.value);
                        }"ref";                    
                    }"act";
                }"entry";
            }"a";
}

group DiagnosticReportFunction(source src: organizer, target patient: Patient, target enc: Encounter, target tgt: DiagnosticReport, target bundle: Bundle){

    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference"; 
    //src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 

    src.code -> tgt.code;
    src.statusCode where code = 'completed' -> tgt.status = 'final';
    src.effectiveTime as eff where (value.exists()) -> tgt.effective = create('dateTime') as value then TSDateTime(eff, value) "value1";
    src.effectiveTime as eff where (low.exists()) -> tgt.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.component as component then{
        component.observation as observation -> bundle.entry as ei, ei.request = create('BackboneElement') as request, request.method = 'POST', ei.resource = create('Observation') as obsi,  obsi.id = uuid() as uuidi,  ei.fullUrl = append('https://example/Observation/', uuidi), request.url = 'Observation' ,tgt.result  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsi.id) then Observation(observation, patient, enc, obsi, bundle) "hasMember";
    }"component";

}

group EncounterFunction(source src: cdaElement , target patient: Patient, target encounter: Encounter, target tgt: Encounter, target bundle: Bundle){
    src.id -> tgt.identifier;
    src.statusCode -> tgt.status;
    src where statusCode.exists().not() -> tgt.status = 'unknown' "status";
    src.code as code -> tgt.class as class then{
        code -> class.code = (code.code) "code";
        code -> class.display = (code.displayName) "display";
        code.codeSystem as r ->class.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    }"co";

    // src.effectiveTime as effective -> tgt.period as period then{
    //     effective.low as l -> period.start = (l.value) "value";
    //     effective.high as h -> period.end = (h.value) "value";
    // }"eff";
    src where effectiveTime.low.exists() or effectiveTime.high.exists() then {
        src.effectiveTime as eff  -> tgt.period=create('Period') as period then IVLTSPeriod(eff,period);
        }"where";
        // effectiveTime = time-stamp
        src where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
        src.effectiveTime as effectivetime1 -> tgt.period = create('Period') as period then{
          effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
        }"efft";
        }"where";
    // src.effectiveTime as eff where (value.exists()) -> tgt.period = create('dateTime') as value then TSDateTime(eff, value) "value1";
    // src.effectiveTime as eff where (low.exists()) -> tgt.period = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";
    

    src.text as tx -> tgt.type as ty then{
        tx.reference as reff -> ty.text = (reff.value) "textType";
    }"text";
    src.performer as performer -> tgt.participant as part then{

        performer -> part.period as period then{
            performer.time as time ->  period.start as start then TSDateTime(time,start) "val"; 
        }"period";
   performer.assignedEntity as assentity -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', tgt.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id) then{
            assentity.code -> practitionerRole.code;
            assentity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
                assentity->practitioner.meta as meta then {
                    assentity->meta.tag = create('Coding') as coding then {
                        assentity -> coding.system ='http://algoritmodiscoring'"system";
                        assentity -> coding.code ='ClinicalDocument/body/encounter/performer'"code";
                  }"coding";
                }"meta";
                assentity.id as id -> practitioner.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    assentity-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
                  }"r";
                }"identifier";
                assentity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                  id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                }"2.16.840.1.113883.2.9.4.3.2";
                assentity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                assentity.addr -> practitioner.address;      
                assentity.telecom -> practitioner.telecom;
                assentity.assignedPerson as person then {
                  person.name -> practitioner.name;
                  person.birthTime as birthTime then{
                    birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
                  }"birth";
                }"name";
        }"assignedEntity";
    }"performer";    
}"01";

}
", "subType": "00"}}, "filename": "ProfiloSanitarioSinteticoBody_v1.9.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:06.154Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d10091c057abd6ef9cb"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodilaboratorioFULLBODY", "version": "2.2", "template_id_root": ["2.16.840.1.113883.2.9.10.1.1"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodilaboratorioFULLBODY" = "RefertodilaboratorioFULLBODY"

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Specimen" alias Specimen as produced
uses "http://hl7.org/fhir/StructureDefinition/Procedure" alias Procedure as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/cda/StructureDefinition/Organizer" alias Organizer as source

imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
 bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST',  e6.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid6,  e6.fullUrl = append('https://example/DocumentReference/', uuid6),request.url = 'DocumentReference' then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle,DocumentReference) "cdatobundle";
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
        patient.id as id-> patient.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
           id.extension as ext1 -> identifier.value = ext1 "value";
           id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
         }"idfr";
         patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
         }"record";
   }"patient";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle , target documentreference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle,documentreference) "composition";
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
	     component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter,documentreference);       
       };
      };
    }"body";
  };
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter,target documentreference : DocumentReference) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('DiagnosticReport') as DiagnosticReport,  DiagnosticReport.id = uuid() as uuid1,  e1.fullUrl = append('https://example/DiagnosticReport/', uuid1), request.url = 'DiagnosticReport' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %DiagnosticReport.id) then {
    entry1.act as act1 then Act(act1, patient, DiagnosticReport , enc , bundle) "act";
  }"entry";
  src.component as component then {
    component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle,enc,documentreference);
  }"component";
}

group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
  obs.code -> ob.code;

  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  obs.interpretationCode -> ob.interpretation;
  obs.methodCode -> ob.method;
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
      val.value as value->quantity.value = value;
      val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

  //Note e commenti
  obs.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ob.note as note then {
          reference->note.text =(reference.value)"reference";
        }"reference";
      }"text";
    }"Act";
  }"entryRelationship";

  //subject
  obs.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";
  
  //performer
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> ob.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
            }"coding";
          }"meta";
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
            }"r";
          }"identifier";
          entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          entity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
          entity.addr -> practitioner.address;      
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime as birthTime then{
              birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
            }"birth";
          }"name";
          //organization
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization'"code";
              }"coding";
            }"meta";
           representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
              }"r";
            }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, e4.resource = create('Organization') as organization1, request.method = 'PUT' then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta"; 
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)  "org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/wholeOrganization'"code";
                  }"coding";
                }"meta";
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                  }"r"; 
                }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"OrgPartOf";
          }"representedOrganization"; 
        }"practitioner";
      }"entity";
    }"practitionerRole";
  }"performer";

  //author
  obs.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ob.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
      assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7 then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/observation/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,   e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
          assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          assignedAuthor.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,   e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"org";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,   e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r"; 
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2 then{
            wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4, e10.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)    "org";
              }"r"; 
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  obs.participant as participant where(typeCode!='DEV') ->  ob.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/Practitioner/' + %practitionerRole.id) then { 
     // participant.time -> participant1.period;
      participant.time as time1 -> participant1.period = create('Period') as period then{
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time";
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period);
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/observation/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e13.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
          }"r";
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device
  obs.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', ob.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  //observationMedia
  obs.entryRelationship as er then {
    er.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', ob.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
      obsMedia-> media1.content = create('Attachment') as Attachment then {
        obsMedia -> media1.status='unknown'"status";
        obsMedia.value as valueMedia then {
          valueMedia.mediaType as type -> Attachment.contentType=type "type";
          valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
        }"valuemedia";
      } "Attachment";
    }"media";
  }"observationMedia";

  //referenceRange   
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
    refRange.observationRange as obsRange then {
    obsRange.value:ST as value->ref.text =create('string'),ref.text= (value.dataString) "value";
      obsRange -> ref.low = create('Quantity') as Low  then {
      obsRange.value: IVL_PQ as v  then {
        v.low as l1 then {
          l1.value as decValue-> Low.value = decValue;
          l1.unit as Unit-> Low.unit = Unit;
        }"decValue"; 
        v->ref.high = create('Quantity') as high  then {
          v.high as h1 then {
            h1.value as decValue1-> high.value = decValue1;
            h1.unit as Unit1-> high.unit = Unit1;
          }"decValue";
        }"high";           
      }"IVL-PQ";
      obsRange.interpretationCode->ref.type;
      obsRange.precondition as precondition then { 
        precondition.criterion as criterion then{ 
          criterion.code -> ref.appliesTo "appliesTo";
          criterion.value: IVL_PQ as v then {
            v.high as l1 then {
           l1-> ref.age = create('Quantity')as age then {
            l1 -> age.high as high then {
              l1.value as decValue -> high.value = decValue;
              l1.unit as Unit1-> high.unit = Unit1;
                      }"high";
                    }"age";
                  } "low"; 
             } "v"; 
          } "criterion"; 
       }"precondition";
    }"obsRange";              
  }"refRange";  
 }"ref";

}

group Observation2 (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle, source cda: Act, target specimenp : Specimen) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
  obs.code -> ob.code;

  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  obs.interpretationCode -> ob.interpretation;
  obs.methodCode -> ob.method;
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
      val.value as value->quantity.value = value;
      val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";


  //Note e commenti
  obs.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ob.note as note then {
          reference->note.text =(reference.value)"reference";
        }"reference";
      }"text";
    }"Act";
  }"entryRelationship";

  //subject
  obs.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";

  cda where cda.entryRelationship.act.exists() then {
  //specimen
    obs.specimen as spmn  then {
      spmn.specimenRole as specimenRole then{  
        specimenRole.id as id then{
          id.extension as extobs then{
            cda.entryRelationship as entryRelationship then{
              entryRelationship.act as a then{
                a.specimen as sp then{
                  sp.specimenRole as spr then{
                    spr.id where(extension = extobs) -> bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', ob.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then{
                      spr -> specimen.parent=create('Reference') as reference,  reference.reference = ('https://example/Specimen/' + %specimenp.id) "reference";   
                      spr.id -> specimen.identifier;
                      specimenRole.specimenPlayingEntity as spent then{
                        spent.code -> specimen.type;
                      }"ent";
                      spr.specimenPlayingEntity as specimenPlayingEntity then {
                        specimenPlayingEntity.code -> specimen.type;
                      }"specimenPlayingEntity";   
                        a -> specimen.collection=create('BackboneElement') as collection then {
                          a.effectiveTime as effectivetime -> collection.collected =create('dateTime') as value then TSDateTime(effectivetime,value)"value";
                          a where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                          a.effectiveTime as eff-> collection.collected=create('Period') as period then IVLTSPeriod(eff,period);
                          }"where";
                          a.participant as participant ->bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'PUT', e10.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid11, e10.fullUrl = append('https://example/Practitioner/', uuid11),  collection.collector = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) then {
                            participant.participantRole as participantRole then {
                              participantRole->practitioner.meta as meta then {
                                participantRole->meta.tag = create('Coding') as coding then {
                                  participantRole -> coding.system ='http://algoritmodiscoring'"system";
                                  participantRole -> coding.code ='ClinicalDocument/body/act/participant'"code";
                                }"coding";
                              }"meta";
                              participantRole.id as id -> practitioner.identifier as identifier then {
                                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                                id.extension as ext->identifier.value = ext then {
                                  participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
                                }"ext";
                                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                              }"identifier";
                              participantRole.addr -> practitioner.address;
                              participantRole.playingEntity  as playingEntity then{
                                playingEntity.name -> practitioner.name;
                              }"playingEntity";
                            }"participantRole";
                          }"participant";
                        }"collection";  
                    }"cont";
                  }"spr";
                }"sp";
              }"a";
            }"en";             
          }"extobs";
        }"id"; 
    }"specimenRole";  
    }"specimen";
  }"conditionactexists";
  
  cda where cda.entryRelationship.act.exists().not() and (obs.specimen.specimenRole.specimenPlayingEntity.code.code != specimenp.type.coding.code) then {
    obs.specimen as spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', ob.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      spmn.specimenRole as specimenRole then{
        specimenRole.id  -> specimen.identifier;
     specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
        }"specimenPlayingEntity";
      }"specimenRole";
    }"specimen";    
  }"wherenotexists";
  
  //performer
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> ob.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
            }"coding";
          }"meta";
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
            }"r";
          }"identifier";
          entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          entity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
          entity.addr -> practitioner.address;      
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime as birthTime then{
              birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
            }"birth";
          }"name";
          //organization
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization'"code";
              }"coding";
            }"meta";
           representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
              }"r";
            }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, e4.resource = create('Organization') as organization1, request.method = 'PUT' then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta"; 
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)  "org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/wholeOrganization'"code";
                  }"coding";
                }"meta";
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                  }"r"; 
                }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"OrgPartOf";
          }"representedOrganization"; 
        }"practitioner";
      }"entity";
    }"practitionerRole";
  }"performer";

  //author
  obs.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ob.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
      assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7 then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/observation/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,   e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
          assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          assignedAuthor.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,   e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"org";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,   e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r"; 
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2 then{
            wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4, e10.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)    "org";
              }"r"; 
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  obs.participant as participant where(typeCode!='DEV') ->  ob.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/Practitioner/' + %practitionerRole.id) then { 
      //participant.time -> participant1.period;
      participant.time as time1 -> participant1.period = create('Period') as period then{
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time"; 
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period);
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/observation/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e13.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
          }"r";
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device
  obs.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', ob.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  //observationMedia
  obs.entryRelationship as er then {
    er.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', ob.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
      obsMedia-> media1.content = create('Attachment') as Attachment then {
        obsMedia -> media1.status='unknown'"status";
        obsMedia.value as valueMedia then {
          valueMedia.mediaType as type -> Attachment.contentType=type "type";
          valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
        }"valuemedia";
      } "Attachment";
    }"media";
  }"observationMedia";

  //referenceRange   
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
    refRange.observationRange as obsRange then {
    obsRange.value:ST as value->ref.text =create('string'),ref.text= (value.dataString) "value";
      obsRange -> ref.low = create('Quantity') as Low  then {
      obsRange.value: IVL_PQ as v  then {
        v.low as l1 then {
          l1.value as decValue-> Low.value = decValue;
          l1.unit as Unit-> Low.unit = Unit;
        }"decValue"; 
        v->ref.high = create('Quantity') as high  then {
          v.high as h1 then {
            h1.value as decValue1-> high.value = decValue1;
            h1.unit as Unit1-> high.unit = Unit1;
          }"decValue";
        }"high";           
      }"IVL-PQ";
      obsRange.interpretationCode->ref.type;
      obsRange.precondition as precondition then { 
        precondition.criterion as criterion then{ 
          criterion.code -> ref.appliesTo "appliesTo";
          criterion.value: IVL_PQ as v then {
            v.high as l1 then {
           l1-> ref.age = create('Quantity')as age then {
            l1 -> age.high as high then {
              l1.value as decValue -> high.value = decValue;
              l1.unit as Unit1-> high.unit = Unit1;
                      }"high";
                    }"age";
                  } "low"; 
             } "v"; 
          } "criterion"; 
       }"precondition";
    }"obsRange";              
  }"refRange";  
 }"ref";

}

group Observation3 (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle, source cda: Act) {
    
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
  obs.code -> ob.code;

  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  obs.interpretationCode -> ob.interpretation;
  obs.methodCode -> ob.method;
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
      val.originalText as originalText then{
        originalText.reference as reference-> ce.text=reference;
      }"originltext";
      val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        val.codeSystemVersion as version -> coding.version = cast(version, 'string');
      }"code";
      val.translation as translation -> ce.coding as coding then {
        translation.code as code -> coding.code = cast(code, 'string');
        translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        translation.displayName as display -> coding.display = cast(display, 'string');
        translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
        translation.qualifier as qualifier then{
          qualifier.value as value -> ce.coding as coding then {
            value.code as code -> coding.code = cast(code, 'string');
            value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
            value.displayName as display -> coding.display = cast(display, 'string');
            value.codeSystemVersion as version -> coding.version = cast(version, 'string');
          }"value";
        }"qualifier";
      }"translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
      val.value as value->quantity.value = value;
      val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";

  //Note e commenti
  obs.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ob.note as note then {
          reference->note.text =(reference.value)"reference";
        }"reference";
      }"text";
    }"Act";
  }"entryRelationship";

  //subject
  obs.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";

  //specimen
  // cda where cda.specimen.exists() then {
  // obs.specimen -> ob.specimen = create('Reference') as reference,  reference.reference = ('https://example/Specimen/' + %specimenp.id) "ref";
  // obs.specimen as spmn  then {    
  //   spmn.specimenRole as specimenRole then{        
  //     specimenRole.specimenPlayingEntity as ent then{
  //       ent where(specimenp.type.exists().not()) then{
  //         ent.code -> specimenp.type;
  //       }"once";
  //     }"ent";
  //   }"specimenRole";  
  // }"specimen";
  // }"cda";
  obs.specimen as  spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', ob.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      spmn.specimenRole as specimenRole then{
          specimenRole.id as id -> specimen.identifier;
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
            }"specimenPlayingEntity";
        }"specimenRole";
  }"specimen";

  
  //performer
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> ob.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
        entity.code -> practitionerRole.code;
        entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          entity->practitioner.meta as meta then {
            entity->meta.tag = create('Coding') as coding then {
              entity -> coding.system ='http://algoritmodiscoring'"system";
              entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
            }"coding";
          }"meta";
          entity.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
            }"r";
          }"identifier";
          entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          entity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
          entity.addr -> practitioner.address;      
          entity.telecom -> practitioner.telecom;
          entity.assignedPerson as person then {
            person.name -> practitioner.name;
            person.birthTime as birthTime then{
              birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
            }"birth";
          }"name";
          //organization
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization'"code";
              }"coding";
            }"meta";
           representedOrganization.id as id -> organization.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
              }"r";
            }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, e4.resource = create('Organization') as organization1, request.method = 'PUT' then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta"; 
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)  "org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/observation/performer/representedOrganization/wholeOrganization'"code";
                  }"coding";
                }"meta";
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                  }"r"; 
                }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
              }"wholeOrganization";
            }"OrgPartOf";
          }"representedOrganization"; 
        }"practitioner";
      }"entity";
    }"practitionerRole";
  }"performer";

  //author
  obs.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ob.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
      assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
      assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid7 then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/observation/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,   e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"aut";
          }"r";
          assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          assignedAuthor.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
        }"identifier";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,   e8.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"org";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,   e9.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r"; 
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2 then{
            wholeOrgan->organization2.meta as meta then {
              wholeOrgan->meta.tag = create('Coding') as coding then {
                wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                wholeOrgan -> coding.code ='ClinicalDocument/body/observation/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4, e10.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)    "org";
              }"r"; 
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  obs.participant as participant where(typeCode!='DEV') ->  ob.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12 ,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/Practitioner/' + %practitionerRole.id) then { 
      //participant.time -> participant1.period;
      participant.time as time1 -> participant1.period = create('Period') as period then {
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time";
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period);
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/observation/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e13.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
          }"r";
        }"identifier";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device
  obs.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', ob.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  //observationMedia
  obs.entryRelationship as er then {
    er.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', ob.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
      obsMedia-> media1.content = create('Attachment') as Attachment then {
        obsMedia -> media1.status='unknown'"status";
        obsMedia.value as valueMedia then {
          valueMedia.mediaType as type -> Attachment.contentType=type "type";
          valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
        }"valuemedia";
      } "Attachment";
    }"media";
  }"observationMedia";

  //referenceRange   
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
    refRange.observationRange as obsRange then {
    obsRange.value:ST as value->ref.text =create('string'),ref.text= (value.dataString) "value";
      obsRange -> ref.low = create('Quantity') as Low  then {
      obsRange.value: IVL_PQ as v  then {
        v.low as l1 then {
          l1.value as decValue-> Low.value = decValue;
          l1.unit as Unit-> Low.unit = Unit;
        }"decValue"; 
        v->ref.high = create('Quantity') as high  then {
          v.high as h1 then {
            h1.value as decValue1-> high.value = decValue1;
            h1.unit as Unit1-> high.unit = Unit1;
          }"decValue";
        }"high";           
      }"IVLPQ";
      obsRange.interpretationCode->ref.type;
      obsRange.precondition as precondition then { 
        precondition.criterion as criterion then{ 
          criterion.code -> ref.appliesTo "appliesTo";
          criterion.value: IVL_PQ as v then {
            v.high as l1 then {
           l1-> ref.age = create('Quantity')as age then {
            l1 -> age.high as high then {
              l1.value as decValue -> high.value = decValue;
              l1.unit as Unit1-> high.unit = Unit1;
                      }"high";
                    }"age";
                  } "low"; 
             } "v"; 
          } "criterion"; 
       }"precondition";
    }"obsRange";              
  }"refRange";  
 }"ref";

}

group Act (source cda: Act, target pat : Patient, target ac : DiagnosticReport, target enc : Encounter, target bundle : Bundle){
  cda.code -> ac.code;
  cda where cda.statusCode .exists().not() then {
    cda->ac.status ='final'"statuscode";
  }"status";
  cda.statusCode as statusc where (code='completed') -> ac.status ='final';
  cda.statusCode as statusc where (code='active') -> ac.status ='registered';
  cda.statusCode as statusc where (code='aborted') -> ac.status ='cancelled';
  cda.statusCode as statusc where (code='suspended') -> ac.status ='partial';
  cda.effectiveTime as effectiveTime -> ac.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value3";
  cda where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  cda.effectiveTime as eff-> ac.effective=create('Period') as period then IVLTSPeriod(eff,period);
  }"where";
  
  cda -> ac.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %pat.id) "reference";
  cda -> ac.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";

  //specimen
  cda where cda.specimen.exists() then {
    cda.specimen as src->bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('https://example/Specimen/', uuid4), request.url = 'Specimen', ac.specimen=create('Reference') as reference,  reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      src.specimenRole as specimenRole then{
        specimenRole.id ->specimen.identifier;
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
        }"specimenPlayingEntity";
      }"SpecimenRole";
      src->specimen.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      cda.entryRelationship as entryRelationship then {
      entryRelationship.observation as observation then {
      observation -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
        observation then  Observation2(observation,pat,enc,obs,bundle,cda,specimen) "ORG";
        // procedure
        cda.entryRelationship as entryRelationship1 then {
          entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
            proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
            proc where proc.statusCode .exists().not() then {
              proc->procedure.status ='unknown'"statuscode";
            }"status";
            proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
            proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
            proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
            proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
            proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
            proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
            proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
            proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
            proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
            proc.effectiveTime as  eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
            }"where";
            proc.targetSiteCode -> procedure.bodySite;     
          }"procedure"; 
        }"entryRelationshipprocedure"; 
      }"obs";
      }"observation";

      entryRelationship.organizer as organizer then {
        organizer -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
          organizer then  Organizer(cda,organizer,pat,enc,obs,bundle) "ORG";
          // procedure
          cda.entryRelationship as entryRelationship1 then {
            entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
              proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
              proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
              proc where proc.statusCode .exists().not() then {
                proc->procedure.status ='unknown'"statuscode";
              }"status";
              proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
              proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
              proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
              proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
              proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
              proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
              proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
              proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
              proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              proc.effectiveTime as  eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              proc.targetSiteCode -> procedure.bodySite;     
            }"pbservation"; 
          }"entryRelationshiprocedure"; 
        }"Organizer";
      }"organizer";

      }"entryRelationshipobservation";
    }"specimen";
  }"exist";

  cda where cda.specimen.exists().not() then {
   // cda -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Specimen') as specimen,  specimen.id = uuid() as uuid4,  e4.fullUrl = append('https://example/Specimen/', uuid4), request.url = 'Specimen' then {
      cda.entryRelationship as entryRelationship then {
      entryRelationship.observation as observation then {
      observation -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
        observation then  Observation3(observation,pat,enc,obs,bundle,cda) "ORG";
        // procedure
        cda.entryRelationship as entryRelationship1 then {
          entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
            proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
            proc where proc.statusCode .exists().not() then {
              proc->procedure.status ='unknown'"statuscode";
            }"status";
            proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
            proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
            proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
            proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
            proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
            proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
            proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
            proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
            proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
            proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
            proc.effectiveTime as  eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
            }"where";
            proc.targetSiteCode -> procedure.bodySite;     
          }"procedure"; 
        }"entryRelationshipprocedure"; 
      }"obs";
      }"observation";
      entryRelationship.organizer as organizer then {
        organizer -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs,  obs.id = uuid() as uuid13,  e12.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', ac.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs.id) then {
          organizer then  Organizer(cda,organizer,pat,enc,obs,bundle) "ORG";
          // procedure
          cda.entryRelationship as entryRelationship1 then {
            entryRelationship1.procedure as proc  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Procedure') as procedure,  procedure.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Procedure/', uuid5), request.url = 'Procedure', obs.partOf=create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure.id)  then{
              proc -> procedure.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
              proc -> procedure.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
              proc where proc.statusCode .exists().not() then {
                proc->procedure.status ='unknown'"statuscode";
              }"status";
              proc.statusCode as statusc where (code='completed') -> procedure.status ='completed';
              proc.statusCode as statusc where (code='active') -> procedure.status ='in-progress';
              proc.statusCode as statusc where (code='aborted') -> procedure.status ='stopped';
              proc.statusCode as statusc where (code='suspended') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='cancelled') -> procedure.status ='not-done';
              proc.statusCode as statusc where (code='held') -> procedure.status ='on-hold';
              proc.statusCode as statusc where (code='new') -> procedure.status ='preparation';
              proc.statusCode as statusc where (code='obsolete') -> procedure.status ='entered-in-error';
              proc.statusCode as statusc where (code='nullified') -> procedure.status ='unknown';
              proc.effectiveTime as effectiveTime -> procedure.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "datetime";
              proc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              proc.effectiveTime as eff-> procedure.performed=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              proc.targetSiteCode -> procedure.bodySite;     
            }"pbservation"; 
          }"entryRelationshiprocedure"; 
        }"Organizer";
      }"organizer";
      }"entryRelationshipobservation";
     
    //}"specimen";
  }"existnot";

  //PARTICIPANT
  cda.participant  as part where(typeCode!='DEV') ->  enc.participant as participant then{
      part  -> participant.type as type then { 
        part -> type.coding as coding then {
        part-> coding.code = (part.typeCode) "codice";
        part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
  
     part.participantRole as participantRole ->  participant.individual = create('Reference') as reference then {
        participantRole ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'PUT', e.resource = create('Practitioner') as practitioner  then { 
          part.time as time1 -> participant.period = create('Period') as period then{
            time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
           }"time";
           part.time as time1 -> participant.period =create('Period') as period then IVLTSPeriod(time1,period);
          participantRole->practitioner.meta as meta then {
            participantRole->meta.tag = create('Coding') as coding then {
              participantRole -> coding.system ='http://algoritmodiscoring'"system";
              participantRole -> coding.code ='ClinicalDocument/body/act/participant'"code";
            }"coding";
          }"meta";
          participantRole.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
               participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e.fullUrl = append('https://example/Practitioner/', uuid4),  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "org";
            }"r";
            }"identifier";

          participantRole.addr -> practitioner.address;
          participantRole.playingEntity  as playingEntity then{
          playingEntity.name -> practitioner.name;
        }"playingEntity";
      }"participanRoleBund";  
    }"participantRole";
  }"participant";

 // PERFORMER
  cda.performer as performer-> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url='PractitionerRole', ac.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    performer.assignedEntity as assignedEntity then {
      assignedEntity.code as codice -> practitionerRole.code;
      assignedEntity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner   then {
      assignedEntity.code -> practitionerRole.code;
      assignedEntity->practitioner.meta as meta then {
        assignedEntity->meta.tag = create('Coding') as coding then {
          assignedEntity -> coding.system ='http://algoritmodiscoring'"system";
          assignedEntity -> coding.code ='ClinicalDocument/body/act/performer'"code";
        }"coding";
      }"meta";
      assignedEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedEntity-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id  = (r +'-'+ ext) as uuid4,  e2.fullUrl = append('https://example/Practitioner/', uuid4),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "pra";
          }"r";

          }"identifier";
      assignedEntity.addr -> practitioner.address;      
      assignedEntity.telecom -> practitioner.telecom;
      assignedEntity.assignedPerson as person then {
        person.name -> practitioner.name;
        person.birthTime as birthTime then{
          birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
        }"birth";
      }"name";
      } "ASSAUth";
      assignedEntity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/act/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id  = (r +'-'+ ext) as uuid2, e3.fullUrl = append('https://example/Organization/', uuid2), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid2)  "org";
          }"r";
          }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/act/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id  = (r +'-'+ ext) as uuid3,   organization1.id = uuid() as uuid3,  e4.fullUrl = append('https://example/Organization/', uuid3), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r";
            }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10bis,  e10bis.request = create('BackboneElement') as request, request.method = 'PUT',  e10bis.resource = create('Organization') as organization2 then{
            OrgPartOf->organization2.meta as meta then {
              OrgPartOf->meta.tag = create('Coding') as coding then {
                OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                OrgPartOf -> coding.code ='ClinicalDocument/body/act/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                  wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id  = (r +'-'+ ext) as uuid5,   e10bis.fullUrl = append('https://example/Organization/', uuid5), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
              }"r";
              }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
            }"wholeOrganization";
          } "OrgPartOf";
       } "representedOrganization"; 
    }"performer";
  }; 
 
  // AUTHOR
  cda.author as srcAuthor-> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e5.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', ac.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    srcAuthor.assignedAuthor as assignedAuthor then {
        assignedAuthor.code as codice -> practitionerRole.code;
        assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner  then {
        srcAuthor.functionCode -> practitionerRole.code;
        assignedAuthor.code -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/act/author'"code";
          }"coding";
        }"meta";
        assignedAuthor.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e7.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
           }"identifier";
           assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          assignedAuthor.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"diverso";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/act/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
             }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid8,  e8.fullUrl = append('https://example/Organization/', uuid8), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid8) "org";
            }"r";
            }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1   then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/act/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";  
          OrgPartOf.id as id -> organization1.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
               }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Organization/', uuid9), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id) "org";
            }"r";
            }"identifier";
            OrgPartOf.code -> organization1.type;
            OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
            OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2   then{
              wholeOrgan->organization2.meta as meta then {
                wholeOrgan->meta.tag = create('Coding') as coding then {
                  wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                  wholeOrgan -> coding.code ='ClinicalDocument/body/act/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                }"coding";
              }"meta";  
              wholeOrgan.id as id -> organization2.identifier as identifier then {
                 id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                 id.extension as ext->identifier.value = ext then {
                   wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid10,  e10.fullUrl = append('https://example/Organization/', uuid10), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id) "org";
                }"r";
              }"identifier";
                wholeOrgan.name as v -> organization2.name = (v.other);
                wholeOrgan.telecom -> organization2.telecom;
                wholeOrgan.addr -> organization2.address;
               }"wholeOrganization";
           }"OrgPartOf";
        }"representedOrganization"; 
     }"author";
  };

  //<!--entryRelationship per la gestione delle note e commenti-->
  cda.entryRelationship as entryRelationship then {
    entryRelationship.act as act then {
      act.text as text then {
        text.reference as reference -> ac.conclusion=(reference.value);
      }"text";
    }"Act";
  }"entryRelationship"; 
}

group Organizer(source cda: Act, source org : Organizer, target patient : Patient, target encounter : Encounter, target observation : Observation, target bundle : Bundle) {
  org->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  org->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  org.code -> observation.code;
  org where org.code.exists().not() then {
    cda.code ->observation.code;
  }"act";
  org.statusCode as statusc where (code='completed') -> observation.status ='final';
  org.statusCode as statusc where (code='active') -> observation.status ='registered';
  org.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
  org.statusCode as statusc where (code='suspended') -> observation.status ='partial';
  org.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  org where effectiveTime.low.exists() or effectiveTime.high.exists() then {
  org.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
 }"where";
  //specimen
  org.specimen as  spmn ->bundle.entry as e4o, e4o.request = create('BackboneElement') as request, request.method = 'POST', e4o.resource = create('Specimen') as specimen, specimen.id = uuid() as uuid4o, e4o.fullUrl = append('https://example/Specimen/', uuid4o), request.url = 'Specimen', observation.specimen=create('Reference') as reference, reference.reference = ('https://example/Specimen/' + %specimen.id) then {
      spmn.specimenRole as specimenRole then{
          specimenRole.id as id -> specimen.identifier;
          specimenRole.specimenPlayingEntity as specimenPlayingEntity then {
          specimenPlayingEntity.code -> specimen.type;
            }"specimenPlayingEntity";
        }"specimenRole";
  }"specimen";

  //subject
  org.subject as sbj then {
    sbj.relatedSubject as relatedSubj-> patient.extension as extension2 then ExtSubjectAnimal(relatedSubj, extension2);
  }"subject";

  //performer
  org.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole' then{
    performer -> observation.performer = create('Reference') as reference,  reference.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
      performer.assignedEntity as entity then {
          entity.code -> practitionerRole.code;
          entity -> bundle.entry as e2,  e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner  then {
            entity->practitioner.meta as meta then {
              entity->meta.tag = create('Coding') as coding then {
                entity -> coding.system ='http://algoritmodiscoring'"system";
                entity -> coding.code ='ClinicalDocument/body/organizer/performer'"code";
              }"coding";
            }"meta";
            entity.id as id -> practitioner.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
              }"r";
            }"identifier";
            entity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
              id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"2.16.840.1.113883.2.9.4.3.2";
            entity.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
              id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"diverso";
            entity.addr -> practitioner.address;      
            entity.telecom -> practitioner.telecom;
            entity.assignedPerson as person then {
              person.name -> practitioner.name;
              person.birthTime as birthTime then{
                birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
              }"birth";
            }"name";
              
          entity.representedOrganization as representedOrganization ->  bundle.entry as e3,  e3.request = create('BackboneElement') as request, request.method = 'PUT',  e3.resource = create('Organization') as organization  then {
            representedOrganization->organization.meta as meta then {
              representedOrganization->meta.tag = create('Coding') as coding then {
                representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
                representedOrganization -> coding.code ='ClinicalDocument/body/organizer/performer/representedOrganization'"code";
              }"coding";
            }"meta";
            representedOrganization.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                   representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
                  }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid3,  e3.fullUrl = append('https://example/Organization/', uuid3), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid3)"aut";
                }"r";
                }"identifier";
            representedOrganization.name as v -> organization.name = (v.other);
            representedOrganization.telecom -> organization.telecom;
            representedOrganization.addr -> organization.address;
            representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e4,  e4.request = create('BackboneElement') as request, request.method = 'PUT',  e4.resource = create('Organization') as organization1  then {
              OrgPartOf->organization1.meta as meta then {
                OrgPartOf->meta.tag = create('Coding') as coding then {
                  OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                  OrgPartOf -> coding.code ='ClinicalDocument/body/organizer/performer/representedOrganization/asOrganizationPartOf'"code";
                }"coding";
              }"meta";  
              OrgPartOf.id as id -> organization1.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid4,  e4.fullUrl = append('https://example/Organization/', uuid4), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)"org";
                }"r";
              }"identifier";
              OrgPartOf.code -> organization1.type;
              OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
              OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e5,  e5.request = create('BackboneElement') as request, request.method = 'PUT',  e5.resource = create('Organization') as organization2 then{
                wholeOrgan->organization2.meta as meta then {
                  wholeOrgan->meta.tag = create('Coding') as coding then {
                    wholeOrgan -> coding.system ='http://algoritmodiscoring'"system";
                    wholeOrgan -> coding.code ='ClinicalDocument/body/organizer/performer/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
                  }"coding";
                }"meta"; 
                wholeOrgan.id as id -> organization2.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                          wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
                          }"ext";
                       id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                       id.root as r then {
                        id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid4,  e5.fullUrl = append('https://example/Organization/', uuid4), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)"org";
                      }"r";
                     }"identifier";
                  wholeOrgan.name as v -> organization2.name = (v.other);
                  wholeOrgan.telecom -> organization2.telecom;
                  wholeOrgan.addr -> organization2.address;
                  }"wholeOrganization";
                }"OrgPartOf";
            }"representedOrganization"; 
         }"practitioner";
       }"entity";
     }"practitionerRole";
  }"performer";

  //author
  org.author as srcAuthor ->  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid6,  e6.fullUrl = append('https://example/PractitionerRole/', uuid6), request.url='PractitionerRole', observation.performer = create('Reference') as referenceaut,  referenceaut.reference = ('https://example/PractitionerRole/' + %practitionerRole.id) then {
    //srcAuthor.time as time -> tgt.date;
    srcAuthor.assignedAuthor as assignedAuthor then {
       assignedAuthor.code as codice -> practitionerRole.code as code2 then CECodeableConcept(codice,code2);
       assignedAuthor -> bundle.entry as e7,  e7.request = create('BackboneElement') as request, request.method = 'PUT', e7.resource = create('Practitioner') as practitioner  then {
         srcAuthor.functionCode -> practitionerRole.code;
        //assignedAuthor.code -> practitionerRole.code;
        assignedAuthor->practitioner.meta as meta then {
          assignedAuthor->meta.tag = create('Coding') as coding then {
            assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
            assignedAuthor -> coding.code ='ClinicalDocument/body/organizer/author'"code";
          }"coding";
        }"meta";
         assignedAuthor.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            assignedAuthor-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid7,  e7.fullUrl = append('https://example/Practitioner/', uuid7),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assignedAuthor.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"diverso";
        assignedAuthor.addr -> practitioner.address;      
        assignedAuthor.telecom -> practitioner.telecom;
        //person
        assignedAuthor.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"ASSAUth";
      //organization
      assignedAuthor.representedOrganization as representedOrganization ->  bundle.entry as e8,  e8.request = create('BackboneElement') as request, request.method = 'PUT',  e8.resource = create('Organization') as organization then {
        representedOrganization->organization.meta as meta then {
          representedOrganization->meta.tag = create('Coding') as coding then {
            representedOrganization -> coding.system ='http://algoritmodiscoring'"system";
            representedOrganization -> coding.code ='ClinicalDocument/body/organizer/author/representedOrganization'"code";
          }"coding";
        }"meta";
        representedOrganization.id as id -> organization.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            representedOrganization-> request.url = append('Organization?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> organization.id = (r +'-'+ ext) as uuid8,  e8.fullUrl = append('https://example/Organization/', uuid8), practitionerRole.organization = create('Reference') as referenceOrg,  referenceOrg.reference = append('https://example/Organization/', uuid8)"aut";
          }"r";
        }"identifier";
        representedOrganization.name as v -> organization.name = (v.other);
        representedOrganization.telecom -> organization.telecom;
        representedOrganization.addr -> organization.address;
        representedOrganization.asOrganizationPartOf as OrgPartOf -> bundle.entry as e9,  e9.request = create('BackboneElement') as request, request.method = 'PUT',  e9.resource = create('Organization') as organization1 then {
          OrgPartOf->organization1.meta as meta then {
            OrgPartOf->meta.tag = create('Coding') as coding then {
              OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
              OrgPartOf -> coding.code ='ClinicalDocument/body/organizer/author/representedOrganization/asOrganizationPartOf'"code";
            }"coding";
          }"meta";
          OrgPartOf.id as id -> organization1.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext then {
              OrgPartOf-> request.url = append('Organization?identifier=',ext)"UUID";
            }"ext";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
            id.root as r then {
              id.extension as ext  -> organization1.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Organization/', uuid9), organization.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization1.id)"aut";
            }"r";
          }"identifier";
          OrgPartOf.code -> organization1.type;
          OrgPartOf.statusCode as status where (value ='active') -> organization1.active = create('boolean'), organization1.active = 'true';
          OrgPartOf.wholeOrganization as wholeOrgan -> bundle.entry as e10,  e10.request = create('BackboneElement') as request, request.method = 'PUT',  e10.resource = create('Organization') as organization2   then{
            OrgPartOf->organization2.meta as meta then {
              OrgPartOf->meta.tag = create('Coding') as coding then {
                OrgPartOf -> coding.system ='http://algoritmodiscoring'"system";
                OrgPartOf -> coding.code ='ClinicalDocument/body/organizer/author/representedOrganization/asOrganizationPartOf/wholeOrganization'"code";
              }"coding";
            }"meta";
            wholeOrgan.id as id -> organization2.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext then {
                wholeOrgan-> request.url = append('Organization?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext  -> organization2.id = (r +'-'+ ext) as uuid10,  e10.fullUrl = append('https://example/Organization/', uuid10), organization1.partOf = create('Reference') as reference, reference.reference= ('https://example/Organization/' + %organization2.id)"aut";
              }"r";
            }"identifier";
            wholeOrgan.name as v -> organization2.name = (v.other);
            wholeOrgan.telecom -> organization2.telecom;
            wholeOrgan.addr -> organization2.address;
          }"wholeOrganization";
        }"OrgPartOf";
      }"representedOrganization"; 
      //device
      assignedAuthor.assignedAuthoringDevice as assignedAuthoringDevice -> bundle.entry as e11,  e11.request = create('BackboneElement') as request, request.method = 'POST',  e11.resource = create('Device') as device,  device.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Device/', uuid11), request.url ='Device', tgt.author = create('Reference') as reference, reference.reference= ('https://example/Device/' + %device.id) then{
        assignedAuthoringDevice.templateId -> device.identifier; 
        assignedAuthoringDevice.code -> device.type;
        assignedAuthoringDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        assignedAuthoringDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"Device";
    }"assignedAuthor";
  }"author";

  //participant person
  org.participant as participant where(typeCode!='DEV') ->  observation.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
    participant -> encounter.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e12,   e12.request = create('BackboneElement') as request, request.method = 'POST',  e12.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid12,  e12.fullUrl = append('https://example/PractitionerRole/', uuid12), request.url = 'PractitionerRole', encounter.participant = create('BackboneElement') as participant1  then { 
     // participant.time -> participant1.period; 
      participant.time as time1 -> participant1.period = create('Period') as period then{
        time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
       }"time";
       participant.time as time1 -> participant1.period =create('Period') as period then IVLTSPeriod(time1,period); 
      participant.functionCode -> practitionerRole.code;
      //non mappa i 2 precedenti
      participantRole  -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT', e13.resource = create('Practitioner') as practitioner then {
        participantRole-> participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id)"par";
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/organizer/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            participantRole-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext  -> practitioner.id = (r +'-'+ ext) as uuid2, e13.fullUrl = append('https://example/Practitioner/', uuid2),  practitionerRole.practitioner = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id)"part";
          }"r";
        }"identifier";
        participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        participantRole.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"diverso";
        participantRole.code -> practitionerRole.code;
        participantRole.addr -> practitioner.address;
        participantRole.telecom -> practitioner.telecom;
        participantRole.playingEntity as playingEntity then {
          playingEntity.name -> practitioner.name;
          playingEntity.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"practitioner";
    }"partRole";
  }"participantEncounter";

  //participant device 
  org.participant as devParticipant where(typeCode='DEV') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Device') as device,  device.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Device/', uuid14), request.url='Device', observation.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %device.id) then {
    devParticipant.participantRole as participantRoleDev then {
      participantRoleDev.playingDevice as playingDevice then {
        playingDevice.code -> device.type;
        playingDevice.manufacturerModelName as manufacturerModelName then{
          manufacturerModelName as m-> device.manufacturer = (m.displayName) "displayRule";
        }"manufacturer"; 
        playingDevice.softwareName as softwareName -> device.deviceName as deviceName then{
          softwareName -> deviceName.type = 'other' "typeName";		
          softwareName as s -> deviceName.name = (s.displayName) "name";
        }"deviceName";
      }"playingDevice";
    }"participantRoleDev";
  }"devParticipant";

  org.component as component then {
      component.observation as observation -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST', e.resource = create('Observation') as observationhasmember, 
          observationhasmember.id = uuid() as uuid2, e.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation',
          observation.hasMember = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observationhasmember.id) then Observation(observation,patient,encounter,observationhasmember,bundle) "OBS";
  }"componentobservation";
      
  org.component as component then {
        component.organizer as organizer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observationorganizer, 
          observationorganizer.id = uuid() as uuid3, e1.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation',  observation.hasMember = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observationorganizer.id) then  {
          organizer then  Organizer(cda,organizer,patient,encounter,observationorganizer,bundle) "ORG";
        }"organizer";
  }"componentorganizer";

  //observationMedia  
  org.component as component then {
        component.observationMedia as obsMedia -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'POST', e15.resource = create('Media') as media1,  media1.id = uuid() as uuid15,  e15.fullUrl = append('https://example/Media/', uuid15), request.url='Media', observation.derivedFrom = create('Reference') as reference,  reference.reference = ('https://example/Media/' + %media1.id) then {
          obsMedia-> media1.content = create('Attachment') as Attachment then {
          obsMedia -> media1.status='unknown'"status";
          obsMedia.value as valueMedia then {
              valueMedia.mediaType as type -> Attachment.contentType=type "type";
              valueMedia -> Attachment.data=(valueMedia.dataBase64Binary) "data";
              }"valuemedia";
          } "Attachment";
         }"obsmedia";
  }"component";

  //note
  org.component as component then {
      component.act as act then {
        act.text as text then {
            text.reference as reference -> observation.note as note then {
            reference->note.text =(reference.value)"reference";
            }"note";
        }"text"; 
      }"componentact";
  }"component";

}

group ExtSubjectAnimal(source src: relatedSubject, target ext: Extension) {
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/patient-animal' "url";
  src.code as code -> ext.extension as ext, ext.url='species' ,ext.value = create('CodeableConcept') as code1 then CECodeableConcept(code,code1) "code";  
}
", "subType": "00"}}, "filename": "RefertodiLaboratorioFULLBODY_v2.2.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:08.249Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d12091c057abd6ef9cc"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodiRadiologiaBody", "version": "2.2", "template_id_root": ["2.16.840.1.113883.2.9.10.1.7.1"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodiRadiologiaBody" = "RefertodiRadiologiaBody"

conceptmap "OBSstatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/observation-status"

    s:completed == t:final
    s:active == t:registered
    s:aborted == t:cancelled
    s:suspended == t:partial
  }
  conceptmap "cm-v3-administrative-gender" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
    prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"
  
    s:M == t:male
    s:F == t:female
  }
  conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"recPat";
    }"patient";
   } "ClinicalDocumentToBody";
  }
  
group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('DiagnosticReport') as diagnosticReport,  diagnosticReport.id = uuid() as uuid1,  e.fullUrl = append('https://example/DiagnosticReport/', uuid1), request.url = 'DiagnosticReport' then{
        cda.code -> diagnosticReport.code "diagnosticCode";
        cda -> diagnosticReport.status = 'registered' "stats";
    cda.component as component then {
      component.structuredBody as body then {
        body.component as component  then {
           component.section as srcSection then {
          srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, diagnosticReport);       
         } "section";
        } "component";
    }"body";
    };
    }"diagnostic";
  }
  
group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target dReport : DiagnosticReport) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %dReport.id) "reference"; 
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        entry then DiagnosticReportFunction(src, entry, dReport, bundle, enc, patient) "dreport";
    }"entry";
    src where src.entry.exists().not() then  DiagnosticReportFunction(src, cda, dReport, bundle, enc, patient) "narrative";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group DiagnosticReportFunction(source section: section, source src: entry, target dReport: DiagnosticReport, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
    src.act as act1 then{
        section where (code.code = '121181') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('ImagingStudy') as imageS,  imageS.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ImagingStudy/', uuid1), request.url = 'ImagingStudy', dReport.imagingStudy = create('Reference') as reference,  reference.reference = ('https://example/ImagingStudy/' + %imageS.id) then ImagingStudy(act1,section, imageS,patient,encounter) "imagingStudy";
        section where (code.code = '48765-2') -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation'
        , dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then{ 
            section -> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs1.status = 'final' "STatusobse";
            section.code -> obs1.code;
            act1.statusCode as s then {
                s.code as cos-> obs1.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
            section -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('List') as list1,  list1.id = uuid() as uuid4,  e4.fullUrl = append('https://example/List/', uuid4), request.url = 'List', obs1.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list1.id) then{
                section -> list1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                section -> list1.status = 'current' "listatus";
                section -> list1.mode = 'working' "lstmod";
                section -> list1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
                src -> list1.entry as entryList1 then{
                    act1 -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', entryList1.item = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then allergyFunction(act1, allergy, patient,encounter) "allergy";
                }"item";
            }"list";
        }"allergyAct";
        section where (code.code = '55111-9') -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then Observation(act1, patient, encounter, obs2, bundle) "observation";
    }"act";
    src.observation as entryobs then{
        section where (code.code = '11329-0') -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('Observation') as obs6,  obs6.id = uuid() as uuid6,  e6.fullUrl = append('https://example/Observation/', uuid6), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs6.id) then {
            section -> obs6.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs6.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs6.status = 'final' "tatusobse";
            section.code -> obs6.code;
            entryobs -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST', e7.resource = create('Condition') as condition1,  condition1.id = uuid() as uuid7,  e7.fullUrl = append('https://example/Condition/', uuid7), request.url = 'Condition', obs6.focus = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition1.id) then ConditionFunction(entryobs,condition1, patient, encounter,bundle) "condition";
        }"observationstclinica";

        section where (code.code = '55114-3') -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST', e9.resource = create('Observation') as obs9,  obs9.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Observation/', uuid9), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs9.id) then Observation(entryobs, patient, encounter, obs9, bundle) "precedentiEsami";
        section where (code.code = '55109-3') -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as obs8, obs8.id = uuid() as uuid8, e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs8.id) then Observation(entryobs, patient, encounter, obs8, bundle) "complicanze";
        section where (code.code = '18785-6') -> bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Observation') as obs14, obs14.id = uuid() as uuid14, e14.fullUrl = append('https://example/Observation/', uuid14), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs14.id) then Observation(entryobs, patient, encounter, obs14, bundle) "quesitoDiagnostico";
    } "entryObs";
    src.organizer as organizer then {
        src -> bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('Observation') as obs10,  obs10.id = uuid() as uuid10,  e10.fullUrl = append('https://example/Observation/', uuid10), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs10.id) then{
            section -> obs10.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs10.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs10.status = 'final' "tatusobse";
            section.code -> obs10.code "codeObs"; 
            section -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('List') as list11,  list11.id = uuid() as uuid11,  e11.fullUrl = append('https://example/List/', uuid11), request.url = 'List', obs10.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list11.id) then{
                section -> list11.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                section -> list11.status = 'current' "liststat";
                section -> list11.mode = 'working' "listmd";
                section -> list11.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
                organizer -> list11.entry as entryList2 then{
                    organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', entryList2.item = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";
                }"org";
            }"List";
        }"entryOrganizer";
    }"organizer";
    section where section.entry.exists().not() then {

        section where (code.code = '48765-2') -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then{ 
            section-> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs1.status = 'final' "STatusobse";
            section.code -> obs1.code;
            section.statusCode as s then {
                s.code as cos-> obs1.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
                    section.text as text  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', obs1.focus = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
                        section -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                        section -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";                        
                        section -> allergy.clinicalStatus as clinicalStatus then{
                            section -> clinicalStatus.coding = create('Coding') as coding then{
                                section -> coding.code =  'active' "code";
                                section -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";                                
                            }"coding";
                        }"status";                        
                        text -> allergy.note as note then{
                            text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                        } "narrative"; 
                    }"allergytext";
                
        }"allergyAct";

        section where (code.code = '55110-1').not() or (code.code = '11329-0').not() then{
            section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs13.id) then {
                section -> obs13.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                section -> obs13.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
                section -> obs13.status = 'preliminary' "obsst";
                section.code -> obs13.code "obscde";
                section -> obs13.status = 'final' "statusS";
                text -> obs13.note as note then{
                    text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                } "narrative";    
            }"txtsec";
          } "NonConclusion";
        section where(code.code = '55110-1') then {
            section.text as t -> dReport.conclusion = create('string')  as textConclusion then EDstring(t,textConclusion) "conc";
        }"conclusion";
    }"whereCond";
}

group Observation(source cda : observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    cda->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference"; 
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:INT as int->ob.value=(int.value) "value";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where effectiveTime.low.exists() or effectiveTime.high.exists() then {
        cda.effectiveTime as eff -> ob.effective = create('Period') as period then IVLTSPeriod(effectiveTime,period) "value3";
        }"where";
    
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
}  

group ImagingStudy(source src: act, source section : section, target tgt : ImagingStudy, target patient: patient, target encounter : encounter){
    src.id -> tgt.identifier;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
    src -> tgt.status = 'available' "status";
    src.entryRelationship as entryRelationship then{
        entryRelationship.act as act -> tgt.series as series then{
            act.id as id -> series.uid = (id.root);
             section.code as code -> series.modality= create('Coding') as coding then {
                code.code as code1 -> coding.code = cast(code1, 'string');
                code.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                code.displayName as display->coding.display= cast(display, 'string');
                }"modality";
            act.entryRelationship as entryRelationship2 then{
                entryRelationship2.observation as obs -> series.instance as instance then{
                    obs.id as id -> instance.uid = (id.root) "root";
                    obs.code as code1-> instance.sopClass = create('Coding') as coding then {
                        code1.code as code -> coding.code = cast(code, 'string');
                         code1.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        code1.displayName as display->coding.display= cast(display, 'string');
                       }"sopClass";
                } "idRoot";
            }"instance";
        } "series";
    } "entryRelationship";
}

group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    src.code -> tgt.category;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src where effectiveTime.low.exists() or effectiveTime.high.exists() then {
    src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as period then IVLTSPeriod(effectiveTime, period) "valuePeriod";
    }"where";
    src.effectiveTime as effectiveTime -> tgt.onset = create('dateTime') as dateTime then TSDateTime(effectiveTime, dateTime) "value2";
    src.value -> tgt.code;
    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            obsentry.code where code ='89261-2' then{
                obsentry -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', evidence.detail = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsy.id) then Observation(obsentry, patient, encounter, obsy, bundle) "observation";
            }"observation";
            obsentry.code where code = '33999-4' then{
                obsentry.value as value -> tgt.clinicalStatus as clinicalstatus then {
                    value as val -> clinicalstatus.coding = create('Coding') as coding then {
                        val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                        val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                        val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                        val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                        val.displayName as display-> coding.display= cast(display, 'string') "display";
                    }"coding";           
                    obsentry.text as text then{
                        text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                    }"text";
                }"clinicalstatus";
            }"clinicalStatus2";
        }"EntryRelObsevation";
        
    } "entryR";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : patient, target encounter : encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference"; 
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{
            observation1 where effectiveTime.low.exists() or effectiveTime.high.exists() then {
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as period then IVLTSPeriod(effectiveTime, period) "valuePeriod";
             }"where";
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('dateTime') as dateTime then TSDateTime(effectiveTime, dateTime) "value2"; 
            
            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
                    //criticality
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{
                    //observation4.value -> tgt.clinicalStatus;
                    observation4.value as value -> tgt.clinicalStatus as clinicalStatus then{
                        value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                            valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                            valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                            valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                            valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                            valu.displayName as display-> coding.display= cast(display, 'string') "display";
                        }"coding";
                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}


group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "patReference";    
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('dateTime') as value then TSDateTime(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationshipCode";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode.system -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            observation where observation.effectiveTime.exists() then {
                observation.effectiveTime as effectiveTime -> tgt.condition = create('BackboneElement') as condition then {
                    observation.code -> condition.code "code";
                    observation.value -> condition.outcome "codeable"; 
                    effectiveTime -> condition.onset = create('Period') as period then{
                        effectiveTime -> period.start =  create('dateTime') as start then TSDateTime(effectiveTime,start) "val"; 
                    }"efft";
                }"effttemp";
            }"cont";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}", "subType": "00"}}, "filename": "RefertodiRadiologiaBody_v2.2.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:10.864Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d14091c057abd6ef9cd"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodiSpecialisticaAmbulatorialeBody", "version": "2.7", "template_id_root": ["2.16.840.1.113883.2.9.10.1.9.1"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/RefertodiSpecialisticaAmbulatorialeBody" = "RefertodiSpecialisticaAmbulatorialeBody"

conceptmap "OBSstatus" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
prefix t = "http://hl7.org/fhir/observation-status"

s:completed == t:final
s:active == t:registered
s:aborted == t:cancelled
s:suspended == t:partial
}
conceptmap "MedicationStatusMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/CodeSystem/medicationrequest-status"
    
    s:completed == t:completed
    s:active == t:active
    s:aborted == t:cancelled
    s:suspended == t:"on-hold"
    }
conceptmap "cm-v3-administrative-gender" {
prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

s:M == t:male
s:F == t:female
}

conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}


conceptmap "ClinicalStatusMap" {
    prefix s = "https://loinc.org/99493-9/"
    prefix t = "http://terminology.hl7.org/CodeSystem/condition-clinical"

    s: "LA16666-2" == t: active
    s: "LA18632-2" == t: inactive
    s: "LA9041-0" == t: resolved
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3), request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"recPat";
    }"patient";
    } "ClinicalDocumentToBody";
}


group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('DiagnosticReport') as diagnosticReport,  diagnosticReport.id = uuid() as uuid1,  e.fullUrl = append('https://example/DiagnosticReport/', uuid1), request.url = 'DiagnosticReport' then{
        cda.code -> diagnosticReport.code "diagnosticCode";
        cda -> diagnosticReport.status = 'registered' "stats";
    cda.component as component then {
    component.structuredBody as body then {
        body.component as component  then {
            component.section as srcSection then {
        srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, diagnosticReport);       
        } "section";
        } "component";
    }"body";
    };
    }"diagnostic";
}

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target dReport : DiagnosticReport) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/DiagnosticReport/' + %dReport.id) "reference"; 
    src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
        entry then DiagnosticReportFunction(src, entry, dReport, bundle, enc, patient) "dreport";
    }"entry";
    src where src.entry.exists().not() then  DiagnosticReportFunction(src, cda, dReport, bundle, enc, patient) "narrative";
    src.component as component then {
        component.section as sec -> tgt.section as tgtSection then ClinicalDocumentSection(cda, sec, patient, tgtSection, bundle, enc, dReport);
    }"component";
}

group DiagnosticReportFunction(source section: section, source src: entry, target dReport: DiagnosticReport, target bundle: Bundle, target encounter : Encounter, target patient : Patient){
    src.observation as observation then{
        section where code.code ='29299-5' -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "QuesitoDiagnostico";
        section where code.code = '11329-0' -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs2,  obs2.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs2.id) then {
            section -> obs2.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
            section -> obs2.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
            section -> obs2.status = 'final' "STatusobse";
            section.code -> obs2.code;
            observation.statusCode as s then {
                s.code as cos-> obs2.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
            section.component as component then{
                component.section as section then{
                    section.code where code = '10160-0' then{
                        section.entry as entry then{
                            entry.substanceAdministration as subAdmin -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('MedicationStatement') as medicationstatement,  medicationstatement.id = uuid() as uuid11,  e11.fullUrl = append('https://example/MedicationStatement/', uuid11), request.url = 'MedicationStatement', obs2.partOf = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %medicationstatement.id) then MedicationStatement(subAdmin, medicationstatement, patient, encounter, bundle) "creat";
                        }"entry";
                    }"sectionCode";
                    section.code where code = '48765-2' then{
                        section -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('List') as list1,  list1.id = uuid() as uuid4,  e4.fullUrl = append('https://example/List/', uuid4), request.url = 'List', obs2.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list1.id) then{
                            section -> list1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                            section -> list1.status = 'current' "listatus";
                            section -> list1.mode = 'working' "lstmod";
                            section -> list1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
                            section -> list1.entry as entryList1 then{
                                section.entry as entry then{
                                    entry.act as act1 -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', entryList1.item = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then allergyFunction(act1, allergy, patient,encounter) "allergy";
                                }"entryAll";
                            }"entryList";
                        }"section";
                    }"conditionAllergie";
                }"section";
            } "subSection";
            section.entry as entry then{
                entry.observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Condition') as condition,  condition.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Condition/', uuid3), request.url = 'Condition', obs2.focus = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then ConditionFunction(observation ,condition, patient, encounter, bundle) "condition";        
                entry.organizer as organizer then {
                    section -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('List') as list11,  list11.id = uuid() as uuid11,  e11.fullUrl = append('https://example/List/', uuid11), request.url = 'List', obs2.focus = create('Reference') as reference,  reference.reference = ('https://example/List/' + %list11.id) then{
                        section -> list11.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                        section -> list11.status = 'current' "liststat";
                        section -> list11.mode = 'working' "listmd";
                        section -> list11.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
                        organizer -> list11.entry as entryList2 then{
                            organizer ->bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('FamilyMemberHistory') as familyMember, familyMember.id = uuid() as uuid12,  e12.fullUrl = append('https://example/FamilyMemberHistory/', uuid12), request.url = 'FamilyMemberHistory', entryList2.item = create('Reference') as reference, reference.reference = ('https://example/FamilyMemberHistory/' + %familyMember.id) then FamilyMemberFunction(organizer, familyMember, patient) "family";
                        }"org";
                    }"List";
                }"organizer";
            }"entry";
        }"StoriaClinica1";
        section where code.code = '30954-2' -> bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('Observation') as obs4,  obs4.id = uuid() as uuid4,  e4.fullUrl = append('https://example/Observation/', uuid4), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs4.id) then Observation(observation, patient, encounter, obs4, bundle) "PrecedentiEsamiEseguiti";
        section where code.code = '29548-5' ->  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('Observation') as obs5,  obs5.id = uuid() as uuid5,  e5.fullUrl = append('https://example/Observation/', uuid5), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs5.id) then Observation(observation, patient, encounter, obs5, bundle) "Diagnosi";
    }"entryObs";

    src.act as act then{
        section where code.code ='62387-6' -> dReport.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
            act.code -> encounter.type "type";
            act.effectiveTime as effectiveTime -> encounter.period as period then{
                effectiveTime -> period.start  = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";
            }"period";
            act ->  bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('Procedure') as procedureRes,  procedureRes.id = uuid() as uuid10,  e10.fullUrl = append('https://example/Procedure/', uuid10), request.url = 'Procedure', encounter.reasonReference = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedureRes.id) then{
                act -> procedureRes.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                act -> procedureRes.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
                act.statusCode -> procedureRes.status "status1";
                act where statusCode.exists().not() ->procedureRes.status = 'unknown' "status2";
                act.entryRelationship as entryRel then{
                    entryRel.procedure as proc-> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST', e9.resource = create('Procedure') as procedure2,  procedure2.id = uuid() as uuid9,  e9.fullUrl = append('https://example/Procedure/', uuid9), request.url = 'Procedure', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure2.id) then Procedure(proc, patient, encounter, procedure2, bundle) "procedurePrestazioni";
                    entryRel.substanceAdministration as subAdmin -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('MedicationAdministration') as medAdmin,  medAdmin.id = uuid() as uuid8,  e8.fullUrl = append('https://example/MedicationAdministration/', uuid8), request.url = 'MedicationAdministration', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medAdmin.id) then MedicationAdministration(subAdmin, patient, encounter, medAdmin, bundle) "farmacPrestazioni";
                    entryRel.observation as entryRobs -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST', e7.resource = create('Observation') as obs7,  obs7.id = uuid() as uuid7,  e7.fullUrl = append('https://example/Observation/', uuid7), request.url = 'Observation', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs7.id) then ObservationPrest(entryRobs, patient, encounter, obs7, bundle) "osservazioniPrestazioni";
                    entryRel.act as act2 -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('Procedure') as procedure3,  procedure3.id = uuid() as uuid6,  e6.fullUrl = append('https://example/Procedure/', uuid6), request.url = 'Procedure', procedureRes.partOf = create('Reference') as reference,  reference.reference = ('https://example/Procedure/' + %procedure3.id) then Procedure(act2, patient, encounter, procedure3, bundle) "procedureGenerichePrestazioni";
                }"Relationship";
            } "proceduraMadre";
        }"Prestazioni";
        section where code.code ='80615-8' -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST', e12.resource = create('Observation') as obs12,  obs12.id = uuid() as uuid12,  e12.fullUrl = append('https://example/Observation/', uuid12), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs12.id) then Observation(act, patient, encounter, obs12, bundle) "Followup";
    
    }"entryAct";

    //src.substanceAdministration
    src.substanceAdministration as substanceadmin then{
        section where code.code ='93341-6' -> bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST', e6.resource = create('MedicationRequest') as medre1,  medre1.id = uuid() as uuid6,  e6.fullUrl = append('https://example/MedicationRequest/', uuid6), request.url = 'MedicationRequest', dReport.basedOn = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medre1.id) then MedicationRequest(substanceadmin, patient, encounter,medre1,bundle)"TerapiaFarmacologicaConsigliata";
    }"substanceadmin";

    section where section.entry.exists().not() then {


        section where (code.code = '48765-2') -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then{ 
            section-> obs1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
            section -> obs1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";  
            section -> obs1.status = 'final' "STatusobse";
            section.code -> obs1.code;
            section.statusCode as s then {
                s.code as cos-> obs1.status = translate(cos, '#OBSstatus', 'code') "codeS";
            }"status";
                section.text as text  -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST', e5.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid5,  e5.fullUrl = append('https://example/AllergyIntolerance/', uuid5), request.url = 'AllergyIntolerance', obs1.focus = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
                    section -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id)  "reference";    
                    section -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id)  "reference";                        
                    section -> allergy.clinicalStatus as clinicalStatus then{
                        section -> clinicalStatus.coding = create('Coding') as coding then{
                            section -> coding.code =  'active' "code";
                            section -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";                                
                        }"coding";
                    }"status";                        
                    text -> allergy.note as note then{
                        text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                    } "narrative"; 
                }"allergytext";
        }"allergyAct";



        section where (code.code = '93341-6') then{
            section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('MedicationRequest') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('https://example/MedicationRequest/', uuid13), request.url = 'MedicationRequest', dReport.basedOn = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %obs13.id) then {
                section -> obs13.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                section -> obs13.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
                section -> obs13.intent = 'order' "intent";
                section where statusCode.exists().not() -> obs13.status = 'unknown' "st";
                text -> obs13.note as note then{
                    text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                }"note";   
                
                section -> obs13.medication = create('CodeableConcept') as code then{
                    section -> code.text = 'string' "string";                     
                }"code";
                
            }"txtsec";
        }"MedicationRequest";

        section where (code.code = '55110-1').not() and (code.code = '93341-6').not() and (code.code = '48765-2').not() then{
                section.text as text -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'POST', e13.resource = create('Observation') as obs13,  obs13.id = uuid() as uuid13,  e13.fullUrl = append('https://example/Observation/', uuid13), request.url = 'Observation', dReport.result = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs13.id) then {
                    section -> obs13.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
                    section -> obs13.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
                    section -> obs13.status = 'preliminary' "obsst";
                    section.code -> obs13.code "obscde";
                    section -> obs13.status = 'final' "statusS";
                    text -> obs13.note as note then{
                        text as t-> note.text = create('string') as textNote then EDstring(t,textNote) "note";
                    } "narrative";    
                }"txtsec";
          } "NonConclusion";
        section where(code.code = '55110-1') then {
            section.text as t -> dReport.conclusion = create('string')  as textConclusion then EDstring(t,textConclusion) "conc";
        }"conclusion";
    }"whereCond";
}

group Observation(source cda : observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {  
    cda->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    cda->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    cda.code -> ob.code;
    cda -> ob.status = 'final' "Stats";
    //value datatype
    cda.value:INT as int->ob.value=(int.value) "value";
    cda.value:ST as st -> ob.value =create('string'),  ob.value= (st.dataString) "value";
    cda.value:BL as boolean ->ob.value=(boolean.value)"boolean";
    cda.value:CE as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
      cda.value:CD as val then{
        val->ob.value =create('CodeableConcept') as ce then {
        val.originalText as originalText then{
            originalText.reference as reference-> ce.text = (reference.value) "reference";
        }"originalText";
        val -> ce.coding as coding then {
        val.code as code -> coding.code = cast(code, 'string');
        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        val.displayName as display -> coding.display = cast(display, 'string');
        } "code";
        val.translation as translation -> ce.coding as coding then {
          translation.code as code -> coding.code = cast(code, 'string');
          translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          translation.displayName as display -> coding.display = cast(display, 'string');
          translation.qualifier as qualifier then{
            qualifier.value as value -> ce.coding as coding then {
              value.code as code -> coding.code = cast(code, 'string');
              value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
              value.displayName as display -> coding.display = cast(display, 'string');
              } "value";
            };
          } "translation";
        }"coding";
      }"val";
    cda.value:PQ as val then{
        val->ob.value = create('Quantity') as quantity then {
            val.value as value->quantity.value = value;
            val.unit as unit-> quantity.unit = unit "unit";
        }"quantity";
    }"valueQuantity";
    //
    cda.effectiveTime as effectiveTime where (value.exists()) -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    cda.effectiveTime as effectiveTime where (low.exists()) -> ob.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    cda.text as text -> ob.note as note then{
        text.reference as reference -> note.text = (reference.value) "text";
    } "note";
    cda.statusCode as s then {
        s.code as cos-> ob.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
}  


group ConditionFunction (source src: cdaElement, target tgt: Condition, target patient : patient, target encounter : encounter, target bundle : Bundle) {
    src.code -> tgt.category;
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    src.statusCode as stscode -> tgt.verificationStatus as verifstatus then { 
        stscode as codeS -> verifstatus.coding = create('Coding') as coding then {
            codeS.code -> coding.code = 'confirmed' "code";
            codeS -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-ver-status' "system";
            codeS -> coding.display= cast('Confirmed', 'string') "display";
    }"coding";    
    }"verifstatus";
    src.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    src.value -> tgt.code;
    src.entryRelationship as entryRelationship then{
        entryRelationship.observation as obsentry then{
            obsentry.code where code ='89261-2' then{
                obsentry -> tgt.evidence as evidence, bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as obsy,  obsy.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation', evidence.detail = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obsy.id) then Observation(obsentry, patient, encounter, obsy, bundle) "observation";
            }"observation";

            obsentry.code where code = '33999-4' then{
                obsentry.value as value -> tgt.clinicalStatus as clinicalstatus then {
                    value as val -> clinicalstatus.coding = create('Coding') as coding then {
                        val where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                        val where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                        val where(code = 'LA16666-2') -> coding.code =  'active' "code";
                        val -> coding.system = 'http://terminology.hl7.org/CodeSystem/condition-clinical' "system";
                        val.displayName as display-> coding.display= cast(display, 'string') "display";
                    }"coding";           
                    obsentry.text as text then{
                        text.reference as reference -> clinicalstatus.text = (reference.value) "text";
                    }"text";
                }"clinicalstatus";
            }"clinicalStatus2";
            
        }"EntryRelObsevation";
    } "entryR";
}

group Procedure(source src : procedure, target patient : Patient, target encounter: Encounter, target tgt: Procedure, target bundle: Bundle){
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src.statusCode -> tgt.status "status1";
    src where statusCode.exists().not() ->tgt.status = 'unknown' "status2";
    src.id -> tgt.identifier "id";
    src.code -> tgt.code;
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.performed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.performed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.methodCode as methodCode -> tgt.extension as ext1 then ITMethodExt(methodCode, ext1);
    
    src.participant as participant then{
        participant.participantRole as participantRole -> tgt.performer as performer then{
            participantRole.playingDevice as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Device/', uuid2), request.url = 'Device', performer.actor = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
                device.manufacturerModelName as manufacturerModelName then{
                    manufacturerModelName.displayName as displayName -> deviceRes.manufacturer =cast(displayName,'string') "manuf";
                }"manufacturer";
                device.code -> deviceRes.type "code";
            }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.partOf = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then{
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRelProcedure";
}

group ITMethodExt(source src, target ext) {
    src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/procedure-method' "url";
    src -> ext.value = create('CodeableConcept') as value then CECodeableConcept(src, value) "value";
}

group MedicationAdministration(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationAdministration, target bundle: Bundle){
    
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.context = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    
    src.statusCode -> tgt.status "status1";
    src where statusCode.exists().not() ->tgt.status = 'unknown' "status2";
    src.id -> tgt.identifier "id";
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.effective = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
    
    src -> tgt.dosage as dosage then{
        src.routeCode -> dosage.route "route";
        src.repeatNumber as repeatNumber -> dosage.rate = create('SimpleQuantity') as value then PQQuantity(repeatNumber,value) "repQ";
        src.approachSiteCode -> dosage.site "site";
        src.targetSiteCode -> dosage.site "site";
    }"dosage";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src,medication,patient,bundle) "medication";
    
    src.participant as participant then{
        participant.participantRole as participantRole -> tgt.performer as performer then{
            participantRole.device as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Device/', uuid2), request.url = 'Device', performer.actor = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
                device.ManufacturerModelName as ManufacturerModelName then{
                    ManufacturerModelName.code -> deviceRes.manufacturer "manuf";
                }"manufacturer";
        }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.partOf = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then {
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRelMedication";

    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medicationRq,  medicationRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest',tgt.request  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medicationRq.id) then MedicationRequest(src, patient, encounter,medicationRq,bundle) "medRequ";

    src.text as text -> tgt.note as note then{
        text -> note.text "text";
    }"note";
}

group ObservationPrest(source src : observation, target patient : Patient, target encounter : Encounter, target tgt : Observation, target bundle : Bundle) {  
    src -> tgt.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    
    src.statusCode as s then {
        s.code as cos-> tgt.status = translate(cos, '#OBSstatus', 'code') "codeS";
    }"status";
    
    src.id -> tgt.identifier "id";
    src.code -> tgt.code "code";
    src.effectiveTime as effectiveTime where (value.exists()) -> tgt.perfomed = create('dateTime') as value then TSDateTime(effectiveTime, value) "value1";
    src.effectiveTime as effectiveTime where (low.exists()) -> tgt.perfomed = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";

    src.methodCode -> tgt.method;

    src.participant as participant then{
        participant.participantRole as participantRole then{
            participantRole.device as device -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Device') as deviceRes,  deviceRes.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Device/', uuid2), request.url = 'Device', tgt.device = create('Reference') as reference,  reference.reference = ('https://example/Device/' + %deviceRes.id) then{
                device.ManufacturerModelName as ManufacturerModelName then{
                    ManufacturerModelName.code -> deviceRes.manufacturer "manuf";
                }"manufacturer";
            }"device";
        }"participantRole";
    }"participant";

    src.entryRelationship as entryR then{
        entryR.observation as observation -> bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST', e3.resource = create('Observation') as obs1,  obs1.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Observation/', uuid3), request.url = 'Observation', tgt.hasMember = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %obs1.id) then Observation(observation, patient, encounter, obs1, bundle) "Parametri";
        entryR.act as act then{
            act.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "text";
            }"note";
        }"act"; 
    }"entryRelOsservazioni";
}   

group MedicationRequest(source src : substanceAdministration, target patient : Patient, target encounter: Encounter, target tgt: MedicationRequest, target bundle: Bundle){
    //default  + mandatory
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    src -> tgt.intent = 'order' "intent";
    src where statusCode.exists().not() -> tgt.status = 'unknown' "st";
    src.statusCode as sc then {
        sc.code as cos-> tgt.status = translate(cos, '#MedicationStatusMap', 'code') "codeS";
    }"status";
    //
    src.text as txt -> tgt.note as note then{
        txt.reference as reference -> note.text = (reference.value) "text";
    }"note";

    src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then {
          eff -> timing.repeat as rep then {
            eff as eff where (value.exists()) -> rep.bounds = create('dateTime') as value then TSDateTime(eff, value) "value1";
            eff as eff where (low.exists()) -> rep.bounds = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: EIVL_TS as effe -> tgt.dosageInstruction = create('Dosage') as dosage then{
        effe -> dosage.timing = create('Timing') as timing then {
          effe -> timing.repeat as rep then {
            effe.eventCode as ev -> rep.when = (ev.code);
          }"rep";
        }"timing";
      }"period";

      src.effectiveTime: IVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage, dosage.timing = create('Timing') as timing, timing.event = (eff.value) "tim";

      src.effectiveTime: PIVL_TS as eff -> tgt.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
      }"eff";
    
    src where (src.doseQuantity.exists() or src.rateQuantity.exists()) then{
        src ->  tgt.dosageInstruction = create('Dosage') as dosageInstruction then{
            src.doseQuantity as doseQuant then{
                doseQuant.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";  
                doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
                doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                    doseQuant.low as lo -> l.value = (lo.value); 
                    doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                    doseQuant.high as hi -> h.value = (hi.value);
                    doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
                }"d";
            }"dosageRate";
        } "doseQuantity";
            src.rateQuantity as rateQuantity then{
                rateQuantity.originalText as ot then{
                    ot.reference -> dosageInstruction.text;
                }"ot";
                rateQuantity -> dosageInstruction.doseAndRate as dosageRate then{
                    rateQuantity -> dosageRate.rate = create('Range') as d then{
                        rateQuantity -> d.low = create('SimpleQuantity') as l then{
                            rateQuantity.low as lo -> l.value = (lo.value); 
                            rateQuantity.low as lo -> l.unit = (lo.unit); 
                        }"low";
                        rateQuantity -> d.high = create('SimpleQuantity') as h then{
                            rateQuantity.high as hi -> h.value = (hi.value);
                            rateQuantity.high as hi -> h.unit = (hi.unit); 
                        }"high";
                    }"r";
                }"dosageRate";

            }"rate";
        
        src.routeCode -> dosageInstruction.route "route";
        src.approachSiteCode -> dosageInstruction.site "site";
        src.targetSiteCode -> dosageInstruction.site "site";

        }"dosageIn";
    }"condition";

    src.consumable as consumable -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication', tgt.medication = create('Reference') as medref,  medref.reference = ('https://example/Medication/' + %medication.id) then Medication(src,medication,patient,bundle) "medication";       
    src.entryRelationship as entryRelationship then{
        entryRelationship.supply as supply -> tgt.dispenseRequest as dispenseRequest then{
            supply.quantity as quantityCDA -> dispenseRequest.quantity as quantityFHIR then{
                quantityCDA -> quantityFHIR.value = (quantityCDA.value) "value";
            }"quantity";
        }"supply";
    }"entryR";

    src.participant as participant then{
        participant then Practitioner(participant, tgt, bundle) "function"; 
        participant.effectiveTime -> tgt.authoredOn "autor"; 
    }"Partecipant";
}
    
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
    effectiveTime -> timing.repeat as r then{
      effectiveTime.period as p -> r.period = (p.value); 
      effectiveTime.period as p -> r.periodUnit = (p.unit);   
    }"repeat";
  }

group Medication(source src:cda , target tgt: Medication, target patient: Patient, target bundle : Bundle){

    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code -> tgt.code "CE";
                src.administrationUnitCode -> tgt.form "form";
            }"material";
        }"product";
    }"consumable";

    src.entryRelationship as entryR then{
        entryR.observation as observation then{
            observation.code where displayName='Grammatura' -> tgt.ingredient as ingredient then{
                src.consumable as consumable then{
                    consumable.manufacturedProduct as manufacturedProduct then{
                        manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                            manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                        }"material";
                    }"product";
                }"consumable";
                observation.value as value -> ingredient.strength as strength then{
                    value -> strength.numerator as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> strength.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"strenght";
            }"ingredient";
            observation.code where displayName='Quantità nella Confezione' then{
                observation.value as value -> tgt.amount as amount then{
                    value -> amount.numerator  as numerator then{
                        value -> numerator.value = (value.value) "valueN";
                    } "numerator";
                    value -> amount.denominator as denominator then{
                        value -> denominator.value = 1 "valueD";
                    } "denominator";
                }"amount";
            }"quantita";
        }"obs";
    }"entryR";
}

group MedicationStatement(source src: subAdmin, target tgt: MedicationStatement, target patient: Patient, target encounter : Encounter, target bundle: Bundle){
    src -> tgt.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src.statusCode -> tgt.status;
    src where statusCode.exists().not() -> tgt.status = 'unknown' "notpresent"; 
    src.consumable as consumable then{
        consumable.manufacturedProduct as manufacturedProduct then{
            manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                manufacturedMaterial.code as code -> tgt.medication  =create('CodeableConcept') as ce then CECodeableConcept(code,ce) "CE";
            }"material";
        }"product";
    }"consumable";
}

group FamilyMemberFunction(source src : organizer, target tgt : familyMember, target patient : patient){
    src -> tgt.patient = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patReference";    
    src.statusCode -> tgt.status;
    src.effectiveTime as effectiveTime -> tgt.date = create('date') as value then TSDateTime(effectiveTime,value) "date";
    src.subject as subject then{
        subject.relatedSubject as relatedSubject then{
            relatedSubject.code -> tgt.relationship "relationshipCode";
            relatedSubject.subject as subject -> tgt.sex as sex then {
                subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                    administrativeGenderCode.code as sexCode-> coding.code = translate(sexCode, '#cm-v3-administrative-gender', 'code') "gender";
                    administrativeGenderCode -> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                }"coding";
            }"subject";
        }"relatedSub";
    }"relationship";
    src.component as component -> tgt.condition as condition then{
        component.observation as observation then{
            observation.code -> condition.code "code";
            observation.text as text -> tgt.note as note then{
                text.reference as reference -> note.text = (reference.value) "value";
            }"reference";
            observation.statusCode -> tgt.status;
            // observation.effectiveTime as effectiveTime -> condition.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation where observation.effectiveTime.exists() then {
                observation.effectiveTime as effectiveTime -> tgt.condition = create('BackboneElement') as condition then {
                    observation.code -> condition.code "code";
                    observation.value -> condition.outcome "codeable"; 
                    effectiveTime -> condition.onset = create('Period') as period then{
                        effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start)
                        "val";
                    }"efft";
                }"effttemp";
            }"cont";
            observation.value -> condition.outcome "codeable";
            observation.entryRelationship as entryR then{
                entryR.observation as obs then{
                    obs where (code.code ='35267-4') then{
                        obs.value as value -> condition.onset = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"insorgenza";
                    obs where (code.code ='39016-1') then{
                        obs.value as value -> tgt.deceased = create('Age') as Age then {
                            value.value as valueAge -> Age.value = valueAge "age";
                            value.unit as unit -> Age.code = unit "unit";
                            value.unit as unit -> Age.unit = unit "unit";
                            value -> Age.system = 'http://unitsofmeasure.org' "system";
                    } "value";
                }"death";
            }"obser";
            }"EntryRel";
        }"observation";
    }"component";
}

group allergyFunction(source src: cdaElement, target tgt: AllergyIntolerance, target patient : patient, target encounter : encounter) {
    src -> tgt.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";    
    src -> tgt.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference"; 
    src.entryRelationship as entryRelationship1 then{
        entryRelationship1.observation as observation1 then{
            observation1.effectiveTime as effectiveTime -> tgt.onset = create('Period') as value then IVLTSPeriod(effectiveTime, value) "valuePeriod";
            observation1.value as code then{
                code.code as code1-> tgt.type = translate(code1,'#AllergyTypeMap','code') "type"; 
                code.code as code1 -> tgt.category = translate(code1,'#AllergyCategoryMap','code') "category";   
            }"code";
            observation1.participant as participant-> tgt.reaction as reaction then{
                observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                    entryRelationship2.observation as observation2 then{
                        observation2.value -> reaction.manifestation "manifestation";
                        observation2.effectiveTime as effectiveTime then{
                            effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                        }"low";
                    }"observ2";
                }"entryR2";
                participant.participantRole as participantRole then{
                    participantRole.playingEntity as playingEntity then{
                        playingEntity.code -> reaction.substance "reaction";
                    }"playingEntity";
                }"participantRole";
            }"participant";
            observation1.entryRelationship as entryRelationship2 where (typeCode = 'MFST') then{
                entryRelationship2.observation as observation2 where observation1.participant.exists().not() -> tgt.reaction as reaction then{
                    observation2.value -> reaction.manifestation "manifestation";
                    observation2.effectiveTime as effectiveTime then{
                        effectiveTime.low as low -> reaction.onset = create('dateTime') as value then TSDateTime(low, value) "valuePeriodLow";
                    }"low";
                }"observ2";
            }"entryR2";
            observation1.entryRelationship as entryRelationship3 where (typeCode = 'SUBJ') then{
                entryRelationship3.observation as observation3 then{
        
                    observation3.value as value then{
                        value.code as c-> tgt.criticality = translate(c,'#CricalityMap','code') "value";
                    }"criticality"; 
                }"observ3";
                entryRelationship3.act as act -> tgt.note as note then{
                    act.text as text then{
                        text.reference as reference -> note.text = (reference.value);
                    }"note";
                }"act";
            }"entryR3";
            observation1.entryRelationship as entryRelationship4 where (typeCode = 'REFR') then{
                entryRelationship4.observation as observation4  then{

                    observation4.value as value -> tgt.clinicalStatus as clinicalStatus then{
                        value as valu -> clinicalStatus.coding = create('Coding') as coding then{
                            valu where(code = 'LA9041-0') -> coding.code =  'resolved' "code";
                            valu where(code = 'LA18632-2') -> coding.code =  'inactive' "code";
                            valu where(code = 'LA16666-2') -> coding.code =  'active' "code";
                            valu -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical' "system";
                            valu.displayName as display-> coding.display= cast(display, 'string') "display";
                        }"coding";
                    }"clinicalStatus";
                }"observ4";
            }"entryR4";
        }"observation";
    }"entryrelationship";
}

group Practitioner(source src : participant, target tgt: MedicationRequest, target bundle: Bundle){
    src -> bundle.entry as e22, e22.request = create('BackboneElement') as request, request.method = 'PUT', e22.resource = create('Practitioner') as practitioner1 then{       
        src.participantRole as practr then{
            practr.id as id ->practitioner1.identifier as identifier then{
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext "ext";
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                    id.extension as ext -> practitioner1.id = (r + '-' + ext) as uuid22,  e22.fullUrl = append('https://example/Practitioner/', uuid22), tgt.requester = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner1.id) "id";
                }"r";
            }"identifier";
            practr.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              practr.id as id where (root!='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"diverso";
            practr -> practitioner1.meta as meta then {
                practr-> meta.tag = create('Coding') as coding then {
                    practr -> coding.system ='http://algoritmodiscoring'"system";
                    practr -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaConsigliata/participant' "code";
                }"coding";
            }"meta";
            practr.addr -> practitioner1.address;      
            practr.telecom -> practitioner1.telecom;
            practr.playingEntity as plentity then{
                plentity.name ->  practitioner1.name "name"; 
                plentity.birthTime as birthTime then{
                    birthTime.value as date -> practitioner1.birthDate= truncate(date, 10);
                  }"birth";
            }"partname";
        }"resurceCreation";
    }"practitionerCreate";

}


", "subType": "00"}}, "filename": "RefertodiSpecialisticaAmbulatorialeBody_v2.7.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:12.624Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d16091c057abd6ef9ce"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/Vaccinazioni", "version": "2.0", "template_id_root": ["2.16.840.1.113883.2.9.10.1.11.1.1", "2.16.840.1.113883.2.9.10.1.11.1.2"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/Vaccinazioni" = "Vaccinazioni"


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target
uses "http://hl7.org/fhir/StructureDefinition/Immunization" alias Immunization as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('https://example/DocumentReference/', uuid5),request.url = 'DocumentReference' then {
  cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
  cda.recordTarget as recordTarget then{
    recordTarget.patientRole as patient then{
       patient.id as id-> patient.identifier as identifier then {
         id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext1 -> identifier.value = ext1 "value";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"record";
      }"recPat";
 } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
  cda -> encounter.status = 'finished' "finished";
  cda -> encounter.class = create("Coding") as coding then{
    cda -> coding.code = 'AMB' "amb";
  }"coding";
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {       
	     component.section as srcSection then {
        srcSection -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter) "TerapiaFarmacologicaAllaDimissione";
       };
      };
    } "body";
  };
}

//--------------------------------

group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";    
  } "cdaText";
  src.entry as entry1 then {
    
    entry1.substanceAdministration as substance  then {
      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Immunization/', uuid1), request.url = 'Immunization',tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        // substance.templateId as tid -> immunization.identifier as idf then{
        //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        // }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        substance.effectiveTime as eff where (value.exists()) -> immunization.occurrence = create('dateTime') as value then TSDateTime(eff, value) "value1";
        substance.effectiveTime as eff where (low.exists()) -> immunization.occurrence = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";

        substance.routeCode -> immunization.route "route";

        substance.approachSiteCode -> immunization.site "site";

        substance -> immunization.doseQuantity = create('SimpleQuantity') as quantity then{
          substance.doseQuantity as q then{
            q -> quantity.value = (q.value) "val";
            q -> quantity.unit = (q.unit) "uni"; 
          }"qua"; 
        }"q";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{
             
              manufactOrg->organization.meta as meta then {
                manufactOrg->meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/manufacturerOrganization'"code";
                      }"coding";
                }"meta";
              manufactOrg.id as id -> organization.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                  ext-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization.id =(r +'-'+ ext) as uuid5,  e1.fullUrl = append('https://example/Organization/', uuid5) ,immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %uuid5) ;
                }"r" ; 
              }"identifier";
              // manufactOrg.id as id then{
              //   id -> organization.id = (id.root+'-'+id.extension) as idtar then{
              //     id ->  e1.fullUrl = append('https://example/Organization/', idtar),  "idassi";
              //   }"idt";
              // }"id";                                          
              manufactOrg.name as n -> organization.name = (n.other);
            }"manufactOrg";          
          }"manufact";
        }"cons";
       
        substance.participant as part ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location then{       
          part->location.meta as meta then {
            part->meta.tag = create('Coding') as coding then {
              part -> coding.system ='http://algoritmodiscoring'"system";
              part -> coding.code ='ClinicalDocument/body/participant'"code";
                  }"coding";
            }"meta";
          part.participantRole as partRole then{
            partRole.id as id  -> location.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext-> identifier.value = ext then {
                ext-> request.url = append('Location?identifier=',ext)"UUID";
              }"ext";
              id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
              id.root as r then {
                id.extension as ext ->location.id =(r +'-'+ ext) as uuid6,  e1.fullUrl = append('https://example/Location/', uuid6),  immunization.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %uuid6) "ref";
                }"r" ; 
              }"identifier";
           }"role";
        }"part";
        cda-> immunization.protocolApplied  as prot then {  
        substance.entryRelationship as entrirel4 then{
              entrirel4.observation as obs  then {          
                obs.code where( code = '75323-6') then {
                obs.value -> prot.targetDisease;
                }"codeControl";
              }"entrirel2";
          entrirel4.observation as obsdosenumber  then {          
             obsdosenumber.code where( code = '30973-2') then {
                obsdosenumber.value as v then {
                  v.value as int ->prot.doseNumber=(int.toString());
                 }"v";
                //  obsdosenumber.value as v then {
                //    v.value as int -> prot.doseNumber  = cast(int,'positiveInt') "val"; 
                //  }"value"; 
            }"codeControl";
          }"entrirel2";
        }"entrirel4";
      }"protocolAp";
       
        substance.entryRelationship as entrirel2 then{
          entrirel2.observation as obs then{          
            obs.code where( code = '59778-1' or code = '30981-5' or code = '30980-7' or code = '59777-3')then{
              obs.value as value then{
                value.high as h  then {
                  h.value as date-> immunization.expirationDate= truncate(date, 10);
             }"da";
              }"value";
            }"codeControl";
          }"obs";
        }"entrirel2";


        substance.entryRelationship as entrirel3 then{
          entrirel3.observation as obs then{          
            obs.code where( code = '95715-9') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation(entrirel3,patient,tgt,bundle,enc,observation) "observation";
            }"codeControl";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '59785-6') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"codeControl";
          }"obs";
        }"entrirel2";

        substance.entryRelationship as entrirel4 then{
          entrirel4.observation as obs then{          
            obs.code where( code = '31044-1') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , immunization.reasonReference  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              obs then Observation1(entrirel4,patient,tgt,bundle,enc,observation) "observation";
            }"codeControl";
          }"obs";
        }"entrirel2";


      }"ControlloImmunization";

      substance.templateId where(root = '2.16.840.1.113883.2.9.10.1.11.4.2') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Immunization') as immunization,  immunization.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Immunization/', uuid1), request.url = 'Immunization' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Immunization/' + %immunization.id) then{
        substance -> immunization.patient  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "patientRef"; 
        // substance.templateId as tid -> immunization.identifier as idf then{
        //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        // }"id";
        substance.statusCode  as statusc where (code='completed') -> immunization.status ='completed';  
        substance.statusCode  as statusc where (code='aborted') -> immunization.status ='final';  
        substance.statusCode  as statusc where (code='suspended') -> immunization.status ='enterer-in-error';  
        substance.statusCode  as statusc where (code='cancelled') -> immunization.status ='not-done';          
        
        substance.effectiveTime as eff where (value.exists()) -> immunization.occurrence = create('dateTime') as value then TSDateTime(eff, value) "value1";
        substance.effectiveTime as eff where (low.exists()) -> immunization.occurrence = create('Period') as value then IVLTSPeriod(eff, value) "valuePeriod";

        substance.consumable as cons then{
          cons.manufacturedProduct as manufact then{
            manufact.manufacturedMaterial as manufactmat then{
              manufactmat.code -> immunization.vaccineCode;
              manufactmat.lotNumberText as t -> immunization.lotNumber = (t.dataString);
            }"manufactmat";

            manufact.manufacturerOrganization as manufactOrg -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Organization') as organization  then{

              manufactOrg->organization.meta as meta then {
                manufactOrg->meta.tag = create('Coding') as coding then {
                  manufactOrg -> coding.system ='http://algoritmodiscoring'"system";
                  manufactOrg -> coding.code ='ClinicalDocument/body/manufacturerOrganization'"code";
                      }"coding";
                }"meta";

                manufactOrg.id as id -> organization2.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext then {
                    manufactOrg-> request.url = append('Organization?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext  -> organization1.id= (r +'-'+ ext) as uuid23,  e1.fullUrl = append('https://example/Organization/', uuid23) ,immunization.manufacturer  = create('Reference') as reference,  reference.reference = ('https://example/Organization/' + %uuid23)"org";
                }"r" ;   
              }"identifier";
              manufactOrg.name as n -> organization.name = (n.other);
            }"manufactOrg";          
          }"manufact";
        }"cons";

        cda-> immunization.protocolApplied  as prot then {  
          substance.entryRelationship as entrirel4 then{
                entrirel4.observation as obs  then {          
                  obs.code where( code = '75323-6') then {
                        
                    obs.value -> prot.targetDisease;
                    
                  }"codeControl";
                }"entrirel2";
            entrirel4.observation as obsdosenumber  then {          
               obsdosenumber.code where( code = '30973-2') then {
                  obsdosenumber.value as v then {
                    v.value as int ->prot.doseNumber=(int.toString());
                   }"v";
                //   obsdosenumber.value as v then {
                //   v.value as int -> prot.doseNumber  = cast(int,'positiveInt') "val"; 
                // }"value"; 
              }"codeControl";
            }"entrirel2";
          }"entrirel4";
        }"protocolAp";

        substance.entryRelationship as entrirel1 then{
          entrirel1.observation as obs then{          
            obs.code where( code = '85714-4') then {
              obs.code -> immunization.statusReason;
            }"codeControl";
            obs.code where( code = '59784-9') then {
              obs.value as val then{
                val.originalText as original -> immunization.statusReason = create('CodeableConcept') as cod then{
                  original.reference as reff -> cod.text = (reff.value);
                }"cod";
              }"val";
            }"codeControl";
          }"obs";
        }"entrirel1";

        substance.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location then{          
          
            part->location.meta as meta then {
              part->meta.tag = create('Coding') as coding then {
                part -> coding.system ='http://algoritmodiscoring'"system";
                part -> coding.code ='ClinicalDocument/body/participant'"code";
                    }"coding";
              }"meta";
            part.participantRole as partRole then{
              partRole.id as id  -> location.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext-> identifier.value = ext then {
                ext-> request.url = append('Location?identifier=',ext)"UUID";
                }"ext";
                id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                id.root as r then {
                  id.extension as ext ->location.id =(r +'-'+ ext) as uuid7,  e1.fullUrl = append('https://example/Location/', uuid7), immunization.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %uuid7) "ref";
                  }"r" ; 
                }"identifier";
             }"role";
        }"location";
      }"sub2";
    }"substance";
  }"entry";
}

group Observation(source entrirel2: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel2.observation as observation then{
    // observation.templateId as tid -> obs.identifier as idf then{
    //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    // }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation-> obs.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    observation-> obs.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";   
    observation -> obs.referenceRange as refRange then{
      observation.value -> refRange.appliesTo;
      observation -> refRange.text = 'string' "text";
    }"refRange";
  }"obs";
}

group Observation1(source entrirel4: entryRelationship, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target obs: Observation){  
  entrirel4.observation as observation then{
    // observation.templateId as tid -> obs.identifier as idf then{
    //   tid.root as r -> idf.system = translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
    // }"idf";
    observation.code -> obs.code;
    observation.statusCode as statusc where (code='completed') -> obs.status ='final';
    observation.statusCode as statusc where (code='active') -> obs.status ='registered';
    observation.statusCode as statusc where (code='aborted') -> obs.status ='cancelled';
    observation.statusCode as statusc where (code='suspended') -> obs.status ='partial';
    observation-> obs.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    observation-> obs.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";  

    observation.effectiveTime as eff where (value.exists()) -> obs.effective = create('dateTime') as value then TSDateTime(eff, value) "value1";
    observation.effectiveTime as eff -> obs.effective = create('Period') as period then IVLTSPeriod(eff,period) "period";
    
    observation -> obs.value = create('CodeableConcept') as concept then{      
      observation.value -> concept.coding = create('Coding') as coding then{
        observation.value as v -> coding.code = (v.code);
        observation.value as v then{
          v.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
        }"vv";
        observation.value as v -> coding.display = (v.displayName);
      }"coding";
      observation.value as valu then {
        valu.originalText as txt then{
          txt.reference as ref ->  concept.text = (ref.value);
        }"txt";  
      }"value";
    }"refRange";
  }"obs";
}", "subType": "00"}}, "filename": "Vaccinazioni_v2.0.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:14.815Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d18091c057abd6ef9cf"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/verbalePS", "version": "2.4", "template_id_root": ["2.16.840.1.113883.2.9.10.1.6.1"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/verbalePS" = "verbalePS"

conceptmap "AdministrativeGender" {
  prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
  prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"

  s:M == t:male
  s:F == t:female
}

conceptmap "AllergyTypeMap" {

    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"
  
    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {

    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"
  
    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:food
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-TS" as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

//--------------------------------------------------------------------------------------------


group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
  cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
  bundle.entry as e6, e6.request = create('BackboneElement') as request, request.method = 'POST',  e6.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid6,  e6.fullUrl = append('https://example/DocumentReference/', uuid6),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle,DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
      recordTarget.patientRole as patient then{
         patient.id as id-> patient.identifier as identifier then {
           id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext1 -> identifier.value = ext1 "value";
            id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          }"idfr";
          patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
          or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
          or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
          or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
          or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
          or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
          or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
          or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
          or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
          or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
          or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
          or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
          or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
            id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
            }"ext";
          }"record";
        }"recPat";
  } "ClinicalDocumentToBody";
}

group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle , target documentreference : DocumentReference) {
  cda -> bundle.id = uuid() "id";
  cda.id -> bundle.identifier "identifier";
  cda -> bundle.type = 'transaction' "type";
  cda -> bundle.timestamp=(timestamp.now()) "date";
  cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle,documentreference) "composition";
  cda.component as component then {
    component.structuredBody as body then {
      body.component as component  then {
	     component.section as srcSection then {
        srcSection.code where (code='11459-5' )-> composition.section as tgtSection  then ModalitadiTrasposto(cda, srcSection, patient, tgtSection, bundle,encounter)"Modalitaditrasporto";
        srcSection.code where(code = '78337-3') -> composition.section as tgtSection  then InquadramentoClinicoIniziale(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramentoclinico";
        srcSection.code where(code = '46239-0') -> composition.section as tgtSection  then MotivoDellaVisita(cda, srcSection, patient, tgtSection, bundle,encounter) "Inquadramentoclinico";
        srcSection.code where(code = '54094-8') -> composition.section as tgtSection  then Triage(cda, srcSection, patient, tgtSection, bundle,encounter) "Triage";
        srcSection.code where(code = '46240-8') -> composition.section as tgtSection  then ClinicalDocumentSectionEncounter(cda, srcSection, patient, tgtSection, bundle,encounter) "motivoricovero";
        srcSection.code where(code = '8648-8') -> composition.section as tgtSection  then ClinicalDocumentSectionDecorsoOspedaliero(cda, srcSection, patient, tgtSection, bundle,encounter) "DecorsoOspedaliero";
        srcSection.code where(code = '55109-3') -> composition.section as tgtSection  then ClinicalDocumentSectionComplicanze(cda, srcSection, patient, tgtSection, bundle,encounter) "Complicazioni";
        srcSection.code where(code = '62387-6') -> composition.section as tgtSection  then ClinicalDocumentSectionConsulenza(cda, srcSection, patient, tgtSection, bundle,encounter) "Hospitaldischargestudiessummary";
        srcSection.code where(code = '30954-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAccertamenti(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '8716-3') -> composition.section as tgtSection  then ClinicalDocumentSectionParametriVitali(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '29549-3') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacoInPronto(cda, srcSection, patient, tgtSection, bundle,encounter) "Accertamenti";
        srcSection.code where(code = '18776-5') -> composition.section as tgtSection  then ClinicalDocumentSectionPianoCuraDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Pianodicuraalladimissione";
        srcSection.code where(code = '28574-2') -> composition.section as tgtSection  then ClinicalDocumentSectionDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "Dimissione";
        srcSection.code where(code = '75311-1') -> composition.section as tgtSection  then ClinicalDocumentSectionTerapiaFarmacologicaDimissione(cda, srcSection, patient, tgtSection, bundle,encounter) "TerapiaFarmacologicaDimissione";
      };
      };
    }"body";
  };
}

//Sezione complicanze--------------------------------------------------------------------------
group ClinicalDocumentSectionComplicanze(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src where src.entry.exists() then {
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
  }"entryexists";
  // Sezione Strutturata-----------------------------------------------------------------------------------------------------------------------------------------------
    src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
      entry1.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "act";
    }"entry";
    // Sezione Narrativa---------------------------------------------------------------------------------------------------------------------------------------------
    src where src.entry.exists().not() then {
      src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
        src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            src.code -> Observation.code;
            src where observation.statusCode.exists().not() then {
                src->Observation.status ='final'"status";
                }"statuscode";
              cdaText -> Observation.note as note then{
              cdaText as t ->note.text =t "reference";
            }"reference";
          }"cdaText";
        }"where";
  
}

group Observation (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
  
  obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
  obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";  
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
  obs->ob.status ='final'"status";
  }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
    obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
    }"where";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"translation1";
      } "translation";
    }"coding";
  }"val";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"translation1";
      } "translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:BL as value->ob.value =create('boolean'),ob.value= (value.value) "value";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
  obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner then {
      performer.assignedEntity as entity then {
        entity->practitioner.meta as meta then {
          entity->meta.tag = create('Coding') as coding then {
            entity -> coding.system ='http://algoritmodiscoring'"system";
            entity -> coding.code ='ClinicalDocument/body/observation/performer'"code";
          }"coding";
        }"meta";
        entity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext then {
            entity-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"ext";
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid1, e1.fullUrl  = append('https://example/Practitioner/', uuid1), ob.performer = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "performer";
          }"r";
        }"identifier";
        entity.assignedPerson as person then {
          person.name -> practitioner.name;
          person.birthTime as birthTime then{
            birthTime.value as date -> practitioner.birthDate= truncate(date, 10);
          }"birth";
        }"name";
      }"assignedEntity";
    }"performer";
  obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL-PQ";                      
      }"obsRange";              
    }"refRange";  
}
//------------------------------------------------------------------------------------------------------

//Sezione Decorso Ospedaliero----------------------------------------------------------------------------
group ClinicalDocumentSectionDecorsoOspedaliero(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id),  observation.note as note then {
        src.code -> observation.code;
        src where observation.statusCode.exists().not() then {
            src->observation.status ='final'"status";
            }"statuscode";
            src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
            src.text as t ->note.text =t "reference";                  
      src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then {
              auth.time as ti ->note.time= create('dateTime') as value then TSDateTime(ti, value) "time";
              auth.assignedAuthor as assAuth then{
              //meta+identifier
              assAuth->practitioner.meta as meta then {
                assAuth->meta.tag = create('Coding') as coding then {
                  assAuth -> coding.system ='http://algoritmodiscoring'"system";
                  assAuth -> coding.code ='ClinicalDocument/body/DecorsoOspedaliero/author'"code";
                }"coding";
              }"meta";
              assAuth.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
             assAuth.assignedPerson as assPers then{
                  assPers.name -> practitioner.name;
              }"assPers";
            }"assAuth";
        }"Auth";
    }"OB-note";
}
//--------------------------------------------------------------------------------------------------------

//Sezione Encounter---------------------------------------------------------------------------------------
group ClinicalDocumentSectionEncounter(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc1 : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
    src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) then {
        entry1 -> encounter.partOf = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc1.id) "refer";
        entry1 -> encounter.subject = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "refer";
        entry1 -> encounter.status = 'finished' "status";
        entry1 -> encounter.class = create('Coding') as cl then{
          entry1 -> cl.code = 'AMB' "code";
          entry1 -> cl.display = 'ambulatory' "code";
        }"class";
        entry1.encounter as enc then{
            enc.code -> encounter.type;  
             // effectiveTime=period
             enc where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              enc.effectiveTime as eff  -> encounter.period=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              // effectiveTime = time-stamp
              enc where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
                enc.effectiveTime as effectivetime1 -> encounter.period = create('Period') as period then{
                effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
              }"efft";
              }"where";             
            // enc.effectiveTime as eff -> encounter.period = create('Period') as period then{
            //     eff.low as l -> period.start = (l.value);
            //     eff.high as h -> period.end = (h.value);
            // }"period";
            enc.participant as part where(typeCode != 'LOC') -> encounter.participant = create('BackboneElement') as patarg then {
                  part -> patarg.type as type then { 
                  part -> type.coding as coding then{
                  part-> coding.code = (part.typeCode) "codice";
                  part-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
                } "codeType"; 
              }"type";
              part.time as time1 -> patarg.period = create('Period') as period then {
                time1 -> period.start = create('dateTime') as start then TSDateTime(time1,start) "val";
               }"time";
                part.time as ti -> patarg.period =create('Period') as period then IVLTSPeriod(ti,period);                
                   
                part.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then {                    
                    //modifica meta+identifier
                    partRole->practitioner.meta as meta then {
                      partRole->meta.tag = create('Coding') as coding then {
                        partRole -> coding.system ='http://algoritmodiscoring'"system";
                        partRole -> coding.code ='ClinicalDocument/body/Encounter/participant'"code";
                      }"coding";
                    }"meta";
                    partRole.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), patarg.individual = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                      }"r";
                    }"identifier";
                    partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                   
                    partRole.playingEntity as playEnt then{
                      playEnt.name -> practitioner.name;
                    }"playEnt";                    
                }"partRole";
            }"participant-ADM";
            enc.participant as part where(typeCode = 'LOC') then{
                part.time as tim -> encounter.location as locat then{
                    tim -> locat.period =create('Period') as period then IVLTSPeriod(tim,period)"time"; 
                    part.time as tim  -> locat.period = create('Period') as period then{
                      tim -> period.start = create('dateTime') as start then TSDateTime(tim,start) "val";
                     }"time";
                part.participantRole as partRole ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1) then{                  
                    
                   
                    part-> location.meta as meta then {
                      part-> meta.tag = create('Coding') as coding then {
                      part -> coding.system ='http://algoritmodiscoring'"system";
                      part -> coding.code ='ClinicalDocument/body/Encounter/participant'"code";
                      }"coding";
                    }"meta";       
                    
                    partRole.id as id -> location.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext then {
                        partRole -> request.url = append('Location?identifier=',ext)"UUID";
                      }"ext";
                      id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                      id.root as r then {
                        id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid),  locat.location = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                      }"r" ;
                    }"identifier";                                                      
                    partRole.code -> location.type;
                }"partRole";
              }"location";
            }"participant2";
            
            enc.entryRelationship as entr -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1, e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encounter.reasonReference = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
              entr.act as act then{                    

                act.code -> observation.code;
                act -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                act -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc1.id) "reference";
                act where act.statusCode.exists().not() then {
                  act->observation.status ='final'"status";
                }"statuscode";
                    act -> observation.note = create('Annotation') as note then{
                        act.text as text then{
                            text.reference as reff -> note.text = (reff.value);
                        }"text";
                        act.text as tx then {
                          tx.reference as ref -> note.text = (ref.value) "val"; 
                        }"String";
                        act.author as auth ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT', e1.resource = create('Practitioner') as practitioner, practitioner.id = uuid() as uuid1, e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                        auth.time as ti -> note.time= create('dateTime') as value then TSDateTime(ti, value) "notetime";
                        auth.assignedAuthor as assAuth then{
                              
                                assAuth->practitioner.meta as meta then {
                                  assAuth->meta.tag = create('Coding') as coding then {
                                    assAuth -> coding.system ='http://algoritmodiscoring'"system";
                                    assAuth -> coding.code ='ClinicalDocument/body/Encounter/author'"code";
                                  }"coding";
                                }"meta";
                                assAuth.id as id -> practitioner.identifier as identifier then {
                                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                                  id.extension as ext->identifier.value = ext;
                                  id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                                  id.root as r then {
                                    id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                                  }"r";
                                }"identifier";
                                assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                                  id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                                }"2.16.840.1.113883.2.9.4.3.2";                  
                                // fine modifica
                                //assAuth.id -> practitioner.identifier;
                                assAuth.time as t -> note.text = create('dateTime') as value then TSDateTime(t, value);
                                assAuth.assignedPerson as assPers then{
                                    assPers.name -> practitioner.name;
                                }"name";    
                            }"assAush";
                        }"practitioner";    
                    }"note";
                }"act";
            }"entryRel-SUBJ";
        }"encounter";
    }"entry";
}
//--------------------------------------------------------------------------------------------------------

//Sezione Consulenza--------------------------------------------------------------------------------------

group ClinicalDocumentSectionConsulenza(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
      src.title as t -> tgt.title = (t.dataString);
      src.code -> tgt.code;
      src where src.entry.exists() then {
        src.text as cdaText -> tgt.text as fhirText then {
          cdaText -> fhirText.status = 'generated' "narrativeStatus";
          cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";
      }"entry-exists";
    //Sezione Narrativa--------------------------------------------------------------------------------------------------------------------------------------------------
      src where src.entry.exists().not() then {
        src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('ServiceRequest') as ServiceRequest,  ServiceRequest.id = uuid() as uuid8,  e8.fullUrl = append('https://example/ServiceRequest/', uuid8), request.url = 'ServiceRequest', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %ServiceRequest.id) then {
          src -> ServiceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
          src -> ServiceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src -> ServiceRequest.status='active'"status";
          src -> ServiceRequest.intent='order'"intent";    
                cdaText -> ServiceRequest.note as note then{
                cdaText as t ->note.text =t "reference";
              }"reference";
            }"cdaText";
          }"where";

      //Sezione Strutturata--------------------------------------------------------------------------------------------------------------------------------------------   
      src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id), serviceRequest.note as note then {
        
        entry1->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
        entry1->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
        entry1 -> serviceRequest.status='active'"status";
        entry1 -> serviceRequest.intent='order'"intent";    
        
        entry1.act as act then{
        act.code -> serviceRequest.code;
          act.text as t -> note.text = (t.dataString) "text"; 
          act.statusCode as code -> serviceRequest.status = (code.code);
          act.performer as perf -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
          perf.time as time  -> serviceRequest.occurrence=create('dateTime') as t then TSDateTime(time,t) "time";
          perf.assignedEntity as assEnt then{

          
              assEnt->practitioner.meta as meta then {
                assEnt->meta.tag = create('Coding') as coding then {
                  assEnt -> coding.system ='http://algoritmodiscoring'"system";
                  assEnt -> coding.code ='ClinicalDocument/body/Consulenze/performer'"code";
                }"coding";
              }"meta";
              assEnt.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assEnt.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              assEnt.assignedPerson as assPer then {
                assPer.name -> practitioner.name;
              }"assPer";
            }"assEnt";
          }"performer";           
          act.participant as parti -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
            parti.time as time  -> serviceRequest.authoredOn=create('dateTime') as t then TSDateTime(time,t) "time";
          parti.participantRole as partRole then {
                partRole->practitioner.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='ClinicalDocument/body/Consulenze/participant'"code";
                }"coding";
              }"meta";
              partRole.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";

            
              partRole.playingEntity as entity then{
                entity.name -> practitioner.name;
              }"entity";
            }"partRole";
          }"participant";   
        }"ACT";
      }"entry";
}
//---------------------------------------------------------------------------------------------------------

//Sezione Accertamenti--------------------------------------------------------------------------------------
group ClinicalDocumentSectionAccertamenti(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src where src.entry.exists() then {
    src.text as cdaText -> tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText";
    } "cdaText";
  }"entryExists";
  //Sezione Strutturata---------------------------------------------------------------------------------------------------------------------------------------------
  src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {    
    entry1.organizer as obs then{      
      src.code -> observation.code;
       obs then ObservationAccertamenti(obs, patient ,enc ,observation, bundle) "act";
    }"obs"; 
  }"entry";
  //Sezione Narrativa--------------------------------------------------------------------------------------------------------------------------------------------
  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
      src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> Observation.code;
          src where observation.statusCode.exists().not() then {
              src->Observation.status ='final'"status";
              }"statuscode";
            cdaText -> Observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"cdaText";
      }"where";
}


group ObservationAccertamenti (source obs : Observation, target patient : Patient, target encounter : Encounter, target ob : Observation, target bundle : Bundle) {
  obs.code -> ob.code;
  obs.statusCode as statusc where (code='completed') -> ob.status ='final';
  obs.statusCode as statusc where (code='active') -> ob.status ='registered';
  obs.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
  obs.statusCode as statusc where (code='suspended') -> ob.status ='partial';
  obs where obs.statusCode.exists().not() then {
    obs->ob.status ='final'"status";
    }"statuscode";
  obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
  obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
    obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
    }"where";
  obs.value:CD as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"qual";
      } "translation";
    }"coding";
  }"val";
  obs.value:CE as val then{
    val->ob.value =create('CodeableConcept') as ce then {
    val.originalText -> ce.text;
    val -> ce.coding as coding then {
    val.code as code -> coding.code = cast(code, 'string');
    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
    val.displayName as display -> coding.display = cast(display, 'string');
    } "code";
    val.translation as translation -> ce.coding as coding then {
      translation.code as code -> coding.code = cast(code, 'string');
      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
      translation.displayName as display -> coding.display = cast(display, 'string');
      translation.qualifier as qualifier then{
        qualifier.value as value -> ce.coding as coding then {
          value.code as code -> coding.code = cast(code, 'string');
          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
          value.displayName as display -> coding.display = cast(display, 'string');
          } "value";
        }"qual";
      } "translation";
    }"coding";
  }"val";
  obs.value:PQ as val then{
    val->ob.value = create('Quantity') as quantity then {
    val.value as value->quantity.value = value;
    val.unit as unit-> quantity.unit = unit "unit";
    }"quantity";
  }"valueQuantity";
  obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
  obs.value:INT as int->ob.value=(int.value) "value";
  obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";

    obs->ob.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    obs->ob.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
    obs.interpretationCode -> ob.interpretation;
    obs.methodCode -> ob.method;
   
    obs.referenceRange as refRange -> ob.referenceRange = create('BackboneElement') as ref then {
      refRange.observationRange as obsRange -> ref.low = create('SimpleQuantity') as Low  then {
          obsRange.value: IVL_PQ as v  then {
            v.low as l1 then {
              l1.value as decValue-> Low.value = decValue;
              l1.unit as Unit-> Low.unit = Unit;
            }"decValue";          
          }"IVL-PQ";                      
      }"obsRange";              
    }"refRange";  


    obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
      performer.assignedEntity as assEntity then {

        //inizio modifica identifier+meta 
        assEntity->practitioner.meta as meta then {
          assEntity->meta.tag = create('Coding') as coding then {
            assEntity -> coding.system ='http://algoritmodiscoring'"system";
            assEntity -> coding.code ='ClinicalDocument/body/Accertamenti/performer'"code";
          }"coding";
        }"meta";
        assEntity.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), ob.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        //fine modifica
        //assEntity.id -> practitioner.identifier;
        assEntity.assignedPerson as assi then {
          assi.name -> practitioner.name;
        }"assi";
      }"assEntity";
    }"perf";

    obs.participant as participant -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,ob.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
      
      //participant.time as t -> serviceRequest.authoredOn = (t.value);
      participant.time as t -> serviceRequest.authoredOn = create('dateTime') as value then TSDateTime(t, value) "value2";
     
      obs->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
      obs->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
      obs -> serviceRequest.status='active'"status";
      obs -> serviceRequest.intent='order'"intent";
      participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
        
        //modifica meta+identifier
        participantRole->practitioner.meta as meta then {
          participantRole->meta.tag = create('Coding') as coding then {
            participantRole -> coding.system ='http://algoritmodiscoring'"system";
            participantRole -> coding.code ='ClinicalDocument/body/Accertamenti/participant'"code";
          }"coding";
        }"meta";
        participantRole.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        participantRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        //fine modifica         
        
        //participantRole.id -> practitioner.identifier;
        participantRole.playingEntity as pe then{
          pe.name -> practitioner.name;
        }"pe";
      }"participantRole";
    }"participant";

    obs.component as comp -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , ob.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
      comp.observation as obs then {    
        obs.code -> observation.code;             
        obs.statusCode as statusc where (code='completed') -> observation.status ='final';
        obs.statusCode as statusc where (code='active') -> observation.status ='registered';
        obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
        obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
        obs where obs.statusCode.exists().not() then {
        obs->observation.status ='final'"status";
        }"statuscode"; 
        
        obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
        obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encounter.id) "reference";
        obs.effectiveTime as effectiveTime -> ob.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
        obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
          obs.effectiveTime as eff-> ob.effective=create('Period') as period then IVLTSPeriod(eff,period);
          }"where";

        obs.value as val -> observation.value = (val.dataString);
      }"obs";
    }"observation";
}
//-----------------------------------------------------------------------------------------------------------

//Sezione ParametriVitali--------------------------------------------------------------------------------------
group ClinicalDocumentSectionParametriVitali(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
        src.title as t -> tgt.title = (t.dataString);
        src.code -> tgt.code;
        src where src.entry.exists() then {
          src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
          } "cdaText";
        }"entry-exists";

      // Sezione Narrativa----------------------------------------------------------------------------------------------------------------------------------------------------
        src where src.entry.exists().not() then {
          src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
            src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
                src.code -> Observation.code;
                src where observation.statusCode.exists().not() then {
                    src->Observation.status ='final'"status";
                    }"statuscode";
                  cdaText -> Observation.note as note then{
                  cdaText as t ->note.text =t "reference";
                }"reference";
              }"cdaText";
            }"where";
      //Sezione Strutturata --------------------------------------------------------------------------------------------------------------------------------------------------------
        src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
          entry1.organizer as org then{
            org -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            org -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
            org.statusCode as statusc where (code='completed') -> observation.status ='final';
            org.statusCode as statusc where (code='active') -> observation.status ='registered';
            org.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
            org.statusCode as statusc where (code='suspended') -> observation.status ='partial';
            org where obs.statusCode.exists().not() then {
              org->observation.status ='final'"status";
            }"statuscode";       
            org.code -> observation.code;
            org where org.code.exists().not() then {
              src.code->observation.code;
            }"code";
            org.component as component ->  bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation1,  observation1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,observation.hasMember  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation1.id) then {
              component.observation as obs then {
                obs -> observation1.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                obs -> observation1.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
                obs.code -> observation1.code;
                obs.statusCode -> observation1.status;
                obs.statusCode as statusc where (code='completed') -> observation1.status ='final';
                obs.statusCode as statusc where (code='active') -> observation1.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation1.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation1.status ='partial';
                obs where obs.statusCode.exists().not() then {
                obs->observation1.status ='final'"status";
                }"statuscode";           
              
                obs -> observation1.value = create('Quantity') as quant then{
                  obs.value as v -> quant.value = (v.value);
                  obs.value as v -> quant.unit = (v.unit);
                }"quant";
                obs.value:CE as val then{
                  val->ob.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:CD as val then{
                  val->ob.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
                obs.value:INT as int->ob.value=(int.value) "value";
                obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
                obs.interpretationCode -> observation1.interpretation;
                obs.methodCode -> observation1.method;
                obs.targetSiteCode -> observation1.bodySite;
                
                obs.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                    performer.time as t -> observation1.issued = create('dateTime') as date then TSDateTime(t,date);
                    performer.assignedEntity as assEntity then{
                    
                    //inizio modifica meta+ identifier
                    assEntity->practitioner.meta as meta then {
                      assEntity->meta.tag = create('Coding') as coding then {
                        assEntity -> coding.system ='http://algoritmodiscoring'"system";
                        assEntity -> coding.code ='ClinicalDocument/body/ParametriVitali/performer'"code";
                      }"coding";
                    }"meta";
                    assEntity.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), observation1.performer  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                      }"r";
                    }"identifier";
                    assEntity.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";                
                    //fine modifica
                    
                    //assEntity.id -> practitioner.identifier;
                    assEntity.assignedPerson as assPerson then{
                      assPerson.name -> practitioner.name;
                    }"assPerson";
                  }"assEntity";
                }"performer";

                obs.participant as parti -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as serviceRequest,  serviceRequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' ,observation1.basedOn  = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %serviceRequest.id) then{
                  
                  parti->serviceRequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                  parti->serviceRequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
                  parti -> serviceRequest.status='active'"status";
                  parti -> serviceRequest.intent='order'"intent";                        
                  
                  parti.time as t -> serviceRequest.authoredOn = create('dateTime') as value then TSDateTime(t, value) "value2";
                  parti.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                    
                    //inizio modifica meta + identifier
                    partRole->practitioner.meta as meta then {
                      partRole->meta.tag = create('Coding') as coding then {
                        partRole -> coding.system ='http://algoritmodiscoring'"system";
                        partRole -> coding.code ='ClinicalDocument/body/ParametriVitali/participant'"code";
                      }"coding";
                    }"meta";
                    partRole.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), serviceRequest.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                      }"r";
                    }"identifier";
                    partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    //fine modifica
                    
                    //partRole.id -> practitioner.identifier;
                    partRole.playingEntity as playingEntity then{
                      playingEntity.name -> practitioner.name;
                    }"name";
                  }"partRole";
                }"parti";

              }"obs";
            }"component";
          }"obs"; 
        }"Observation";
}
//-----------------------------------------------------------------------------------------------------------------

//Sezione terapia Farma in Pronto----------------------------------------------------------------------------------

group ClinicalDocumentSectionTerapiaFarmacoInPronto(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
        src.title as t -> tgt.title = (t.dataString);
        src.code -> tgt.code;
        src where src.entry.exists() then {
          src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
          } "cdaText";
        }"entry-exists";
      // Sezione Narrativa------------------------------------------------------------------------------------------------------------------------------------------------
        src where src.entry.exists().not() then {
          src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('MedicationAdministration') as MedicationAdministration,  MedicationAdministration.id = uuid() as uuid8,  e8.fullUrl = append('https://example/MedicationAdministration/', uuid8), request.url = 'MedicationAdministration', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %MedicationAdministration.id) then {
            src -> MedicationAdministration.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> MedicationAdministration.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            src ->MedicationAdministration.effective = create('Period') as period then{
            src->period.start=(start.now())"low";
            src->period.end=(end.now())"high";
            }"Period";
          src where sub.statusCode.exists().not() then {
            src->MedicationAdministration.status ='completed'"status";
            }"statuscode";
                  cdaText -> MedicationAdministration.note as note then{
                  cdaText as t ->note.text =t "reference";
                  cdaText ->  MedicationAdministration.medication =create('CodeableConcept') as medication then {
                    cdaText as txt -> medication.text=txt "text";
                  }"medication";
                }"reference";
              }"cdaText";
            }"where";
      // Sezione Strutturata-------------------------------------------------------------------------------------------------------------------------------------------------
        src.entry as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationAdministration') as medAdm,  medAdm.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationAdministration/', uuid1), request.url = 'MedicationAdministration' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationAdministration/' + %medAdm.id), medAdm.note as note then {
          entry1->medAdm.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
          entry1->medAdm.context=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
          entry1.substanceAdministration as sub then{
            sub.text as tx then{ 
              tx.reference as reff -> note.text = (reff.value);
            }"txx";
            sub.statusCode -> medAdm.status;
            //sub.effectiveTime: IVL_TS as eff -> medAdm.effective =create('Period') as period then IVLTSPeriod(eff,period); CHECK THIS
            sub.effectiveTime as eff -> medAdm.effective =create('Period') as period then IVLTSPeriod(eff,period);  
            sub.effectiveTime: PIVL_TS as eff -> medAdm.dosage as dosage then{
              eff -> dosage.rate = create('Ratio') as ratio then {
                eff -> ratio.numerator = create('Quantity') as num then{
                  eff.period as per -> num.value = (per.value);
                  eff.period as per -> num.unit = (per.unit);
                }"num";
                eff -> ratio.denominator = create('Quantity') as num then{
                  eff.period as per -> num.value = '1';
                  eff.period as per -> num.unit = (per.unit);
                }"den";
              }"ratio";
            }"eff2";
            sub -> medAdm.dosage as dosage then{
              sub.routeCode -> dosage.route;
            }"route";
            sub -> medAdm.dosage as dosage then{
              sub.approachSiteCode -> dosage.site;
            }"route";
            
            sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,medAdm.request  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id) then{
              
              sub.entryRelationship as rel then{
                rel.supply as supl -> medRq.dispenseRequest = create('BackboneElement') as disp  then{
                  supl -> disp.quantity = create('SimpleQuantity') as q then {
                    supl.quantity as qua -> q.value = (qua.value) "fds";
                  }"SimpleQuantity";
                }"obs";
              }"rel";
              sub-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              sub-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
              sub -> medRq.status='active'"status";
              sub -> medRq.intent='order'"intent";            
              
              sub -> medRq.medication = create('CodeableConcept') as cod then{
                sub -> cod.text = 'medication' "Medi";
              }"code";

              sub.doseQuantity as quantity then  {
                quantity -> medRq.dosageInstruction = create('Dosage') as dosage then{
                  quantity -> dosage.doseAndRate as dosRange then{
                    quantity -> dosRange.dose = create('Range') as range then {
                      quantity ->  range.low = create('SimpleQuantity') as quant then{
                        quantity.low as l -> quant.value = (l.value) "v1";
                        quantity.low as l -> quant.unit = (l.unit) "v1";
                      }"low";
                      quantity ->  range.high = create('SimpleQuantity') as quant then{
                        quantity.high as h -> quant.value = (h.value) "v1";
                        quantity.high as h -> quant.unit = (h.unit) "v1";
                      }"high";
                    }"range";
                  }"dos";
                }"dosage";
              }"dose-quantity";
                sub.rateQuantity as rate then {
                  rate -> medRq.dosageInstruction = create('Dosage') as dosage then{
                    rate -> dosage.doseAndRate as dosRange then{
                      rate -> dosRange.dose = create('Range') as range then {
                        rate ->  range.low = create('SimpleQuantity') as quant then{
                          rate.low as l -> quant.value = (l.value) "v1";
                          rate.low as l -> quant.unit = (l.unit) "v1";
                        }"low";
                        rate ->  range.high = create('SimpleQuantity') as quant then{
                          rate.high as h -> quant.value = (h.value) "v1";
                          rate.high as h -> quant.unit = (h.unit) "v1";
                        }"high";
                      }"range";
                    }"dos";
                  }"dosage";
                }"Rate-quantity";

              sub.participant as part then{
                part.time as t -> medRq.authoredOn = create('dateTime') as date then TSDateTime(t,date) "time";  
                part.participantRole as partRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
                  
                  //inizio meta+identifier
                  partRole->practitioner.meta as meta then {
                    partRole->meta.tag = create('Coding') as coding then {
                      partRole -> coding.system ='http://algoritmodiscoring'"system";
                      partRole -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaPS/participant'"code";
                    }"coding";
                  }"meta";
                  partRole.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                    }"r";
                  }"identifier";
                  partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";            
                  //fine modifiche
                  
                  partRole.id -> practitioner.identifier;
                  partRole.playingEntity as play then{
                    play.name -> practitioner.name;
                  }"play";
                }"Part";
              }"part";
            }"medicationRequest";

            sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as med,  med.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication' ,medAdm.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %med.id) then{
              sub.administrationUnitCode as adduni then {
                sub.administrationUnitCode -> med.form;
                sub.consumable as consum then{
                  consum.manufacturedProduct as manuProd then{
                    manuProd.manufacturedMaterial as manuMt then{
                      manuMt.code -> med.code;
                    }"manuMat";
                  }"manuMat";
                }"consum";
              }"unicode";
              sub.entryRelationship as entryR then{
                entryR.observation as observation then{
                      observation.code where displayName='Grammatura' -> med.ingredient as ingredient then{
                        sub.consumable as consumable then{
                                consumable.manufacturedProduct as manufacturedProduct then{
                                    manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                        manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                    }"material";
                                }"product";
                            }"consumable";
                            observation.value as value -> ingredient.strength as strength then{
                                value -> strength.numerator as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> strength.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                          }"strenght";
                        }"ingredient";
                        observation.code where displayName='Quantità nella Confezione' then{
                            observation.value as value -> med.amount as amount then{
                                value -> amount.numerator  as numerator then{
                                    value -> numerator.value = (value.value) "valueN";
                                } "numerator";
                                value -> amount.denominator as denominator then{
                                    value -> denominator.value = 1 "valueD";
                                } "denominator";
                            }"amount";
                      }"quantita";
                  }"obs";
              }"entry-R";
     }"med";     

      

      sub.performer as perf -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
        
      perf ->medAdm.note as note then {
        perf->note.text='performertime' "notaa";
       perf.time as t ->note.time= create('dateTime') as value then TSDateTime(t, value) "notetime";
      }"preftime";
      perf.assignedEntity as ent then{

          // inizio modifica meta+identifier
          ent->practitioner.meta as meta then {
            ent->meta.tag = create('Coding') as coding then {
              ent -> coding.system ='http://algoritmodiscoring'"system";
              ent -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaPS/performer'"code";
            }"coding";
          }"meta";
          ent.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medAdm.performer as p, p.actor = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          ent.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";
          //fine modifica

          //ent.id -> practitioner.identifier;
          ent.assignedPerson as assPerson then{
            assPerson.name -> practitioner.name;
          }"assperson";
        }"ent";
        
      }"perform";
    }"MedAdm";
  }"entry";
}
//------------------------------------------------------------------------------------------------------------------

//-
group ClinicalDocumentSectionPianoCuraDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
 
 src as entry1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('CarePlan') as careplan,  careplan.id = uuid() as uuid1,  e1.fullUrl = append('https://example/CarePlan/', uuid1), request.url = 'CarePlan' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/CarePlan/' + %careplan.id) then {
    src-> careplan.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src-> careplan.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";    
    src -> careplan.status='active'"status";
    src -> careplan.intent='order'"intent";
    src.text as cdaText -> careplan.note as carenote then {
      cdaText as t -> carenote.text=t "notetxt";
      entry1.author as author then {
        author.time as t-> carenote.time= create('dateTime') as value then TSDateTime(t, value) "notetime";
        author.assignedAuthor as assauthor -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
          
          //inizio modifica meta+identifier
          assauthor->practitioner.meta as meta then {
            assauthor->meta.tag = create('Coding') as coding then {
              assauthor -> coding.system ='http://algoritmodiscoring'"system";
              assauthor -> coding.code ='ClinicalDocument/body/PianoCuraDimissione/author'"code";
            }"coding";
          }"meta";
          assauthor.id as id -> practitioner.identifier as identifier then {
            id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
            id.extension as ext->identifier.value = ext;
            id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
            id.root as r then {
              id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), carenote.author = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
            }"r";
          }"identifier";
          assauthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
            id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
          }"2.16.840.1.113883.2.9.4.3.2";            
          //fine modifica
          
          //assauthor.id->practitioner.identifier "cfauthor";
          assauthor.assignedPerson as pers then{
            pers.name -> practitioner.name;
            }"namepers";
          }"authpract";
        }"CFauthor";
      }"author";
      entry1.entry as entry2 then{ 
        entry2.act as entryact ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('ServiceRequest') as servicerequest,  servicerequest.id = uuid() as uuid1,  e1.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' , careplan.activity = create('BackboneElement') as activ, activ.reference =create('Reference') as reference, reference.reference = ('https://example/ServiceRequest/' + %servicerequest.id) then{

          entryact->servicerequest.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
          entryact->servicerequest.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
          entryact -> servicerequest.status='active'"status";
          entryact -> servicerequest.intent='order'"intent";          

          entryact-> servicerequest.identifier = create('BackboneElement') as identif then {
           
            entryact.reference as actref then {
              actref.externalAct as extact then{
             
                extact->servicerequest.identifier = create('BackboneElement') as identif3 then{
                  extact.id as id  then {
                    id.root as r ->identif3.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identif3.value = ext then {
                      id.assigningAuthorityName as s -> identif3.assigner as a, a.display = s;
                    }"ext";
                 }"idnetn";
              }"extact";
            }"actref";
          }"jarilemes";
          entryact.code->servicerequest.code;
          entryact.statusCode->servicerequest.status;
          entryact.author as actauthor then {
            actauthor.time as t->servicerequest.authoredOn=create('dateTime') as date then TSDateTime(t,date);
            actauthor.assignedAuthor as assauthor -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
              
              //inizio modifica identifier
              assauthor->practitioner.meta as meta then {
                assauthor->meta.tag = create('Coding') as coding then {
                  assauthor -> coding.system ='http://algoritmodiscoring'"system";
                  assauthor -> coding.code ='ClinicalDocument/body/PianoCuraDimissione/author'"code";
                }"coding";
              }"meta";
              assauthor.id as id -> practitioner.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), servicerequest.requester = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                }"r";
              }"identifier";
              assauthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
              //fine modifica
              
              //assauthor.id->practitioner.identifier "cfauthor";
              assauthor.assignedPerson as pers then{
                pers.name -> practitioner.name;
                }"namepers";
            }"author";
          }"servReq";
        }"entry2";
      }"carnote";
    }"entry1";
  }"entryident3";
}

//-------Dimissione------------------------------------------------------------------------------------------------------
group ClinicalDocumentSectionDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  } "cdaText";

  src.entry as entry1  then {
    entry1.act as act -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert,  encountert.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert.id) then{
      
      act -> encountert.status = 'finished' "status";
      act -> encountert.class = create('Coding') as cl then{
        act -> cl.code = 'AMB' "code";
        act -> cl.display = 'ambulatory' "code";
      }"class";

      act -> encountert.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + enc.id)"refenc";
      act -> encountert.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"refpatient"; 
      act.code -> encountert.type;
      act where effectiveTime.low.exists() or effectiveTime.high.exists() then {
        act.effectiveTime as eff  -> encountert.period=create('Period') as period then IVLTSPeriod(eff,period);
        }"where";
        // effectiveTime = time-stamp
        act where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
        act.effectiveTime as effectivetime1 -> encountert.period = create('Period') as period then{
          effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
        }"efft";
        }"where";



      act.performer as performer -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1) then{
      //performer.time as ti -> note.time = (ti.value);
       performer.assignedEntity as assEnty then{
       
        assEnty->practitioner.meta as meta then {
          assEnty->meta.tag = create('Coding') as coding then {
            assEnty -> coding.system ='http://algoritmodiscoring'"system";
            assEnty -> coding.code ='ClinicalDocument/body/Dimissione/performer'"code";
          }"coding";
        }"meta";
        assEnty.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), encountert.participant as perf then {  
            performer->perf.period=create('Period') as period then {
              performer.time as time ->period.start= create('dateTime') as start then TSDateTime(time,start);
            }"period";
            performer ->perf.individual  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"perf";
          }"r";
        }"identifier";
        assEnty.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
      
        assEnty.assignedPerson as assPers then{
           assPers.name -> practitioner.name;
         }"assPer";
       }"ass";
      }"erformer";
      //Encounter Post dimissione---------------------------------------------------------------------------------------------------------------------------------------
      act.entryRelationship as entriRel then {
        entriRel.encounter as enc1 then{
          enc1 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert1,  encountert1.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' , tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert1.id), encountert1.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert.id)  then {
            enc1 -> encountert1.status = 'finished' "status";
            enc1 -> encountert1.class = create('Coding') as cl then{
              enc1 -> cl.code = 'AMB' "code";
              enc1 -> cl.display = 'ambulatory' "code";
            }"class";                        
            
            enc1 -> encountert1.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"refpatient";
            enc1.id -> encountert1.identifier;
            // enc1.code -> encountert1.type;
            enc1 -> encountert1.type = create('CodeableConcept') as ti then{
              enc1 -> ti.coding = create('Coding') as cod then{
                enc1.code as c -> cod.code = (c.code) "code";
                enc1.code as c then{
                  c.codeSystem as s -> cod.system = translate(s, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "system";
                }"syst";
                enc1.code as c -> cod.display = (c.displayName) "dispaly";
              }"coding"; 
              enc1.text as tx then{
                tx.reference as ref -> ti.text = (ref.value) "val"; 
              }"text";              
            }"code";
            

            enc1 where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              enc1.effectiveTime as eff  -> encountert1.period=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              // effectiveTime = time-stamp
              enc1 where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
                enc1.effectiveTime as effectivetime1 -> encountert1.period = create('Period') as period then{
                effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
              }"efft";
              }"where";

            enc1.participant as part where(typeCode = 'LOC')  -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1), request.url = append('Location/', uuid1) then {
              part-> location.meta as meta then {
                part-> meta.tag = create('Coding') as coding then {
                part -> coding.system ='http://algoritmodiscoring'"system";
                part -> coding.code ='ClinicalDocument/body/Dimissione/participant'"code";
                }"coding";
              }"meta";              
              
              part.time as tim -> encountert1.location as locat then{
                  tim -> locat.period  =create('Period') as period then IVLTSPeriod(tim,period)"time";
                  part.time as tim  -> locat.period = create('Period') as period then{
                    tim -> period.start = create('dateTime') as start then TSDateTime(tim,start) "val";
                   }"time";
              part.participantRole as partRole then{
                partRole.id as id -> location.identifier as identifier then {
                  id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                  id.extension as ext->identifier.value = ext then {
                    partRole -> request.url = append('Location?identifier=',ext)"UUID";
                  }"ext";
                  id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                  id.root as r then {
                    id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid), locat.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                  }"r" ;
                }"identifier";                          
               //partRole.id -> location.identifier;  
                partRole.code -> location.type;
              }"partRole";
            }"location1";
            }"Location";
           
            enc1.entryRelationship as entryrel2 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert1.reasonReference  = create('BackboneElement') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
              entryrel2.observation as obs then{
                obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert1.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
                obs  -> observation.status = 'final' "notpresent";
                obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                  obs.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                  }"where";
                obs.value:INT as int->observation.value=(int.value) "value";
                obs.value:BL as boolean ->observation.value=(boolean.value)"boolean";
                obs.value:CE as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:CD as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:PQ as val then{
                  val->observation.value = create('Quantity') as quantity then {
                    val.value as value->quantity.value = value;
                    val.unit as unit-> quantity.unit = unit "unit";
                  }"quantity";
                }"valueQuantity";
                obs.value:ST as value->observation.value =create('string'),observation.value= (value.dataString) "value";
  
              }"obs";
            }"entryrel2";
          }"enc1";
        }"enc";
      }"entriRel";
      //Trasferimento post dimissione-------------------------------------------------------------------------------------------------------------------------------------
      act.entryRelationship as entriRel2 then {
        entriRel2.act as a then{
           a -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Encounter') as encountert2,  encountert2.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Encounter/', uuid1), request.url = 'Encounter' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert2.id),encountert2.partOf  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + encountert.id)  then {
            a -> encountert2.status = 'finished' "status";
            a -> encountert2.class = create('Coding') as cl then{
              a -> cl.code = 'AMB' "code";
              a -> cl.display = 'ambulatory' "code";
            }"class";
            a -> encountert2.subject  = create('Reference') as reference,  reference.reference = ('https://example/Patient/' + patient.id)"refpatient";
            a where effectiveTime.low.exists() or effectiveTime.high.exists() then {
              a.effectiveTime as eff  -> encountert2.period=create('Period') as period then IVLTSPeriod(eff,period);
              }"where";
              // effectiveTime = time-stamp
              a where effectiveTime.low.exists().not() or effectiveTime.high.exists().not() then {
                a.effectiveTime as effectivetime1 -> encountert2.period = create('Period') as period then{
                effectivetime1 -> period.start =  create('dateTime') as start then TSDateTime(effectivetime1,start) "val"; 
              }"efft";
              }"where";             
            
            a -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Location') as location,  location.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Location/', uuid1), request.url = append('Location/', uuid1) then{

              a.text as tx then {
                tx.reference as ref -> location.description = (ref.value) "dfs";
              }"text";
              a.participant as part   then {              
                part-> location.meta as meta then {
                  part-> meta.tag = create('Coding') as coding then {
                  part -> coding.system ='http://algoritmodiscoring'"system";
                  part -> coding.code ='ClinicalDocument/body/Dimissione/act'"code";
                  }"coding";
                }"meta";              
                
                part.time as tim -> encountert2.location as locat then{
                    tim -> locat.period = create('Period') as period then IVLTSPeriod(tim,period)"time";
                    part.time as tim  -> locat.period = create('Period') as period then{
                      tim -> period.start = create('dateTime') as start then TSDateTime(tim,start) "val";
                     }"time";
                    
                part.participantRole as partRole then{

                  partRole.id as id -> location.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext then {
                      partRole -> request.url = append('Location?identifier=',ext)"UUID";
                    }"ext";
                    id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
                    id.root as r then {
                      id.extension as ext  -> location.id = (r +'-'+ ext) as uuid,  e1.fullUrl = append('https://example/Location/', uuid),  locat.location  = create('Reference') as reference,  reference.reference = ('https://example/Location/' + %location.id) "idasi";       
                    }"r" ;
                  }"identifier";  

                
                  //partRole.id -> location.identifier;  
                  partRole.code -> location.type;
                }"partRole";
              }"loc2";
              }"Location";
            }"loc";
            a.entryRelationship as entryrel2 -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert2.reasonReference  = create('BackboneElement') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
              entryrel2.observation as obs then{
                obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert2.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
                obs  -> observation.status = 'final' "notpresent";
                obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                  obs.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                  }"where";
                obs.value:INT as int->observation.value=(int.value) "value";
                obs.value:BL as boolean ->observation.value=(boolean.value)"boolean";
                obs.value:CE as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:CD as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:PQ as val then{
                  val->observation.value = create('Quantity') as quantity then {
                    val.value as value->quantity.value = value;
                    val.unit as unit-> quantity.unit = unit "unit";
                  }"quantity";
                }"valueQuantity";
                obs.value:ST as value->observation.value =create('string'),observation.value= (value.dataString) "value";
  
              }"obs";
            }"entryrel2";
           }"act";
        }"a";
     }"entri-act";
     //--------------Diagnosi alla dimissione-------------------------------------------------------------
     act.entryRelationship as entryrel2 then{
      entryrel2.observation as obs then{
        obs.code as code where (code = '29308-4') -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' , encountert.reasonReference  = create('Reference') as reference ,  reference.reference = ('https://example/Observation/' + %observation.id) then{
            obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
            obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %encountert.id) "reference"; 
                obs.code -> observation.code;
                obs.statusCode as statusc where (code='completed') -> observation.status ='final';
                obs.statusCode as statusc where (code='active') -> observation.status ='registered';
                obs.statusCode as statusc where (code='aborted') -> observation.status ='cancelled';
                obs.statusCode as statusc where (code='suspended') -> observation.status ='partial';
               // obs where obs.statusCode.exists().not() then {
                    obs->observation.status ='final'"status";
                  //  }"statuscode";
               obs.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
               obs where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                obs.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                }"where";
               obs.value as val then{
                  val->observation.value =create('CodeableConcept') as ce then {
                    val.originalText as originalText then{
                      originalText.reference as reference-> ce.text=reference;
                    }"originltext";
                    val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    }"code";
                    val.translation as translation -> ce.coding as coding then {
                      translation.code as code -> coding.code = cast(code, 'string');
                      translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      translation.displayName as display -> coding.display = cast(display, 'string');
                      translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      translation.qualifier as qualifier then{
                        qualifier.value as value -> ce.coding as coding then {
                          value.code as code -> coding.code = cast(code, 'string');
                          value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                          value.displayName as display -> coding.display = cast(display, 'string');
                          value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                        }"value";
                      }"qualifier";
                    }"translation";
                  }"coding";
                }"val";
                obs.value:INT as int->ob.value=(int.value) "value";
                obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
                obs.value:PQ as val then{
                  val->ob.value = create('Quantity') as quantity then {
                    val.value as value->quantity.value = value;
                    val.unit as unit-> quantity.unit = unit "unit";
                  }"quantity";
                }"valueQuantity";
                obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";


         }"222";
      }"obs";
      }"entryrel2";
      //--------Esito----------------------------
      act.entryRelationship as entriRel3 then{
        entriRel3.observation as obs2 then{
            obs2.code as code then {
            code.code where (code.code = '11302-7') then { 
            obs2 -> encountert.hospitalization as hospital then{
            obs2.value -> hospital.dischargeDisposition;	
          }"hospital";          
      }"entry-obs1";
    }"act";
    }"x";
    }"3";

    }"act";
  }"entry1";

  src.entry as entry1 then {
    entry1.observation as obs then {
      obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then{
    
      obs.value as val where("xsi:type" = 'BL') -> observation.value = (val.value);
      obs then Observation(obs, patient ,enc ,observation, bundle) "act";
      }"obstarg";
    }"obs"; 
  }"entry";

}
//-----------------------------------------------------------------------------------------------------------------------

//------------------------------TerapiaFarmacologicaDimissione-----------------------------------------------------------------------------------------
group ClinicalDocumentSectionTerapiaFarmacologicaDimissione(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  //Sezione Narrativa------------------------------------------------------------------------------------------------------------------------------------------------
  src where src.entry.exists().not() then {
    src.text as cdaText -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id), medRq.note = create('Annotation') as note then {
      cdaText ->note.text =cdaText "reference";  
      cdaText-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      cdaText-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
      cdaText -> medRq.status='active'"status";
      cdaText -> medRq.intent='order'"intent";  
    src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1)  then{
      auth.time as t -> note.time= create('dateTime') as value then TSDateTime(t, value);
      auth.assignedAuthor as assAuth then{
        //  assAuth.time -> note.time;
       assAuth->practitioner.meta as meta then {
          assAuth->meta.tag = create('Coding') as coding then {
            assAuth -> coding.system ='http://algoritmodiscoring'"system";
            assAuth -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaDimissione/author'"code";
          }"coding";
        }"meta";
        assAuth.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2),note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assAuth.assignedPerson as asspers then{
          asspers.name -> practitioner.name;
        }"assPers";
      }"assAuth";
    }"auth";
      src ->  medRq.medication =create('CodeableConcept') as medication then {
        src.text as txt -> medication.text=txt "text";
    }"medicationesiste";
    
  }"note";
}"text";

   // Sezione Strutturata------------------------------------------------------------------------------------------------------------------------------------------
   src where src.entry.exists() then {
   src -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e1.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id), medRq.note = create('Annotation') as note then {
    src.text as t ->note.text =t "reference"; 
    src-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";     
    src -> medRq.status='active'"status";
    src -> medRq.intent='order'"intent";  
    src.author as auth -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as practitioner,  practitioner.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Practitioner/', uuid1), request.url = append('Practitioner/', uuid1)  then{
      auth.time as t ->  note.time= create('dateTime') as value then TSDateTime(t, value);
      auth.assignedAuthor as assAuth then{
        //  assAuth.time -> note.time;
       assAuth->practitioner.meta as meta then {
          assAuth->meta.tag = create('Coding') as coding then {
            assAuth -> coding.system ='http://algoritmodiscoring'"system";
            assAuth -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaDimissione/author'"code";
          }"coding";
        }"meta";
        assAuth.id as id -> practitioner.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
          id.root as r then {
            id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2),note.author  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
          }"r";
        }"identifier";
        assAuth.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
          id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
        }"2.16.840.1.113883.2.9.4.3.2";
        assAuth.assignedPerson as asspers then{
          asspers.name -> practitioner.name;
        }"assPers";
      }"assAuth";
    }"auth";
     
    src.entry as entry1 then {
      entry1.substanceAdministration as sub then{   
        sub.statusCode -> medRq.status;
        sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub -> dosage.timing = create('Timing') as tim then{
            sub.effectiveTime as eff -> tim.repeat as repeat then{
              eff -> repeat.bounds  =create('Period') as period then IVLTSPeriod(eff,period)"boundsperiod";
            }"repeat";
          }"timing";
        }"dosage";
       
        sub.effectiveTime: PIVL_TS as eff -> medRq.dosageInstruction = create('Dosage') as dosage then{
        eff -> dosage.timing = create('Timing') as timing then periodTiming(eff,timing) "cod";
        }"eff";

    sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub.routeCode -> dosage.route;        
        }"dosage";
        
        sub -> medRq.dosageInstruction = create('Dosage') as dosage then{
          sub.approachSiteCode -> dosage.site;        
        }"dosage";

        sub.doseQuantity as doseQuant then{
          doseQuant -> medRq.dosageInstruction = create('Dosage') as dosageInstruction then{
            doseQuant.originalText as ot then{
              ot.reference -> dosageInstruction.text;
            }"ot";
            doseQuant -> dosageInstruction.doseAndRate as dosageRate then{
              doseQuant -> dosageRate.dose = create('Range') as d then{
                doseQuant -> d.low = create('SimpleQuantity') as l then{
                  doseQuant.low as lo -> l.value = (lo.value); 
                  doseQuant.low as lo -> l.unit = (lo.unit); 
                }"low";
                doseQuant -> d.high = create('SimpleQuantity') as h then{
                  doseQuant.high as hi -> h.value = (hi.value);
                  doseQuant.high as hi -> h.unit = (hi.unit); 
                }"low";
              }"d";
            }"dosageRate";
            sub.rateQuantity as rateQuantity -> medRq.dosageInstruction = create('Dosage') as dosageInstruction1 then{
              rateQuantity.originalText as ot then{
                ot.reference -> dosageInstruction1.text;
              }"ot";
              rateQuantity -> dosageInstruction1.doseAndRate as dosageRate then{
                rateQuantity -> dosageRate.rate = create('Range') as d then{
                  rateQuantity -> d.low = create('SimpleQuantity') as l then{
                    rateQuantity.low as lo -> l.value = (lo.value); 
                    rateQuantity.low as lo -> l.unit = (lo.unit); 
                  }"low";
                  rateQuantity -> d.high = create('SimpleQuantity') as h then{
                    rateQuantity.high as hi -> h.value = (hi.value);
                    rateQuantity.high as hi -> h.unit = (hi.unit); 
                  }"low";
                }"d";
              }"qualcosa";
            }"dosageRate";
          }"Dosage";  
        }"doseQuant";
        sub -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication' ,medRq.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) then{
          sub.administrationUnitCode -> medication.form;
          sub.consumable as cons then{
            cons.manufacturedProduct as manuprod then{
              manuprod.manufacturedMaterial as manufact then{
                manufact.code -> medication.code;
              }"manuFact";
            }"manumat";
          }"cons";
       
          sub.entryRelationship as entryR then{
            entryR.observation as observation then{
                   observation.code where displayName='Grammatura' -> medication.ingredient as ingredient then{
                    sub.consumable as consumable then{
                            consumable.manufacturedProduct as manufacturedProduct then{
                                manufacturedProduct.manufacturedMaterial as manufacturedMaterial then{
                                    manufacturedMaterial.code as code -> ingredient.item = create('CodeableConcept') as value then CECodeableConcept(code,value) "CE";
                                }"material";
                            }"product";
                        }"consumable";
                        observation.value as value -> ingredient.strength as strength then{
                            value -> strength.numerator as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> strength.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                       }"strenght";
                    }"ingredient";
                    observation.code where displayName='Quantità nella Confezione' then{
                        observation.value as value -> medication.amount as amount then{
                            value -> amount.numerator  as numerator then{
                                value -> numerator.value = (value.value) "valueN";
                            } "numerator";
                            value -> amount.denominator as denominator then{
                                value -> denominator.value = 1 "valueD";
                            } "denominator";
                        }"amount";
                   }"quantita";
               }"obs";
          }"entryR";

         
          sub.participant as part -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'PUT',   e1.resource = create('Practitioner') as participant,  participant.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Participant/', uuid1), request.url = append('Participant/', uuid1) then{
            part.time as t -> medRq.authoredOn = create('dateTime') as date then TSDateTime(t,date)"authoredOn";
            part.participantRole as partRole then{

            
              partRole->participant.meta as meta then {
                partRole->meta.tag = create('Coding') as coding then {
                  partRole -> coding.system ='http://algoritmodiscoring'"system";
                  partRole -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaDimissione/participant'"code";
                }"coding";
              }"meta";
              partRole.id as id -> participant.identifier as identifier then {
                id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                id.extension as ext->identifier.value = ext;
                id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                id.root as r then {
                  id.extension as ext -> participant.id = (r +'-'+ ext) as uuid2,  e1.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), medRq.requester  = create('Reference') as reference,  reference.reference = ('https://example/Practitioner/' + %participant.id) "aut";
                }"r";
              }"identifier";
              partRole.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
              }"2.16.840.1.113883.2.9.4.3.2";
             
              partRole.playingEntity as playent then{
                playent.name -> participant.name;
              }"playent";
            }"partRole";
          }"participant";   
  
          sub.reference as ref then{
            ref.externalAct as external then{
              external.id -> medRq.identifier;
            }"external";
          }"ref";
  
          sub.entryRelationship as entryRelationship then{ 
            entryRelationship.supply as sup -> medRq.dispenseRequest as dispreq then {              
                sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                  sup.quantity as q -> quantity.value = (q.value);
                }"quantity";              
            }"sub";
  
           }"med";    
  
        }"admnistrationUnicode";
      }"sub";
    }"entry";
  }"medication";
}"sezioneesiste";
}
//-----------------------------------------------------------------------------------------------------------------------

//______1._____________Sections________________________

group ModalitadiTrasposto(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry1 then {
    src.entry as entry1 -> tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) then {
    entry1.act as act1  then Act(act1, patient,  enc , bundle) "act";
    }"entry1";
 }"entry";
}

group MotivoDellaVisita(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
 
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST', e2.resource = create('Observation') as observation,  observation.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "observation";
  }"entry";
 
}

group Triage(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  
  src.text as cdaText -> tgt.text as fhirText then {
    cdaText -> fhirText.status = 'generated' "narrativeStatus";
    cdaText as t -> fhirText.div = t "narrativeText";
  }"cdaText";
  src.entry as entry -> bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST',   e2.resource = create('Observation') as observation,  observation.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Observation/', uuid2), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
    entry.observation as obs then Observation(obs, patient ,enc ,observation, bundle) "observation";
  }"entry";
 
}

group InquadramentoClinicoIniziale(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter) {
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
  src.text as cdaText ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Observation') as observation,  observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' ,tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id), tgt.text as fhirText then {
    src.code -> observation.code;
    src where observation.statusCode.exists().not() then {
      src->observation.status ='final'"status";
    }"statuscode";
    src->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
    src->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
    cdaText->observation.note as note then{
      src.author as author then {
        author->bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'PUT', e2.resource = create('Practitioner') as practitioner then {
          author.assignedAuthor as assignedAuthor then {
            assignedAuthor->practitioner.meta as meta then {
              assignedAuthor->meta.tag = create('Coding') as coding then {
                assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                assignedAuthor -> coding.code ='ClinicalDocument/body/InquadramentoClinicoIniziale/author'"code";
              }"coding";
            }"meta";
            assignedAuthor.id as id -> practitioner.identifier as identifier then {
              id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
              id.extension as ext->identifier.value = ext;
              id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
              id.root as r then {
                id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid2,  e2.fullUrl = append('https://example/Practitioner/', uuid2), request.url = append('Practitioner/', uuid2), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
              }"r";
            }"identifier";
            assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
              id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
            }"2.16.840.1.113883.2.9.4.3.2";
            assignedAuthor.assignedPerson as person then {
              person.name -> practitioner.name;
            }"name";
          }"assignedAuthor";
        }"practitioner";
        author.time as t->note.time= create('dateTime') as value then TSDateTime(t, value);
      }"Author";
      cdaText as t ->note.text = t "reference";
    }"reference";
  }"cdaText";
    
  //START sottosections
  src.component as component then {
    component.section as sottosection then{
      sottosection -> tgt.section as section then {
        //1. Anamnesi Narrativa-------------------------------------------------------------------------------------------------------------------------------------------
        sottosection.code where(code = '11329-0') -> section.code;
        sottosection.code as code1 where(code = '11329-0')  then {
          src where sottosection.entry.exists().not() then {
          sottosection.title as t-> section.title= (t.dataString);
          sottosection.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as observation,  observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
            cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> observation.code;
            src where observation.statusCode.exists().not() then {
              src->observation.status ='final'"status";
            }"statuscode";
              cdaText -> observation.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'PUT',   e9.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/EsameObiettivo/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Practitioner/', uuid9), request.url = append('Practitioner/', uuid9), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "autore";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"where";
        // Anamnesi Strutturata-----------------------------------------------------------------------------------------------------------------------------------------
           sottosection.entry as entry1 then {
            entry1.observation as obs then {
              obs.code where (code = '75326-9')  then {
              obs->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Condition') as condition, condition.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Condition/', uuid1), request.url = 'Condition', section.entry = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then {
              obs.code -> condition.category;
              obs->condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              obs->condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
              obs.statusCode as status where (code='completed') -> condition.verificationStatus as status2 then {
                status ->  status2.coding as status3 then{
                  status -> status3.code ='confirmed' "finald";
                  status -> status3.system='http://terminology.hl7.org/CodeSystem/condition-ver-status'"system";
                }"st3";
              }"status";

              // blocco Narrativo
              sottosection.text as cdaText1 -> condition.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'PUT',   e5.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/Anamnesi/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid5,  e5.fullUrl = append('https://example/Practitioner/', uuid5), request.url = append('Practitioner/', uuid5), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";

              obs.effectiveTime as effective1 then {
                effective1 where effective1.low.exists() or effective1.high.exists() then{
                  effective1  -> condition.onset=create('Period') as periodonset then IVLTSPeriod(effective1,periodonset)"onsetperiod";
                  }"ef";
                }"effectivetime1";
              obs.effectiveTime as effectiveTime -> condition.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "onsetDateTime";
              obs.value:INT as int->ob.value=(int.value) "value";
              obs.value:BL as boolean ->ob.value=(boolean.value)"boolean";
              obs.value:ST as value->ob.value =create('string'),ob.value= (value.dataString) "value";
              obs.value:CE as val then{
                val->ob.value =create('CodeableConcept') as ce then {
                  val.originalText as originalText then{
                    originalText.reference as reference-> ce.text=reference;
                  }"originltext";
                  val -> ce.coding as coding then {
                    val.code as code -> coding.code = cast(code, 'string');
                    val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                    val.displayName as display -> coding.display = cast(display, 'string');
                    val.codeSystemVersion as version -> coding.version = cast(version, 'string');
                  }"code";
                  val.translation as translation -> ce.coding as coding then {
                    translation.code as code -> coding.code = cast(code, 'string');
                    translation.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                    translation.displayName as display -> coding.display = cast(display, 'string');
                    translation.codeSystemVersion as version -> coding.version = cast(version, 'string');
                    translation.qualifier as qualifier then{
                      qualifier.value as value -> ce.coding as coding then {
                        value.code as code -> coding.code = cast(code, 'string');
                        value.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        value.displayName as display -> coding.display = cast(display, 'string');
                        value.codeSystemVersion as version -> coding.version = cast(version, 'string');
                      }"value";
                    }"qualifier";
                  }"translation";
                }"coding";
              }"val";
              obs.value:CD as val then{
                val->condition.code =create('CodeableConcept') as ce then {
                    val.originalText -> ce.text;
                      val -> ce.coding as coding then {
                      val.code as code -> coding.code = cast(code, 'string');
                      val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                      val.displayName as display -> coding.display = cast(display, 'string');
                      }"coding";  
                   }"Ce"; 
                }"Value";
              obs.entryRelationship as entriRel then {
                entriRel -> condition.evidence = create('BackboneElement') as evidence then {
                entriRel.observation as observation2 then {
                  observation2.code as code then {
                  code.code where (code.code = '89261-2') then { 
                    obs -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST', e1.resource = create('Observation') as observation, observation.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Observation/', uuid1), request.url = 'Observation' then {
                    entriRel -> evidence.detail  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) "ref";
                    observation2.code -> observation.code;
                    observation2 where observation.statusCode.exists().not() then {
                      observation2->observation.status ='final'"status";
                      }"statuscode";            
                    observation2.text as text -> observation.note = create('Annotation') as note then{
                      text.reference as ref -> note.text = (ref.value) "val";
                    }"Annontation"; 
                    obs->observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                    obs->observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";                            
                    observation2.statusCode as statusc where (code='completed') -> ob.status ='final';
                    observation2.statusCode as statusc where (code='active') -> ob.status ='registered';
                    observation2.statusCode as statusc where (code='aborted') -> ob.status ='cancelled';
                    observation2.statusCode as statusc where (code='suspended') -> ob.status ='partial';

                    observation2.value:INT as int->observation.value=(int.value) "value";
                    observation2.value:BL as boolean ->observation.value=(boolean.value)"boolean";
                    observation2.value:ST as value->observation.value =create('string'),observation.value= (value.dataString) "value";
                    observation2.effectiveTime as effectiveTime -> observation.effective = create('dateTime') as value then TSDateTime(effectiveTime, value) "value2";
                    observation2 where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                      observation2.effectiveTime as eff-> observation.effective=create('Period') as period then IVLTSPeriod(eff,period);
                      }"where";
                    observation2.value:PQ as val then{
                      val->observation.value = create('Quantity') as quantity then {
                        val.value as value->quantity.value = value;
                        val.unit as unit-> quantity.unit = unit "unit";
                      }"quantity";
                    }"valueQuantity";
                    observation2.value:CE as val then{
                      val->observation.value =create('CodeableConcept') as ce then {
                        
                        val.originalText -> ce.text;
                        val -> ce.coding as coding then {
                        val.code as code -> coding.code = cast(code, 'string');
                        val.codeSystem as system -> coding.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        val.displayName as display -> coding.display = cast(display, 'string');
                        }"coding";  
                      }"Ce"; 
                    }"Value"; 
                   }"obser";
                  }"whereDecorsoClinico";
                  }"code";
                }"Observation2";
              }"evidence";
           }"EntryRelationship1";
           obs.entryRelationship as entriRel  then{
            entriRel.observation as observation2 then {
              observation2.code as code then {
               code.code where (code.code ='33999-4') then{
                 observation2 -> condition.clinicalStatus = create('CodeableConcept') as status then {
                  observation2.text as text then{
                    text.reference as refstat -> status.text=(refstat.value)"statref";
                    }"textstat";
                   observation2  -> status.coding = create('Coding') as coding then{
                     observation2.value as value then {
                       value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                       value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"inactive";
                       value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                       value.displayName as display -> coding.display = cast(display, 'string');
                       }"value1";
                     }"coding";
                   }"code";                       
                 }"whereDecorsoClinico"; 
               }"codestatus";  
              }"observationstatus"; 
             }"entryrelationshipstatus";           
           }"condition";
          } "89261-2";
        }"entryobservation1";



         //Anamnesi Familiare---------------------------------------------------------------------------------------------------------------------------------------------

        entry1.organizer as organizer then {
          organizer.code where (code = '10157-6')  then {
              organizer->bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST', e4.resource = create('FamilyMemberHistory') as FamilyMemberHistory, FamilyMemberHistory.id = uuid() as uuid5,  e4.fullUrl = append('https://example/FamilyMemberHistory/', uuid5), request.url = 'FamilyMemberHistory', section.entry = create('Reference') as reference,  reference.reference = ('https://example/FamilyMemberHistory/' + %FamilyMemberHistory.id) then{
              organizer.effectiveTime as effective then {
                effective.value as eff-> FamilyMemberHistory.date= create('dateTime') as value then TSDateTime(eff, value) "date";
              }"effective"; 
              organizer->FamilyMemberHistory.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              organizer.subject as subject then {
                  subject.relatedSubject as relatedSubject then {
                  relatedSubject.code -> FamilyMemberHistory.relationship "relationship";
                  relatedSubject.subject as subject -> FamilyMemberHistory.sex as sex then {
                      subject.administrativeGenderCode as administrativeGenderCode -> sex.coding as coding then {
                          administrativeGenderCode.code as code-> coding.code = translate(code, '#AdministrativeGender', 'code') "gender";
                          administrativeGenderCode-> coding.system = 'http://hl7.org/fhir/administrative-gender' "system";
                          }"coding";
                      }"subject1";
                  }"relatedSubject";
              }"subject";

              // blocco Narrativo
              sottosection.text as cdaText1 -> FamilyMemberHistory.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'PUT',   e7.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/Anamnesi/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid7,  e7.fullUrl = append('https://example/Practitioner/', uuid7), request.url = append('Practitioner/', uuid7), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";

              organizer.component as component -> FamilyMemberHistory.condition as condition then{
                  component.observation as observation then{
                      observation.code -> condition.code "code";
                      observation.text as text -> FamilyMemberHistory.note as note then{
                          text.reference as reference -> note.text = (reference.value) "value";
                      }"reference";
                      observation.statusCode -> FamilyMemberHistory.status;
                      observation.value -> condition.outcome "codeable";
                      observation.entryRelationship as entryRelationship then{
                      entryRelationship.observation as obsservation1 then{
                          obsservation1.code as code then {
                          code.code where (code.code ='35267-4') then{
                          obsservation1.value as value -> condition.onset = create('Age') as Age then {
                                      value.value as valueAge -> Age.value = valueAge "age";
                                      value.unit as unit -> Age.code = unit "unit";
                                      value.unit as unit -> Age.unit = unit "unit";
                                      value -> Age.system = 'http://unitsofmeasure.org' "system";
                              } "value";
                          }"insorgenza";
                      }"code";
                      obsservation1.code as code then {
                          code.code where (code.code ='39016-1') then{
                          obsservation1.value as value -> FamilyMemberHistory.deceased = create('Age') as Age then {
                                      value.value as valueAge -> Age.value = valueAge "age";
                                      value.unit as unit -> Age.code = unit "unit";
                                      value.unit as unit -> Age.unit = unit "unit";
                                      value -> Age.system = 'http://unitsofmeasure.org' "system";
                                  } "value";
                               }"deceased";
                           }"code";
                         }"obser";
                      }"EntryRel";
                      observation where observation.effectiveTime.exists() then {
                        observation.effectiveTime as effectiveTime -> FamilyMemberHistory.condition = create('BackboneElement') as condition then {
                             effectiveTime -> condition.onset = create('Period') as period then{
                                 effectiveTime -> period.start = create('dateTime') as start then TSDateTime(effectiveTime,start) "val";                           
                                }"efft";
                                observation.code -> condition.code "code";
                                observation.value -> condition.outcome "codeable";
                            }"effttemp";
                        }"cont";
                   }"observationCondition";
                 }"component";
              }"organizer";
            }"10157-6";
          }"observation1";
       }"subsection1";
    }"11329-0";
       

        //2. Esame Obiettivo Narrativa-----------------------------------------------------------------------------------------------------------------------------------
        sottosection.code where(code = '29545-1') -> section.code;
        sottosection.code as code1 where(code = '29545-1')  then {
          sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as observation,  observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %observation.id) then {
            cdaText -> observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> observation.code;
            sottosection where observation.statusCode.exists().not() then {
              sottosection -> observation.status ='final'"status";
            }"statuscode";
            cdaText -> observation.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'PUT',   e9.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/EsameObiettivo/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Practitioner/', uuid9), request.url = append('Practitioner/', uuid9), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "autore";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizioneesameObiettivo";
      
        //3. Terapia Farmacologica all'ingresso Narrativa --------------------------------------------------------------------------------------------------------------
        sottosection.code where(code = '42346-7') -> section.code; 
        sottosection.code as code1 where(code = '42346-7')  then {
        sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText ->bundle.entry as e10, e10.request = create('BackboneElement') as request, request.method = 'POST', e10.resource = create('MedicationStatement') as medicStatement,  medicStatement.id = uuid() as uuid10,  e10.fullUrl = append('https://example/MedicationStatement/', uuid10), request.url = 'MedicationStatement', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationStatement/' + %medicStatement.id) then {
          cdaText -> medicStatement.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
           sottosection where medicStatement.statusCode.exists().not() then {
              sottosection->medicStatement.status ='completed'"status";
            }"statuscode";
            cdaText ->  medicStatement.medication =create('CodeableConcept') as medication then {
              cdaText as txt -> medication.text=txt "text";
            }"medication";
            cdaText -> medicStatement.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'PUT',   e11.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/TerapiaFarmacologicaIngresso/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid11,  e11.fullUrl = append('https://example/Practitioner/', uuid11), request.url = append('Practitioner/', uuid11), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizioneterapiaingresso";

        //4. Allergie
        sottosection.code where(code = '48765-2') -> section.code;
        sottosection.code as code1 where(code = '48765-2')  then {
          sottosection.title as t-> section.title= (t.dataString);
          // Allergia Narrativa-------------------------------------------------------------------------------------------------------------------------------------------
          src where sottosection.entry.exists().not() then {
            sottosection.title as t-> section.title= (t.dataString);
            sottosection.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('AllergyIntolerance') as AllergyIntolerance,  AllergyIntolerance.id = uuid() as uuid8,  e8.fullUrl = append('https://example/AllergyIntolerance/', uuid8), request.url = 'AllergyIntolerance', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %AllergyIntolerance.id) then {
              cdaText -> AllergyIntolerance.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              cdaText -> AllergyIntolerance.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
              
              cdaText -> AllergyIntolerance.clinicalStatus = create('CodeableConcept') as status then {
                cdaText  -> status.coding = create('Coding') as coding then{
                  cdaText -> coding.code = 'active'"active";
                  cdaText  -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                  cdaText  -> coding.display = 'active'"active";
                 }"coding";
              }"clinicalStatus";
              cdaText -> AllergyIntolerance.note as note then{
              cdaText as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'PUT',   e9.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/EsameObiettivo/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid9,  e9.fullUrl = append('https://example/Practitioner/', uuid9), request.url = append('Practitioner/', uuid9), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "autore";
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"reference";
            }"cdaText";
          }"where";
           // Allergia Strutturata----------------------------------------------------------------------------------------------------------------------------------------
          sottosection.entry as entry1 -> bundle.entry as e12, e12.request = create('BackboneElement') as request, request.method = 'POST',   e12.resource = create('AllergyIntolerance') as allergy,  allergy.id = uuid() as uuid12,  e12.fullUrl = append('https://example/AllergyIntolerance/', uuid12), request.url = 'AllergyIntolerance' ,section.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergy.id) then {
            src -> allergy.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> allergy.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
            entry1.act as actallint then {
              actallint.effectiveTime as effectiveTime -> allergy.onset = create('dateTime') as value then TSDateTime(effectiveTime, value) "onsetDateTime";
              actallint where effectiveTime.low.exists() or effectiveTime.high.exists() then {
                actallint.effectiveTime as eff-> allergy.onset=create('Period') as period then IVLTSPeriod(eff,period)"onsetPeriod";
              }"where";
             //mapping note
              sottosection.text as cdaText1 -> allergy.note as note then {
                cdaText1 as t ->note.text =t "reference";
                sottosection.author as authors then {
                  authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                  authors.assignedAuthor as assignedAuthor -> bundle.entry as e13, e13.request = create('BackboneElement') as request, request.method = 'PUT',   e13.resource = create('Practitioner') as practitioner then{
                    assignedAuthor->practitioner.meta as meta then {
                      assignedAuthor->meta.tag = create('Coding') as coding then {
                        assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                        assignedAuthor -> coding.code ='ClinicalDocument/body/Allergie/author'"code";
                      }"coding";
                    }"meta";
                    assignedAuthor.id as id -> practitioner.identifier as identifier then {
                      id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                      id.extension as ext->identifier.value = ext;
                      id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                      id.root as r then {
                        id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid13,  e13.fullUrl = append('https://example/Practitioner/', uuid13), request.url = append('Practitioner/', uuid13), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id);
                      }"r";
                    }"identifier";
                    assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                      id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                    }"2.16.840.1.113883.2.9.4.3.2";
                    assignedAuthor.assignedPerson as person then {
                      person.name -> practitioner.name;
                    }"assignedPerson";
                  }"assighedAuthor";
                }"author";
              }"cdaText1";
              actallint.entryRelationship as entryact then {
                entryact.observation as entryobs then {
                  entryobs.value as code then{
                    code.code as code1-> allergy.type = translate(code1,'#AllergyTypeMap','code') "type";
                    code.code as code2 -> allergy.category = translate(code2,'#AllergyCategoryMap','code') "category";  
                  }"code";
              
                  entryobs.participant as partic then {
                    partic.participantRole as pratRole then {
                      pratRole.playingEntity as pratent then {
                        pratent -> allergy.reaction = create('BackboneElement') as reaction then{
                          pratent.code -> reaction.substance "subs";
                          entryobs.entryRelationship as entryobs1 where (typeCode='MFST') then {
                            entryobs1.observation as entobs then {
                              entobs.effectiveTime as eff  then{
                                eff.low as l -> reaction.onset =create('dateTime') as value then TSDateTime(l,value);
                              }"eff";
                              entobs.value->reaction.manifestation "manifest";
                            }"entryobservation";
                          }"entryRelationship";
                        }"reaction";  
                      }"playingEntity";
                    }"participantRole";
                  }"participant";
          
                  entryobs.entryRelationship as entryobs2 then {
                    entryobs2.observation as entobs then {
                      entobs.code as code where (code='SEV') then {
                        entobs.value as value then{
                          value.code where(value.code = 'M') ->allergy.criticality = 'unable-to-assess'"active";
                          value.code where(value.code = 'L') ->allergy.criticality = 'low'"active"; 
                          value.code where(value.code = 'H') ->allergy.criticality = 'high'"active"; 
                        }"value";
                      }"severity";
                    }"entryobservation2";
                  }"entryrelationship2";

                  entryobs.entryRelationship as entryobs3 then {
                    entryobs3.observation as entobs then {
                      entobs.code as code where (code='33999-4') then {
                        // entobs.value->allergy.clinicalStatus "cstatus";
                        entobs -> allergy.clinicalStatus = create('CodeableConcept') as status then {
                          entobs  -> status.coding = create('Coding') as coding then{
                            entobs.value as value then{
                              value.code  where (value.code = 'LA16666-2')-> coding.code = 'active'"active";
                              value.code  where (value.code = 'LA18632-2')-> coding.code = 'inactive'"active";
                              value.codeSystem as system -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                              // value->coding.version='ConditionClinicalStatusCodes 4.0.1'"version";
                              value.displayName as display -> coding.display = cast(display, 'string');
                            }"value1";
                          }"coding";
                        }"clinicalStatus";
                      }"33999-4";
                    }"entryobservation3";
                  }"entryrelationship3";
          
                  entryobs.entryRelationship as entryobs4 then {
                    entryobs4.act as entact then {
                      entact.text as actext then {
                        actext.reference as reftxt -> allergy.note = create('BackboneElement') as note  then {
                          reftxt as ref->note.text= (ref.value) "notxt";
                        }"notetxt";
                      }"txtact";
                    }"entryact1";
                  }"entryrelationshi4";
                }"entryobservation";
              }"entryrelationshipact";
            }"entryact2";
          }"allergy";
        }"condizioneallergie";  

        //5. Problemi aperti
        sottosection.code where(code = '11450-4') -> section.code;
        sottosection.code as code1 where(code = '11450-4')  then {
          sottosection.title as t -> section.title = (t.dataString);
          sottosection.text as cdaText ->bundle.entry as e14, e14.request = create('BackboneElement') as request, request.method = 'POST', e14.resource = create('Condition') as condition,  condition.id = uuid() as uuid14,  e14.fullUrl = append('https://example/Condition/', uuid14), request.url = 'Condition', section.entry  = create('Reference') as reference,  reference.reference = ('https://example/Condition/' + %condition.id) then {
              
            cdaText -> condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            cdaText -> condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            sottosection.code -> condition.code;
            cdaText -> condition.note as note then{
              cdaText as t ->note.text =t "reference";
              sottosection.author as authors then {
                authors.time as time -> note.time = create('dateTime') as value then TSDateTime(time, value) "timeAuthor";
                authors.assignedAuthor as assignedAuthor -> bundle.entry as e15, e15.request = create('BackboneElement') as request, request.method = 'PUT',   e15.resource = create('Practitioner') as practitioner then{
                  assignedAuthor->practitioner.meta as meta then {
                    assignedAuthor->meta.tag = create('Coding') as coding then {
                      assignedAuthor -> coding.system ='http://algoritmodiscoring'"system";
                      assignedAuthor -> coding.code ='ClinicalDocument/body/ProblemiAperti/author'"code";
                    }"coding";
                  }"meta";
                  assignedAuthor.id as id -> practitioner.identifier as identifier then {
                    id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
                    id.extension as ext->identifier.value = ext;
                    id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
                    id.root as r then {
                      id.extension as ext -> practitioner.id = (r +'-'+ ext) as uuid15,  e15.fullUrl = append('https://example/Practitioner/', uuid15), request.url = append('Practitioner/', uuid15), note.author =create('Reference') as reference, reference.reference = ('https://example/Practitioner/' + %practitioner.id) "aut";
                    }"r";
                  }"identifier";
                  assignedAuthor.id as id where (root='2.16.840.1.113883.2.9.4.3.2') then {
                    id.extension as ext-> request.url = append('Practitioner?identifier=',ext)"UUID";
                  }"2.16.840.1.113883.2.9.4.3.2";
                  assignedAuthor.assignedPerson as person then {
                    person.name -> practitioner.name;
                  }"assignedPerson";
                }"assighedAuthor";
              }"author";
            }"reference";
          }"cdaText";
        }"condizioneproblemiaperti";
      }"Sectionfhir";
    }"Sottosection";
  }"component";

}

//______2._____________ClinicalStatements________________________

group Act (source cda: Act, target pat : Patient, target enc : Encounter, target bundle : Bundle){
  cda.code as code -> enc.extension as extension2 then modeOfArrival(code, extension2);
  cda.participant as participant then {
    participant -> enc.participant as FhirParticipant then {
      participant as p -> FhirParticipant.type as type then { 
        p -> type.coding as coding then{
          p-> coding.code = (p.typeCode) "codice";
          p-> coding.system = 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' "system";
        } "codeType"; 
      }"type";
    }"fhirParticipant";
    participant.participantRole as participantRole -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',  e1.resource = create('PractitionerRole') as practitionerRole,  practitionerRole.id = uuid() as uuid1,  e1.fullUrl = append('https://example/PractitionerRole/', uuid1), request.url = 'PractitionerRole', enc.participant = create('BackboneElement') as participant1, participant1.individual = create('Reference') as referencepart, referencepart.reference =  ('https://example/PractitionerRole/' + %practitionerRole.id) then { 
      participantRole.code -> practitionerRole.code;
    }"participantrole";
  }"participant";
    
}



//______3._____________Extensions_DtType________________________

group modeOfArrival(source src: CE, target ext: Extension) {
 
  src -> ext.url = 'http://hl7.org/fhir/StructureDefinition/encounter-modeOfArrival' "url";
  src -> ext.value = create('Coding') as code1 then coding(src,code1)"coding";

}

group coding(source src : CE, target tgt : Coding)  {
  src.code as code  -> tgt.code = cast(code, 'string');
  src.codeSystem as system -> tgt.system = translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
  src.displayName as display -> tgt.display = cast(display, 'string');
  src.codeSystemVersion as version -> tgt.version = cast(version, 'string');
}
group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
  effectiveTime -> timing.repeat as r then{
    effectiveTime.period as p -> r.period = (p.value);
    effectiveTime.period as p -> r.periodUnit = (p.unit);  
  }"repeat";

}", "subType": "00"}}, "filename": "VerbaleProntoSoccorso_v2.4.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:16.594Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d1a091c057abd6ef9d0"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/PrescrizioneFarmaceutica", "version": "2.0", "template_id_root": ["2.16.840.1.113883.2.9.10.1.2.1"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/PrescrizioneFarmaceutica" = "PrescrizioneFarmaceutica"

conceptmap "AllergyTypeMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"

  prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

  s:OINT == t:intolerance
  s:ALG == t:allergy
  s:DALG == t:allergy
  s:EALG == t:allergy
  s:FALG == t:allergy
  s:NAINT == t:intolerance
  s:FNAINT == t:intolerance
  s:DNAINT == t:intolerance
  s:ENAINT == t:intolerance
  s:FINT == t:intolerance
  s:DINT == t:intolerance
  s:EINT == t:intolerance
}

conceptmap "AllergyCategoryMap" {

  prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
  prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

  s:DALG == t:medication
  s:EALG == t:enviroment
  s:FALG == t:food
  s:FNAINT == t:food
  s:DNAINT == t:medication
  s:ENAINT == t:enviroment
  s:FINT == t:food
  s:DINT == t:medication
  s:EINT == t:enviroment
}

conceptmap "AllergyCriticality" {

  prefix s = "https://art-decor.org/art-decor/decor-valuesets--hl7it-?id=2.16.840.1.113883.2.9.77.22.11.6"
  prefix t = "https://www.hl7.org/fhir/codesystem-allergy-intolerance-criticality.html"
  
  s:L == t:low
  s:H == t:high
  s:M == t:unable_to_assess
}


uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter',
    bundle.entry as e5, e5.request = create('BackboneElement') as request, request.method = 'POST',  e5.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid5,  e5.fullUrl = append('https://example/DocumentReference/', uuid5), request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
     cda.recordTarget as recordTarget then{
      recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
          id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
          id.extension as ext->identifier.value = ext;
          id.assigningAuthorityName as s ->  identifier.assigner as a,  a.display = s;
        }"record";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
      }"recPat";
     }"patient";
   } "ClinicalDocumentToBody";
  }

  group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";  
    cda.component as component then {
      component.structuredBody as body then {
        body ->bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Coverage') as coverage,  coverage.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Coverage/', uuid1), request.url = 'Coverage' then {
        body ->bundle.entry as e2, e2.request = create('BackboneElement') as request, request.method = 'POST',   e2.resource = create('MedicationRequest') as medRq,  medRq.id = uuid() as uuid1,  e2.fullUrl = append('https://example/MedicationRequest/', uuid1), request.url = 'MedicationRequest' then {
          
        body.component as component  then {
         //discretizzi il primo livello di component 
           component.section as srcSection then {
            srcSection.code where(code = '57827-8') -> composition.section as tgtSection  then ClinicalDocumentSectionEsenzioni(cda, srcSection, patient, tgtSection, bundle,encounter,coverage) "esenz";
          srcSection.code where(code = '57828-6') -> composition.section as tgtSection  then ClinicalDocumentSectionPrescrizioneFarmaceutica(cda, srcSection, patient, tgtSection, bundle,encounter,coverage,medRq) "prescfarm";
          srcSection.code where(code = '48767-8') -> composition.section as tgtSection then ClinicalDocumentSectionAnnotazioni(cda, srcSection, patient, tgtSection, bundle,encounter,medRq) "annot";
          srcSection.code where(code = '51851-4') -> composition.section as tgtSection  then ClinicalDocumentSectionMessaggioRegionale(cda, srcSection, patient, tgtSection, bundle,encounter,medRq) "messregg";
          srcSection.code where(code = '8716-3') -> composition.section as tgtSection   then ClinicalDocumentSectionParametriVitali(cda, srcSection, patient, tgtSection, bundle,encounter) "paramvit";
          srcSection.code where(code = '48765-2') -> composition.section as tgtSection  then ClinicalDocumentSectionAllergieaiFarmaci(cda, srcSection, patient, tgtSection, bundle,encounter) "allergfarm";
          srcSection.code where(code = '47420-5') -> composition.section as tgtSection  then ClinicalDocumentSectionStatoClinicoPaziente(cda, srcSection, patient, tgtSection, bundle,encounter) "statclinpaz";
           }"cov";  
        };
      }"medreq";
        }"coverage";
      } "body";
    };
  }
  group ClinicalDocumentSectionEsenzioni(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target coverage : Coverage){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.text as cdaText -> tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Coverage/' + %coverage.id), tgt.text as fhirText then {
      cdaText -> fhirText.status = 'generated' "narrativeStatus";
      cdaText as t -> fhirText.div = t "narrativeText"; 
       src.entry as srcse then {
        srcse.act as srcsec then {
        srcsec.code -> coverage.type;
        srcsec.code as srctxt then{
            srctxt-> coverage.type as typetxt then {
            srctxt.originalText as ref then {
              ref.reference as t then {
                t.value as l -> typetxt.text=l "reference";
              }"tcf";
            } "rfde";

            }"reftxt";
        }"origtxt";
        srcsec where coverage.status.exists().not() then {
            srcsec->coverage.status ='active'"status";
          }"statuscode";
          srcsec->coverage.beneficiary=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference"; 
          srcsec->coverage.payor=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";                          
         } "cdaText";
        }"secact";
      }"cff"; 
    }
       
      group ClinicalDocumentSectionPrescrizioneFarmaceutica(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target coverage : Coverage, target medRq : MedicationRequest){
        src.title as t -> tgt.title = (t.dataString);
        src.code -> tgt.code;
        src.text as cdaText ->tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id), tgt.text as fhirText then {
        src.id  ->medRq.identifier;  
        cdaText -> fhirText.status = 'generated' "narrativeStatus";
          cdaText as t -> fhirText.div = t "narrativeText"; 
          cdaText-> medRq.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
          cdaText-> medRq.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          cdaText -> medRq.status='active'"status";
          cdaText -> medRq.intent='order'"intent";
          src.entry as srcent then {
            srcent.substanceAdministration as subAdm then {

               subAdm.effectiveTime : IVL_TS as eff -> medRq.dosageInstruction = create('Dosage') as dosage then{
                    
                    subAdm -> dosage.timing = create('Timing') as tim then{
                      subAdm -> tim.repeat as repeat then{
                        eff -> repeat.bounds  =create('Period') as period then IVLTSPeriod(eff,period)"boundsperiod";
                        eff.width as width then {
                          width.value as v-> repeat.duration=v;
                          width.unit as u->repeat.durationUnit=u;
                        }"width";
                      }"repeat";
                     
                
                  
                }"timing";
              }"dosage";
              subAdm.effectiveTime as eff -> medRq.dosageInstruction = create('Dosage') as dosage then{
                subAdm -> dosage.timing = create('Timing') as tim then{
                 eff where eff.low.exists().not() and eff.high.exists().not()  then{
                   eff.value as v -> tim.event=create ('dateTime') as event then TSDateTime(v, event) "evnt";
                }"effct1";
            
              
            }"timing1";
          }"dosage1";
              
                subAdm.effectiveTime: PIVL_TS as effp -> medRq.dosageInstruction = create('Dosage') as dosage then{
                  effp -> dosage.timing = create('Timing') as timing then {
                  effp-> timing then periodTiming(effp,timing) "cod";
                  effp where effp.phase.exists() then {
                  effp.phase as phase -> timing.repeat as r then{
                    phase.low-> r.bounds =create('Period') as period then{
                      phase.low -> period.start "lo";
                    }"low";
                    phase.width as wid then {
                      wid.value as v->r.duration=v "vals";
                      wid.unit as u-> r.durationUnit=u "unit";
                    }"dur";
                  }"rep";
                  }"phase";
                }"timing";
                  }"eff";

                  subAdm.effectiveTime: EIVL_TS as effe -> medRq.dosageInstruction = create('Dosage') as dosage then{
                    effe -> dosage.timing = create('Timing') as timing then {
                    effe->timing.repeat as r then{
                    effe.event->r.when;
                    effe.offset as offset then{
                    offset.low as v then{
                     v.value as o ->r.offset=o "barabar";
                        }"offs";
                       }"poi";
                      }"lkj";
                     }"ghj";
                    }"eff";


              subAdm.doseQuantity as doseQuant-> medRq.dosageInstruction = create('Dosage') as dosage then{
                doseQuant.originalText as ot then{
                  ot.reference -> dosage.text;
                  }"ot";
                doseQuant -> dosage.doseAndRate as dosageRate then{
                  doseQuant -> dosageRate.dose = create('Range') as d then{
                    doseQuant -> d.low = create('SimpleQuantity') as l then{
                      doseQuant.low as lo -> l.value = (lo.value); 
                      doseQuant.low as lo -> l.unit = (lo.unit); 
                    }"low";
                    doseQuant -> d.high = create('SimpleQuantity') as h then{
                      doseQuant.high as hi -> h.value = (hi.value);
                      doseQuant.high as hi -> h.unit = (hi.unit); 
                    }"low";
                  }"d";
                }"dosageRate";
              }"doseQuant";

              subAdm -> bundle.entry as e1, e1.request = create('BackboneElement') as request, request.method = 'POST',   e1.resource = create('Medication') as medication,  medication.id = uuid() as uuid1,  e1.fullUrl = append('https://example/Medication/', uuid1), request.url = 'Medication' ,medRq.medication  = create('Reference') as reference,  reference.reference = ('https://example/Medication/' + %medication.id) then{
                subAdm.consumable as cons then{
                  cons.manufacturedProduct as manuprod then{

                    manuprod.manufacturedLabeledDrug as manudrug then {
                      manudrug.code -> medication.code;
                      manudrug-> medication.identifier as medid then{
                        manudrug.name->medid.value;
                        }"idmedname";
                      manudrug.code as srctxt then{
                        srctxt-> medication.code as typetxt then {
                        srctxt.originalText as ref then {
                        ref.reference as reference then {
                          reference.value as l -> typetxt.text=l "reference";
                        }"tcf";
                      }"tcfg";
                        }"reftxtd";
                     }"origtxtd";
                    }"manudrug";

                    manuprod.manufacturedMaterial as manufact then{
                            manufact.code -> medication.code;
                            manufact.code as srctxt then{
                              srctxt-> medication.code as typetxt then {
                                srctxt.originalText as ref then {
                                  ref.reference as reference then {
                                    reference.value as l -> typetxt.text=l "reference";
                                  }"tcf";
                                }"tcfg";
                              }"reftxt";
                          }"origtxt";
                          manufact.ingredient  as ingredient -> medication.ingredient as ing then {
                           ingredient.quantity as quantity -> ing.strength = create('Ratio') as strength then EmedRTOPQPQRatio(quantity, strength) "strength";
                            manufact -> ing.item = create('CodeableConcept') as ingcode, ingcode.text = (%manufact.name.other)  "ingredientCode";
                            }"ingr";
                          manufact.formCode->medication.form;
                          manufact-> medication.identifier as medid then{
                       
                        }"transl";
                    }"manuFact";
                  }"manumat";
               }"cons";

               subAdm.entryRelationship as entryrel1 then{
                entryrel1.supply as sup -> medRq.dispenseRequest as dispreq then{
                  sup -> dispreq.quantity = create('SimpleQuantity') as quantity then{
                    sup.quantity as q -> quantity.value = (q.value);
                  }"quantity";  
                }"supply";
               }"entry1";

              subAdm.entryRelationship as entryrel2  where (typeCode='REFR') then{
                subAdm ->medRq.insurance = create('Reference') as reference,  reference.reference = ('https://example/Coverage/' + %coverage.id) then {
              entryrel2.act as act2-> coverage.costToBeneficiary as cost then {
                act2-> cost.value = create ('SimpleQuantity') as val then{
                  act2-> val.value='0' "bnm"; 
                }"beneficmoney";
                act2-> cost.exception as except then{
                act2.code->except.type; 
                  }"exept";
                 }"act2";
                }"Cover";
               }"entry2";

               subAdm.entryRelationship as entryrel3 where (typeCode='RSON') then{
                entryrel3.observation  as obs3 where (classCode='OBS')  then {
                obs3.code->medRq.reasonCode;
                  obs3.text as text then{
                   text -> medRq.reasonCode as ce then{
                    //text.reference as reference-> ce.text=reference;
                    text.reference as reference then {
                      reference.value as l -> ce.text=l "reference";
                    }"tcf";

                      }"originltext";
                   }"txt";
                 }"obs3"; 
               }"entry2";
               subAdm.entryRelationship as entryrel4 where (typeCode='SUBJ') then{
                entryrel4.observation  as obs3 -> medRq.substitution as sub then {
                    obs3.code as Code  -> sub.allowed=create('CodeableConcept') as allowed then CECodeableConcept(Code,allowed) "code";
                    obs3.entryRelationship as entry then {
                       entry.observation as obs4 then {
                         obs4.code->sub.reason;
                       }"obs4";
                    }"entry";
                    }"obs";
                   }"code";
                 
               
               subAdm.entryRelationship as entryrel2 where (typeCode='SUBJ') then{
                entryrel2.act  as act2 where (classCode='ACT') then {
                act2.text as text -> medRq.note as note then {
                  text.reference as t then{
                    t.value as l ->note.text=l "reference";
                  }"tcx";
                  }"reference";
                  }"obs3"; 
               }"entry2";

            }"subsadm";
          }"subadm";
    
        }"hnjh";
      }"xxx";
      }

        //------------Sezione Annotazioni-----------------------------------------------------------------------------------------------------------------------------------------     
        group ClinicalDocumentSectionAnnotazioni(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target medRq : MedicationRequest){
              src.title as t -> tgt.title = (t.dataString);
              src.code -> tgt.code;
              src.text as cdaText -> tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id), tgt.text as fhirText then {
                cdaText -> fhirText.status = 'generated' "narrativeStatus";
                cdaText as t -> fhirText.div = t "narrativeText";  
                src.entry as entry then {
                  entry.act as act then { 
                      act.text as text -> medRq.note as note then {
                        text.reference as t then{
                          t.value as l ->note.text=l "reference";
                        }"tcx";
                        }"reference";
                      }"act";
                }"entry";
            }"entry";
          }
       
          //------------Sezione Messaggio Regionale-----------------------------------------------------------------------------------------------------------------------------------------     
        
          group ClinicalDocumentSectionMessaggioRegionale(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target medRq : MedicationRequest){
            src.title as t -> tgt.title = (t.dataString);
            src.code -> tgt.code;
            src.text as cdaText -> tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/MedicationRequest/' + %medRq.id) then {
              cdaText as text -> medRq.note as note then { 
                text as t ->note.text =t "reference";
              }"nota";
          }"entry";
        }

        //------------Sezione Parametri Vitali-----------------------------------------------------------------------------------------------------------------------------------------     
        group ClinicalDocumentSectionParametriVitali(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
          src.title as t -> tgt.title = (t.dataString);
          src.code -> tgt.code;
           src.text as cdaText -> bundle.entry as e8, e8.request = create('BackboneElement') as request, request.method = 'POST', e8.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid8,  e8.fullUrl = append('https://example/Observation/', uuid8), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
              src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
                  src.code -> Observation.code;
                  src where Observation.statusCode.exists().not() then {
                      src->Observation.status ='final'"status";
                      }"statuscode";
                    cdaText -> Observation.note as note then{
                    cdaText as t ->note.text =t "reference";
                  }"reference";
                }"nota";
        }
 //------------Sezione Allergie_Intolleranze-----------------------------------------------------------------------------------------------------------------------------------------     
 
  group ClinicalDocumentSectionAllergieaiFarmaci(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src -> bundle.entry as e9, e9.request = create('BackboneElement') as request, request.method = 'POST', e9.resource = create('AllergyIntolerance') as allergyIntolerance,  allergyIntolerance.id = uuid() as uuid9,  e9.fullUrl = append('https://example/AllergyIntolerance/', uuid9), request.url = 'AllergyIntolerance', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/AllergyIntolerance/' + %allergyIntolerance.id) then {
              src -> allergyIntolerance.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
              src -> allergyIntolerance.clinicalStatus = create('CodeableConcept') as status then {
                src -> status.text = 'string' "text";
                src -> status.coding = create('Coding') as coding then{
                  src -> coding.code = 'active'"active";
                  src -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
                }"coding";
              }"allergy";
              src.text as cdaText -> allergyIntolerance.note as note then{
              cdaText as t ->note.text =t "reference";
            }"reference";
          }"nota";
    }

 //------------Sezione Stato Clinico del Paziente----------------------------------------------------------------------------------------------------------------------------------------     
 
 group ClinicalDocumentSectionStatoClinicoPaziente(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter){
  src.title as t -> tgt.title = (t.dataString);
  src.code -> tgt.code;
   src.text as cdaText -> bundle.entry as e7, e7.request = create('BackboneElement') as request, request.method = 'POST', e7.resource = create('Observation') as Observation,  Observation.id = uuid() as uuid7,  e7.fullUrl = append('https://example/Observation/', uuid7), request.url = 'Observation', tgt.entry  = create('Reference') as reference,  reference.reference = ('https://example/Observation/' + %Observation.id) then {
      src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
      src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
          src.code -> Observation.code;
          src where Observation.statusCode.exists().not() then {
              src->Observation.status ='final'"status";
              }"statuscode";
            cdaText -> Observation.note as note then{
            cdaText as t ->note.text =t "reference";
          }"reference";
        }"nota";
}
       group periodTiming(source effectiveTime: PIVL_TS, target timing: Timing){
        effectiveTime -> timing.repeat as r then{
          effectiveTime.period as p -> r.period = (p.value); 
          effectiveTime.period as p -> r.periodUnit = (p.unit);   
        }"repeat";
      }


      group EmedRTOPQPQRatio(source src : RTO_PQ_PQ, target tgt : Ratio) {
        src.numerator as numerator -> tgt.numerator as targetNumerator then EmedPQQuantity(numerator, targetNumerator) "numerator";
        src.denominator as denominator -> tgt.denominator as targetDenominator then EmedPQQuantity(denominator, targetDenominator) "denominator"; 
      }

      group EmedPQQuantity(source src : PQ, target tgt : Quantity) {
        src.value as value -> tgt.value = value;
        src.unit as unit -> tgt.code = unit;
        src.unit as unit -> tgt.system = ('http://fhir.ch/ig/ch-emed/ValueSet/UnitCode'.resolve().compose.include.where(concept.where(code=%unit)).system) "unit";
        src.unit as unit -> tgt.unit = ('http://fhir.ch/ig/ch-emed/ValueSet/UnitCode'.resolve().compose.include.concept.where(code=%unit).display) "unit";
      }", "subType": "00"}}, "filename": "PrescrizioneFarmaceutica_v2.0.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:18.521Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}},{"_id": {"$oid": "64ba8d1b091c057abd6ef9d1"}, "uri": "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/PrescrizioneSpecialistica", "version": "2.0", "template_id_root": ["2.16.840.1.113883.2.9.10.1.2.2"], "content": {"$binary": {"base64": "map "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/PrescrizioneSpecialistica" = "PrescrizioneSpecialistica"

conceptmap "OBSstatus" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-statusCode"
    prefix t = "http://hl7.org/fhir/observation-status"

    s:completed == t:final
    s:active == t:registered
    s:aborted == t:cancelled
    s:suspended == t:partial
  }

  conceptmap "priority" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-ActPriority"
     prefix t = "http://hl7.org/fhir/ValueSet/request-priority"
   
     s:R == t:routine
     s:P == t:asap
     s:UR == t:urgent
     s:EM == t: stat
     s:S == t: stat
     s:A == t:asap
     s:CR == t:routine
     s:EL == t:routine
     s:p == t: stat
     s:PRN == t:routine
     s:RR == t:asap
     s:T == t:urgent
     s:UD == t:routine

    
   }

  conceptmap "cm-v3-administrative-gender" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-AdministrativeGender"
    prefix t = "http://hl7.org/fhir/ValueSet/administrative-gender"
  
    s:M == t:male
    s:F == t:female
  }
  conceptmap "AllergyTypeMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:OINT == t:intolerance
    s:ALG == t:allergy
    s:DALG == t:allergy
    s:EALG == t:allergy
    s:FALG == t:allergy
    s:NAINT == t:intolerance
    s:FNAINT == t:intolerance
    s:DNAINT == t:intolerance
    s:ENAINT == t:intolerance
    s:FINT == t:intolerance
    s:DINT == t:intolerance
    s:EINT == t:intolerance
  }
  conceptmap "AllergyCategoryMap" {
    prefix s = "http://terminology.hl7.org/ValueSet/v3-type"
    prefix t = "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical"

    s:DALG == t:medication
    s:EALG == t:enviroment
    s:FALG == t:food
    s:FNAINT == t:intolerance
    s:DNAINT == t:medication
    s:ENAINT == t:enviroment
    s:FINT == t:food
    s:DINT == t:medication
    s:EINT == t:enviroment
  }

conceptmap "CricalityMap" {
    prefix s = "http://terminology.hl7.org/CodeSystem/v3-ObservationValue"
    prefix t = "http://hl7.org/fhir/allergy-intolerance-criticality"

    s: M == t: low
    s: H == t: high
    s: L == t: low
}

uses "http://hl7.org/fhir/cda/StructureDefinition/ClinicalDocument" alias ClinicalDocument as source
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedAuthor" alias AssignedAuthor as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssignedEntity" alias AssignedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AssociatedEntity" alias AssociatedEntity as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/CustodianOrganization" alias CustodianOrganization as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/OrganizationPartOf" alias OrganizationPartOf as queried
uses  "http://hl7.org/fhir/cda/StructureDefinition/Organization" alias rapresentedOrganization as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/Section" alias Section as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/PatientRole" alias PatientRole as queried
uses "http://hl7.org/fhir/cda/StructureDefinition/AD" alias AD as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Composition" alias Composition as produced
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/Encounter" alias Encounter as produced
uses "http://hl7.org/fhir/StructureDefinition/Person" alias Patient as produced
uses "http://hl7.org/fhir/StructureDefinition/List" alias List as produced
uses "http://hl7.org/fhir/StructureDefinition/Practitioner" alias Practitioner as produced
uses "http://hl7.org/fhir/StructureDefinition/Organization" alias Organization as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as produced
uses "http://hl7.org/fhir/cda/StructureDefinition/IVL-PQ" alias IVL_PQ as source
uses "http://hl7.org/fhir/cda/StructureDefinition/PQ" alias PQ as source
uses "http://hl7.org/fhir/StructureDefinition/SimpleQuantity" alias SimpleQuantity as target


imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes"
imports "http://salute.gov.it/ig/cda-fhir-maps/StructureMap/FULLHEADER"

group CdaToBundle(source cda : ClinicalDocument, target bundle : Bundle) {
    cda ->  bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('Composition') as composition,  composition.id = uuid() as uuid1,  e.fullUrl = append('https://example/Composition/', uuid1), request.url = 'Composition',  bundle.entry as e2, e2.request = create('BackboneElement') as requestPAT, requestPAT.method = 'PUT', e2.resource = create('Patient') as patient,  patient.id = uuid() as uuid2,  e2.fullUrl = append('https://example/Patient/', uuid2), bundle.entry as e3, e3.request = create('BackboneElement') as request, request.method = 'POST',  e3.resource = create('Encounter') as encounter,  encounter.id = uuid() as uuid3,  e3.fullUrl = append('https://example/Encounter/', uuid3),request.url = 'Encounter', bundle.entry as e4, e4.request = create('BackboneElement') as request, request.method = 'POST',  e4.resource = create('DocumentReference') as DocumentReference,  DocumentReference.id = uuid() as uuid4,  e4.fullUrl = append('https://example/DocumentReference/', uuid4),request.url = 'DocumentReference' then {
    cda then ClinicalDocumentToBundle(cda, patient, composition, encounter, bundle, DocumentReference) "cdatobundle";
    cda.recordTarget as recordTarget then{
        recordTarget.patientRole as patient then{
        patient.id as id -> patient.identifier as identifier then {
        id.root as r ->identifier.system= translate(r, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri') "root1";
        id.extension as ext1 -> identifier.value = ext1 "value";
        id.assigningAuthorityName as s -> identifier.assigner as a, a.display = s;
        }"idfr";
        patient.id as id where (root='2.16.840.1.113883.2.9.4.3.2') or (root='2.16.840.1.113883.2.9.4.3.7')
        or (root='2.16.840.1.113883.2.9.4.3.3') or(root='2.16.840.1.113883.2.9.4.3.17')  or (root = '2.16.840.1.113883.2.9.4.3.18') or (root = '2.16.840.1.113883.2.9.2.10.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.20.4.1.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.41.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.42.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.50.4.1.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.70.4.1.1')  or (root = '2.16.840.1.113883.2.9.2.80.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.90.4.1.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1.1') or (root = '2.16.840.1.113883.2.9.2.120.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.130.4.1.1') or (root = '2.16.840.1.113883.2.9.2.140.4.1.1') or (root = '2.16.840.1.113883.2.9.2.150.4.1.1') or (root = '2.16.840.1.113883.2.9.2.160.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.170.4.1.1') or (root = '2.16.840.1.113883.2.9.2.180.4.1.1') or (root = '2.16.840.1.113883.2.9.2.190.4.1.1') or (root = '2.16.840.1.113883.2.9.2.200.4.1.1')
        or (root = '2.16.840.1.113883.2.9.2.10.4.1') or (root = '2.16.840.1.113883.2.9.2.20.4.1') or (root = '2.16.840.1.113883.2.9.2.30.4.1') or (root = '2.16.840.1.113883.2.9.2.41.4.1')
        or (root = '2.16.840.1.113883.2.9.2.42.4.1') or (root = '2.16.840.1.113883.2.9.2.50.4.1') or (root = '2.16.840.1.113883.2.9.2.60.4.1') or (root = '2.16.840.1.113883.2.9.2.70.4.1')
        or (root = '2.16.840.1.113883.2.9.2.80.4.1') or (root = '2.16.840.1.113883.2.9.2.90.4.1') or (root = '2.16.840.1.113883.2.9.2.100.4.1') or (root = '2.16.840.1.113883.2.9.2.110.4.1')
        or (root = '2.16.840.1.113883.2.9.2.120.4.1')  or (root = '2.16.840.1.113883.2.9.2.130.4.1')  or (root = '2.16.840.1.113883.2.9.2.140.4.1')  or (root = '2.16.840.1.113883.2.9.2.150.4.1')
        or (root = '2.16.840.1.113883.2.9.2.160.4.1')  or (root = '2.16.840.1.113883.2.9.2.170.4.1')  or (root = '2.16.840.1.113883.2.9.2.180.4.1')  or (root = '2.16.840.1.113883.2.9.2.190.4.1')
        or (root = '2.16.840.1.113883.2.9.2.200.4.1') or (root='2.16.840.1.113883.2.9.4.3.15')  then {
          id.extension as ext -> requestPAT.url = append('Patient?identifier=',ext) "UUID";
          }"ext";
        }"recPat";
    }"patient";
   } "ClinicalDocumentToBody";
  }
  
group ClinicalDocumentToBundle(source cda : ClinicalDocument, target patient : Patient, target composition : Composition, target encounter : Encounter, target bundle : Bundle, target DocumentReference : DocumentReference) {
    cda -> bundle.id = uuid() "id";
    cda.id -> bundle.identifier "identifier";
    cda -> bundle.type = 'transaction' "type";
    cda -> bundle.timestamp=(timestamp.now()) "date";
    cda then ClinicalDocumentComposition(cda, composition, patient, encounter, bundle, DocumentReference) "composition";
    cda -> bundle.entry as e, e.request = create('BackboneElement') as request, request.method = 'POST',  e.resource = create('ServiceRequest') as ServiceRequest,  ServiceRequest.id = uuid() as uuid1,  e.fullUrl = append('https://example/ServiceRequest/', uuid1), request.url = 'ServiceRequest' then{
        cda -> ServiceRequest.intent = 'order' "intent";
        cda -> ServiceRequest.status = 'unknown' "stats";
        cda-> ServiceRequest.subject =create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";  
    cda.component as component then {
      component.structuredBody as body then {
        body.component as component  then {
           component.section as srcSection then {
          srcSection.code -> composition.section as tgtSection  then ClinicalDocumentSection(cda, srcSection, patient, tgtSection, bundle,encounter, ServiceRequest);       
         } "section";
        } "component";
    }"body";
    };
    }"ServiceRequest";
  }
  
group ClinicalDocumentSection(source cda : ClinicalDocument, source src : Section, target patient : Patient, target tgt, target bundle : Bundle, target enc : Encounter, target ServiceRequest : ServiceRequest) {
    src.title as t -> tgt.title = (t.dataString);
    src.code -> tgt.code;
    src.code as code where (code='48767-8') or(code='51851-4') or (code='57827-8') or (code='57828-6') then {
    src -> tgt.entry = create('Reference') as reference,  reference.reference = ('https://example/ServiceRequest/' + %ServiceRequest.id) "reference"; 
    }"Note";
   // src.entry as entry then{
        src.text as cdaText -> tgt.text as fhirText then {
            cdaText -> fhirText.status = 'generated' "narrativeStatus";
            cdaText as t -> fhirText.div = t "narrativeText";
        } "cdaText";

  //--------------Sezione Esenzioni------------------------------------------------------------------------------------------------------------------------------------     

        src.code as code where (code='57827-8') then{
        src.id  ->ServiceRequest.identifier; 
          src.entry as entry ->bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('Coverage') as Coverage, Coverage.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Coverage/', uuid11), request.url = 'Coverage', ServiceRequest.insurance = create('Reference') as reference, reference.reference = ('https://example/Coverage/' + %Coverage.id) then {
                src-> Coverage.beneficiary =create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";     
                src->Coverage.payor=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                src where statusCode.exists().not() -> Coverage.status = 'active' "statusAbsent";  
                entry.act as act then {
                    act.code ->Coverage.type;
                 }"act";
            }"entry";
        }"Esenzioni"; 


//-------------Sezione Prescrizioni-------------------------------------------------------------------------------------------------------------------------------------

        src.code as code where (code='57828-6') then{ 
            src.entry as entry then {
                 entry.observation as observation then {
                  observation.code->ServiceRequest.code "code";
                  //observation.priorityCode->ServiceRequest.priority"priority";
                  observation.priorityCode as priorityCode then{
                    priorityCode.code as v -> ServiceRequest.priority = translate(v, '#priority', 'code') "priority";
                }"priorityCode";
                  observation.repeatNumber as repeatNumber->ServiceRequest.quantity=create('Quantity') as Ratio then {
                       repeatNumber.value as value ->Ratio.value=value;
                  }"value";



                observation.participant as participant then {
                      participant.participantRole as partRol then {
                           partRol.scopingEntity as scopingEntity then {
                             scopingEntity.code->ServiceRequest.locationCode;
                     }"ScopingEntity";
                  }"PartROle";
                }"Location";
//----------------codice Patologia------------------------------------------------------------------------------------------------------------------------------------
                observation.entryRelationship as entryRelationship then { 
                    entryRelationship.act as act then {
                        act.templateId as temid where (root='2.16.840.1.113883.3.1937.777.63.10.275')->bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('Condition') as Condition, Condition.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Condition/', uuid11), request.url = 'Condition', ServiceRequest.reasonReference = create('Reference') as reference, reference.reference = ('https://example/Condition/' + %Condition.id) then {
                             act -> Condition.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
                             act -> Condition.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference";
                             act -> Condition.clinicalStatus as status2 then {
                                act ->  status2.coding as status3 then{
                                    act -> status3.code ='unknown' "finald";
                                    act -> status3.system='http://terminology.hl7.org/CodeSystem/condition-clinical'"system";
                                }"st3";
                              }"status";
                            act.code->Condition.code;
                    }"Condition";
                    }"act";
                }"entryrelationshipCondition";


//---------Tipo di Visita---------------------------------------------------------------------------------------------------------------------------------
observation.entryRelationship as entryRelationship then {
    entryRelationship.encounter as encounter then {
        encounter.templateId as temid where (root='2.16.840.1.113883.3.1937.777.63.10.276') then {
           encounter -> ServiceRequest.encounter = create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) then {
                observation.entryRelationship as entryRelationship then {
                    entryRelationship.encounter as encounter1 then {
                    encounter1.templateId as temid where (root='2.16.840.1.113883.3.1937.777.63.10.281') then {
                      //  encounter1.code -> enc.class;
                      encounter1.code as code1-> enc.class = create('Coding') as coding then {
                        code1.code as code -> coding.code = cast(code, 'string');
                         code1.codeSystem as system->coding.system= translate(system, 'http://hl7.org/fhir/ConceptMap/special-oid2uri', 'uri');
                        code1.displayName as display->coding.display= cast(display, 'string');
                       }"class";
                           }"reference";
                        }"templateId";
                    }"Act";
             
            }"encounter";
       
        
    
    }"templateId";
    }"Act";
  }"entryRelationship";


//------------Nota esplicita--------------------------------------------------------------------------------------------------------------------------------------------
                observation.entryRelationship as entryRelationship then {
                    entryRelationship.act as act then {
                    act. templateId as temid where (root='2.16.840.1.113883.3.1937.777.63.10.274') then {
                      act.text as text -> ServiceRequest.note as note then {
                        text.reference as t then{
                          t.value as l ->note.text=l "reference";
                        }"tcx";
                        }"reference";
                        }"templateId";
                    }"Act";
                  }"entryRelationship";

                   
                  observation.entryRelationship as entryRelationship then {
                    entryRelationship.act as act then {
                    act. templateId as temid where (root='2.16.840.1.113883.3.1937.777.63.10.278') then {
                        act.code -> ServiceRequest.reasonCode;
                           }"reference";
                        }"templateId";
                    }"Act";
                  
//-----Sedute-----------------------------------------------------------------------------------------------------------------------------------------------
                  observation.entryRelationship as entryRelationship then {
                    entryRelationship.observation as observation then {
                    observation.templateId as temid where (root='2.16.840.1.113883.3.1937.777.63.10.277') then { 
                       observation.repeatNumber as repeatNumber -> ServiceRequest.occurrence=create('Timing') as Timing then {
                                  repeatNumber->Timing.repeat as repeat then {
                                    repeatNumber.value as value->repeat.count=value "count";
                                   } "event";
                                 } "Count";
                            }"Timing";
                        }"templateId";
                    }"Act";
                 }"Observation";
             }"entry";
         }"Esenzioni"; 



 //------------Sezione Annotazioni-----------------------------------------------------------------------------------------------------------------------------------------     
        src.code as code where (code='48767-8') then { 
             src.entry as entry then {
                entry.act as act then { 
                    act.text as text -> ServiceRequest.note as note then {
                      text.reference as t then{
                        t.value as l ->note.text=l "reference";
                      }"tcx";
                      }"reference";
                    }"act";
              }"entry";
           }"Annotazioni";
        
//----------Sezione Messaggio Regionale-----------------------------------------------------------------------------------------------------------------------------------

        src.code as code where (code='51851-4') then {  
            src.text as cdaText -> ServiceRequest.note as note then{
                       cdaText as text then{
                          text as l ->note.text=l "reference";
                          }"tcx";
                        }"reference";
            }"MessaggioRegionale";

 //-------Sezione Parametri Vitali---------------------------------------------------------------------------------------------------------------------------------------
            
        src.code as code where (code='8716-3')->bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('Observation') as Observation, Observation.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Observation/', uuid11), request.url = 'Observation', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/Observation/' + %Observation.id) then{ 
            src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            src.code -> Observation.code;
                src where Observation.statusCode.exists().not() then {
                src->Observation.status ='final'"status";
                }"statuscode";         
                src.text as cdaText -> Observation.note as note then{
                        cdaText as t ->note.text =t "reference";
                }"reference";
        }"ParametriVitali"; 

//-------Sezione Allergie------------------------------------------------------------------------------------------------------------------------------------------------

        src.code as code where (code='48765-2')->bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('AllergyIntolerance') as AllergyIntolerance, AllergyIntolerance.id = uuid() as uuid11,  e11.fullUrl = append('https://example/AllergyIntolerance/', uuid11), request.url = 'AllergyIntolerance', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/AllergyIntolerance/' + %AllergyIntolerance.id) then{ 
        src -> AllergyIntolerance.patient=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";       
        src -> AllergyIntolerance.clinicalStatus = create('CodeableConcept') as status then {
          src -> status.text = 'string' "text";
          src -> status.coding = create('Coding') as coding then{
            src -> coding.code = 'active'"active";
            src -> coding.system ='http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical'"system";
          }"coding";
        }"allergy";
        src.text as cdaText -> AllergyIntolerance.note as note then{
                        cdaText as t ->note.text =t "reference";
                    }"reference";
                }"Allergie";
  
 //------Sezione Stato Funzionale------------------------------------------------------------------------------------------------------------------------------------------               

        src.code as code where (code='47420-5')->bundle.entry as e11, e11.request = create('BackboneElement') as request, request.method = 'POST', e11.resource = create('Observation') as Observation, Observation.id = uuid() as uuid11,  e11.fullUrl = append('https://example/Observation/', uuid11), request.url = 'Observation', tgt.entry = create('Reference') as reference, reference.reference = ('https://example/Observation/' + %Observation.id) then{ 
            src -> Observation.subject=create('Reference') as reference,  reference.reference = ('https://example/Patient/' + %patient.id) "reference";
            src -> Observation.encounter=create('Reference') as reference,  reference.reference = ('https://example/Encounter/' + %enc.id) "reference"; 
            src.code -> Observation.code;
            src where Observation.statusCode.exists().not() then {
                src->Observation.status ='final'"status";
            }"statuscode";         
            src.text as cdaText -> Observation.note as note then{
                        cdaText as t ->note.text =t "reference";
            }"reference";
        }"StatoFunzionale"; 
       
  
    
}

", "subType": "00"}}, "filename": "PrescrizioneSpecialistica_v2.0.map", "type": "Map", "last_update_date": {"$date": "2023-07-21T13:50:19.969Z"}, "deleted": false, "last_sync": {"$date": "2023-07-21T13:51:02.894Z"}}]