[{"_id": {"$oid": "6414a3764846375e3fecadbc"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/CdaToFhirDataTypes", "version": "2.1", "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "CdaToFhirDataTypes_v2.1.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:29:26.788Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a4524846375e3fecadbd"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/FULLHEADER", "version": "3.2", "content": {"$binary": {"base64": "bWFwICJodHRwOi8vd3d3LmV5LmNvbS9pdGFseS9pZy9jZGEtZmhpci1tYXBzL1N0cnVjdHVyZU1hcC9GVUxMSEVBREVSIiA9ICJGVUxMSEVBREVSIgoKY29uY2VwdG1hcCAiY20tdjMtYWRtaW5pc3RyYXRpdmUtZ2VuZGVyIiB7CiAgcHJlZml4IHMgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvVmFsdWVTZXQvdjMtQWRtaW5pc3RyYXRpdmVHZW5kZXIiCiAgcHJlZml4IHQgPSAiaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hZG1pbmlzdHJhdGl2ZS1nZW5kZXIiCgogIHM6TSA9PSB0Om1hbGUKICBzOkYgPT0gdDpmZW1hbGUKfQpjb25jZXB0bWFwICJwcmlvcml0eSIgewogcHJlZml4IHMgPSAiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvVmFsdWVTZXQvdjMtQWN0UHJpb3JpdHkiCiAgcHJlZml4IHQgPSAiaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZXF1ZXN0LXByaW9yaXR5IgoKICBzOlIgPT0gdDpyb3V0aW5lCiAgczpQID09IHQ6YXNhcAogIHM6VVIgPT0gdDp1cmdlbnQKICBzOkVNID09IHQ6IHN0YXQKCn0KY29uY2VwdG1hcCAiY20tdjMtcmVsYXRlc1RvLWNvZGUiIHsKICBwcmVmaXggcyA9ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9WYWx1ZVNldC90eXBlY29kZSIKICBwcmVmaXggdCA9ICJodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2RvY3VtZW50LXJlbGF0aW9uc2hpcC10eXBlIgoKICBzOkFQTkQgPT0gdDphcHBlbmRzCiAgczpYRlJNID09IHQ6dHJhc2Zvcm0KICBzOlJQTEMgPT0gdDpyZXBsYWNlcwp9Cgp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NsaW5pY2FsRG9jdW1lbnQiIGFsaWFzIENsaW5pY2FsRG9jdW1lbnQgYXMgc291cmNlCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vQXNzaWduZWRBdXRob3IiIGFsaWFzIEFzc2lnbmVkQXV0aG9yIGFzIHF1ZXJpZWQKdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9Bc3NpZ25lZEVudGl0eSIgYWxpYXMgQXNzaWduZWRFbnRpdHkgYXMgcXVlcmllZAp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0Fzc29jaWF0ZWRFbnRpdHkiIGFsaWFzIEFzc29jaWF0ZWRFbnRpdHkgYXMgcXVlcmllZAp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL2NkYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0N1c3RvZGlhbk9yZ2FuaXphdGlvbiIgYWxpYXMgQ3VzdG9kaWFuT3JnYW5pemF0aW9uIGFzIHF1ZXJpZWQKdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9TZWN0aW9uIiBhbGlhcyBTZWN0aW9uIGFzIHF1ZXJpZWQKdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9jZGEvU3RydWN0dXJlRGVmaW5pdGlvbi9QYXRpZW50Um9sZSIgYWxpYXMgUGF0aWVudFJvbGUgYXMgcXVlcmllZAp1c2VzICJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vQnVuZGxlIiBhbGlhcyBCdW5kbGUgYXMgdGFyZ2V0CnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Db21wb3NpdGlvbiIgYWxpYXMgQ29tcG9zaXRpb24gYXMgcHJvZHVjZWQKdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BhdGllbnQiIGFsaWFzIFBhdGllbnQgYXMgcHJvZHVjZWQKdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VuY291bnRlciIgYWxpYXMgRW5jb3VudGVyIGFzIHByb2R1Y2VkCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QZXJzb24iIGFsaWFzIFBhdGllbnQgYXMgcHJvZHVjZWQKdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1ByYWN0aXRpb25lciIgYWxpYXMgUHJhY3RpdGlvbmVyIGFzIHByb2R1Y2VkCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9TcGVjaW1lbiIgYWxpYXMgU3BlY2ltZW4gYXMgcHJvZHVjZWQKdXNlcyAiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL09yZ2FuaXphdGlvbiIgYWxpYXMgT3JnYW5pemF0aW9uIGFzIHByb2R1Y2VkCnVzZXMgImh0dHA6Ly9obDcub3JnL2ZoaXIvY2RhL1N0cnVjdHVyZURlZmluaXRpb24vSGVhbHRoQ2FyZUZhY2lsaXR5IiBhbGlhcyBIZWFsdGhDYXJlRmFjaWxpdHkgYXMgcXVlcmllZAoKaW1wb3J0cyAiaHR0cDovL3d3dy5leS5jb20vaXRhbHkvaWcvY2RhLWZoaXItbWFwcy9TdHJ1Y3R1cmVNYXAvQ2RhVG9GaGlyRGF0YVR5cGVzIgoKZ3JvdXAgQ2RhVG9CdW5kbGUoc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUpIHsKICBjZGEgLT4gIGJ1bmRsZS5lbnRyeSBhcyBlLCBlLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZS5yZXNvdXJjZSA9IGNyZWF0ZSgnQ29tcG9zaXRpb24nKSBhcyBjb21wb3NpdGlvbiwgIGNvbXBvc2l0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvQ29tcG9zaXRpb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdDb21wb3NpdGlvbicsICBidW5kbGUuZW50cnkgYXMgZTIsIGUyLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3RQQVQsIHJlcXVlc3RQQVQubWV0aG9kID0gJ1BVVCcsIGUyLnJlc291cmNlID0gY3JlYXRlKCdQYXRpZW50JykgYXMgcGF0aWVudCwgIHBhdGllbnQuaWQgPSB1dWlkKCkgYXMgdXVpZDIsICBlMi5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nLCB1dWlkMiksIGJ1bmRsZS5lbnRyeSBhcyBlMywgZTMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICBlMy5yZXNvdXJjZSA9IGNyZWF0ZSgnRW5jb3VudGVyJykgYXMgZW5jb3VudGVyLCAgZW5jb3VudGVyLmlkID0gdXVpZCgpIGFzIHV1aWQzLCAgZTMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nLCB1dWlkMykscmVxdWVzdC51cmwgPSAnRW5jb3VudGVyJywgYnVuZGxlLmVudHJ5IGFzIGU0LCBlNC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGU0LnJlc291cmNlID0gY3JlYXRlKCdEb2N1bWVudFJlZmVyZW5jZScpIGFzIERvY3VtZW50UmVmZXJlbmNlLCAgRG9jdW1lbnRSZWZlcmVuY2UuaWQgPSB1dWlkKCkgYXMgdXVpZDQsICBlNC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvRG9jdW1lbnRSZWZlcmVuY2UvJywgdXVpZDMpLHJlcXVlc3QudXJsID0gJ0RvY3VtZW50UmVmZXJlbmNlJyB0aGVuIHsKICAgY2RhIHRoZW4gQ2xpbmljYWxEb2N1bWVudFRvQnVuZGxlKGNkYSwgcGF0aWVudCwgY29tcG9zaXRpb24sIGVuY291bnRlciwgYnVuZGxlLCBEb2N1bWVudFJlZmVyZW5jZSkgImNkYXRvYnVuZGxlIjsKICAgY2RhLnJlY29yZFRhcmdldCBhcyByZWNvcmRUYXJnZXQgdGhlbnsKICAgIHJlY29yZFRhcmdldC5wYXRpZW50Um9sZSBhcyBwYXRpZW50IHRoZW57CiAgICAgIHBhdGllbnQuaWQgYXMgaWQgLT4gcGF0aWVudC5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgLT4gaWRlbnRpZmllci52YWx1ZSA9IGV4dCAidmFsdWUiOwogICAgICAgICAgICAvLyByIC0+IHJlcXVlc3RQQVQudXJsID0gYXBwZW5kKCdQYXRpZW50P2lkZW50aWZpZXI9JyxleHQpICJVVUlEIjsKICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgIH0icmVjb3JkIjsKICAgIH0icmVjUGF0IjsKICAgfSJwYXRpZW50IjsKIH0gIkNsaW5pY2FsRG9jdW1lbnRUb0JvZHkiOwp9Cgpncm91cCBDbGluaWNhbERvY3VtZW50VG9CdW5kbGUoc291cmNlIGNkYSA6IENsaW5pY2FsRG9jdW1lbnQsIHRhcmdldCBwYXRpZW50IDogUGF0aWVudCwgdGFyZ2V0IGNvbXBvc2l0aW9uIDogQ29tcG9zaXRpb24sIHRhcmdldCBlbmNvdW50ZXIgOiBFbmNvdW50ZXIsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUsIHRhcmdldCBEb2N1bWVudFJlZmVyZW5jZTogRG9jdW1lbnRSZWZlcmVuY2UpIHsKICBjZGEgLT4gYnVuZGxlLmlkID0gdXVpZCgpICJpZCI7CiAgY2RhLmlkIC0+IGJ1bmRsZS5pZGVudGlmaWVyICJpZGVudGlmaWVyIjsKICBjZGEgLT4gYnVuZGxlLnR5cGUgPSAndHJhbnNhY3Rpb24nICJ0eXBlIjsKICBjZGEgLT4gYnVuZGxlLnRpbWVzdGFtcD0odGltZXN0YW1wLm5vdygpKSAiZGF0ZSI7CmNkYSB0aGVuIENsaW5pY2FsRG9jdW1lbnRDb21wb3NpdGlvbihjZGEsIGNvbXBvc2l0aW9uLCBwYXRpZW50LCBlbmNvdW50ZXIsIGJ1bmRsZSwgRG9jdW1lbnRSZWZlcmVuY2UpICJjb21wb3NpdGlvbiI7Cn0KCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRDb21wb3NpdGlvbihzb3VyY2Ugc3JjIDogQ2xpbmljYWxEb2N1bWVudCwgdGFyZ2V0IHRndCA6IENvbXBvc2l0aW9uLCB0YXJnZXQgcGF0aWVudFJlc291cmNlIDogUGF0aWVudCwgdGFyZ2V0IGVuY291bnRlciA6IEVuY291bnRlciwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IERvY3VtZW50UmVmZXJlbmNlOiBEb2N1bWVudFJlZmVyZW5jZSkgewogIHNyYy5sYW5ndWFnZUNvZGUgLT4gdGd0Lmxhbmd1YWdlOwogIHNyYyAtPiBEb2N1bWVudFJlZmVyZW5jZS5zdGF0dXMgPSAnY3VycmVudCcgInN0YXR1cyI7CiAgc3JjIC0+IERvY3VtZW50UmVmZXJlbmNlLmNvbnRlbnQgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIGNvbnRlbnQgdGhlbiB7CiAgc3JjLT4gY29udGVudC5hdHRhY2htZW50ID0gY3JlYXRlKCdBdHRhY2htZW50JykgYXMgYXR0YWNobWVudCwgIGF0dGFjaG1lbnQudGl0bGUgPSAnc3RyaW5nJyAiY29tcCI7CiAgfSJjb250ZW50IjsKICBzcmMgLT4gRG9jdW1lbnRSZWZlcmVuY2UuY29udGV4dCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgY29udGV4dCB0aGVuIHsKICAgIHNyYyAtPiBjb250ZXh0LnJlbGF0ZWQgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZUNvbXAsICByZWZlcmVuY2VDb21wLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0NvbXBvc2l0aW9uLycgKyAldGd0LmlkKSAiY29tcCI7CiAgIH0iY29udGV4dCI7CiAgc3JjLmlkIHdoZXJlIHNyYy5zZXRJZC5leGlzdHMoKS5ub3QoKSAtPiB0Z3QuaWRlbnRpZmllciAiaWRlbnRpZmllciI7CiAgc3JjLnNldElkIC0+IHRndC5pZGVudGlmaWVyICJpZGVudGlmaWVyIjsKICBzcmMgLT4gdGd0LnN0YXR1cyA9ICdmaW5hbCcgInN0YXR1cyI7CiAgc3JjLmNvZGUgLT4gdGd0LnR5cGU7CiAgc3JjLnRpdGxlIGFzIHQgLT4gdGd0LnRpdGxlID0gKHQuZGF0YVN0cmluZyk7CiAgc3JjIHdoZXJlIHNyYy50aXRsZS5leGlzdHMoKS5ub3QoKSB0aGVuIHsKICAgIHNyYy5jb2RlICBhcyBjb2RlIHRoZW4gewogICAgICBjb2RlLmRpc3BsYXlOYW1lIGFzIGRpc3BsYXkgLT50Z3QudGl0bGUgPSBjYXN0KGRpc3BsYXksJ3N0cmluZycpOwogICAgfSJkaXNwbGF5IjsKICB9InRpdGxlIjsKICBzcmMuZWZmZWN0aXZlVGltZSBhcyBlZmZlY3RpdmVUaW1lIC0+IHRndC5kYXRlID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHZhbHVlIHRoZW4gVFNEYXRlVGltZShlZmZlY3RpdmVUaW1lLCB2YWx1ZSk7CiAgc3JjLnZlcnNpb25OdW1iZXIgYXMgdmVyc2lvbk51bWJlciB3aGVyZSh2YWx1ZSA+IDEpIC0+IHRndC5leHRlbnNpb24gYXMgZXh0MiB0aGVuIENoRXh0RXByVmVyc2lvbk51bWJlcih2ZXJzaW9uTnVtYmVyLCBleHQyKTsKICBzcmMuY29uZmlkZW50aWFsaXR5Q29kZSAtPiB0Z3QuY29uZmlkZW50aWFsaXR5OwogIHNyYy5yZWNvcmRUYXJnZXQgYXMgcmVjb3JkVGFyZ2V0IHRoZW4gewogICAgcmVjb3JkVGFyZ2V0LnBhdGllbnRSb2xlIGFzIHBhdGllbnQgLT4gIHRndC5zdWJqZWN0ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnRSZXNvdXJjZS5pZCkgdGhlbiBDbGluaWNhbERvY3VtZW50UGF0aWVudFJvbGUocGF0aWVudCwgcGF0aWVudFJlc291cmNlLCBidW5kbGUpICJzdWJqZWN0IjsKICAgIHJlY29yZFRhcmdldC5wYXRpZW50Um9sZSBhcyBwYXRpZW50IC0+IERvY3VtZW50UmVmZXJlbmNlLnN1YmplY3QgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZTEsICByZWZlcmVuY2UxLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50UmVzb3VyY2UuaWQpOwogIH0gInBhdGllbnRSb2xlIjsKICAKICAvL1NUQVJUIEFVVEhPUgogIHNyYy5hdXRob3IgYXMgc3JjQXV0aG9yIHRoZW4gIHsKICAgIHNyY0F1dGhvci50aW1lIGFzIHRpbWUgLT4gdGd0LmRhdGU7CiAgICBzcmNBdXRob3IuYXNzaWduZWRBdXRob3IgYXMgYXNzaWduZWRBdXRob3IgdGhlbiB7CiAgICAgIC8vIENvZGljZSBGaXNjYWxlCiAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgd2hlcmUgKHJvb3QhPScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNi4zLjInKSB0aGVuIHsKICAgICAgICAgYXNzaWduZWRBdXRob3ItPmJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXJSb2xlJykgYXMgcHJhY3RpdGlvbmVyUm9sZSwgIHByYWN0aXRpb25lclJvbGUuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nLCB1dWlkMSksIHJlcXVlc3QudXJsPSdQcmFjdGl0aW9uZXJSb2xlJywgdGd0LmF1dGhvciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lclJvbGUvJyArICVwcmFjdGl0aW9uZXJSb2xlLmlkKSB0aGVuIHsKICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5jb2RlIGFzIGNvZGljZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGUgYXMgY29kZTIgdGhlbiBDRUNvZGVhYmxlQ29uY2VwdChjb2RpY2UsY29kZTIpOwogICAgICAgICAgICBhc3NpZ25lZEF1dGhvciAtPiBidW5kbGUuZW50cnkgYXMgZTIsICBlMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMi5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyIHRoZW4geyAKICAgICAgICAgICAgICBzcmNBdXRob3IuZnVuY3Rpb25Db2RlIC0+IHByYWN0aXRpb25lclJvbGUuY29kZTsKICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvciAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvciAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYXV0aG9yJyJjb2RlIjsKICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmNvZGUgLT4gcHJhY3RpdGlvbmVyUm9sZS5jb2RlOwogICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0OyAvLyB0aGVuIHsKICAgICAgICAgICAgICAvLyAgICBhc3NpZ25lZEF1dGhvci0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgLy8gIH0iZXh0IjsKICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gcHJhY3RpdGlvbmVyLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUyLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCAgcHJhY3RpdGlvbmVyUm9sZS5wcmFjdGl0aW9uZXIgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpImF1dCI7CiAgICAgICAgICAgICAgICAgIH0iciI7CiAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7CiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7CiAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgd2hlcmUgKHJvb3QhPScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgIH0iZGl2ZXJzbyI7CiAgICAgICAgICAgICAgICBhc3NpZ25lZEF1dGhvci5hZGRyIC0+IHByYWN0aXRpb25lci5hZGRyZXNzOyAgICAgIAogICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IudGVsZWNvbSAtPiBwcmFjdGl0aW9uZXIudGVsZWNvbTsKICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLmFzc2lnbmVkUGVyc29uIGFzIHBlcnNvbiB0aGVuIHsKICAgICAgICAgICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOwogICAgICAgICAgICAgICAgcGVyc29uLmJpcnRoVGltZSBhcyBiaXJ0aFRpbWUgdGhlbnsKICAgICAgICAgICAgICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gcHJhY3RpdGlvbmVyLmJpcnRoRGF0ZT0gdHJ1bmNhdGUoZGF0ZSwgMTApOwogICAgICAgICAgICAgICAgfSJiaXJ0aCI7CiAgICAgICAgICAgICAgICB9ICJuYW1lIjsKICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yIC0+IERvY3VtZW50UmVmZXJlbmNlLmF1dGhvciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlQXV0aCwgIHJlZmVyZW5jZUF1dGgucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSAicmVmQXV0aCI7CiAgICAgICAgICAgICAgfSAiQVNTQVV0aCI7CiAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IucmVwcmVzZW50ZWRPcmdhbml6YXRpb24gYXMgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24gLT4gIGJ1bmRsZS5lbnRyeSBhcyBlMywgIGUzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlMy5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uIHRoZW4gewogICAgICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBvcmdhbml6YXRpb24uaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQzLCAgZTMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMyksIHByYWN0aXRpb25lclJvbGUub3JnYW5pemF0aW9uID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2VPcmcsICByZWZlcmVuY2VPcmcucmVmZXJlbmNlID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQzKSJhdXQiOwogICAgICAgICAgICAgICAgICB9InIiOwogICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CgogICAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLT5vcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYXV0aG9yL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24ubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24udGVsZWNvbSAtPiBvcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLmFkZHIgLT4gb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBPcmdQYXJ0T2YgLT4gYnVuZGxlLmVudHJ5IGFzIGU0LCAgZTQucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGU0LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24xIHRoZW4gewogICAgICAgICAgICAgICAgICBPcmdQYXJ0T2YtPm9yZ2FuaXphdGlvbjEubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYXV0aG9yL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uL2FzT3JnYW5pemF0aW9uUGFydE9mJyJjb2RlIjsKICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICAgIH0ibWV0YSI7ICAgICAgICAgIAogICAgICAgICAgICAgICAgICBPcmdQYXJ0T2YuaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMS5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICBPcmdQYXJ0T2YtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uMS5pZCAgPSAociArJy0nKyBleHQpIGFzIHV1aWQ0LCAgZTQuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksIG9yZ2FuaXphdGlvbi5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZT0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uMS5pZCkgImF1dCI7CiAgICAgICAgICAgICAgICAgICAgfSJyIjsKICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi5jb2RlIC0+IG9yZ2FuaXphdGlvbjEudHlwZTsKICAgICAgICAgICAgICAgICAgT3JnUGFydE9mLnN0YXR1c0NvZGUgYXMgc3RhdHVzIHdoZXJlICh2YWx1ZSA9J2FjdGl2ZScpIC0+IG9yZ2FuaXphdGlvbjEuYWN0aXZlID0gY3JlYXRlKCdib29sZWFuJyksIG9yZ2FuaXphdGlvbjEuYWN0aXZlID0gJ3RydWUnOwogICAgICAgICAgICAgICAgICBPcmdQYXJ0T2Yud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVPcmdhbiAtPiBidW5kbGUuZW50cnkgYXMgZTEwYmlzLCAgZTEwYmlzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlMTBiaXMucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjIgdGhlbnsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT5vcmdhbml6YXRpb24yLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4gLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2F1dGhvci9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICAgICAgfSJtZXRhIjsKCiAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24yLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4tPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBvcmdhbml6YXRpb24yLmlkID0gIChyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlMTBiaXMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNSksIG9yZ2FuaXphdGlvbjEucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjIuaWQpICJhdXQiOwogICAgICAgICAgICAgICAgICAgICAgfSJyIjsKICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLm5hbWUgYXMgdiAtPiBvcmdhbml6YXRpb24yLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbi50ZWxlY29tIC0+IG9yZ2FuaXphdGlvbjIudGVsZWNvbTsKICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLmFkZHIgLT4gb3JnYW5pemF0aW9uMi5hZGRyZXNzOwogICAgICAgICAgICAgICAgICB9Indob2xlT3JnYW5pemF0aW9uIjsKICAgICAgICAgICAgICAgIH0gIk9yZ1BhcnRPZiI7CiAgICAgICAgICAgICAgfSAicmVwcmVzZW50ZWRPcmdhbml6YXRpb24iOyAKICAgICAgICAgICAgfSJQYXJjYXRpdGlvbmVyUk9MIjsKICAgICAgICB9Ik9JRENGIjsKICAgICAgLy8gUGFydGl0YSBJVkEKICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS42LjMuMicpIHRoZW4gewogICAgICAgIGFzc2lnbmVkQXV0aG9yLT5idW5kbGUuZW50cnkgYXMgZTZiaXMzLCAgZTZiaXMzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTZiaXMzLnJlc291cmNlID0gY3JlYXRlKCdEZXZpY2UnKSBhcyBkZXZpY2UsICBkZXZpY2UuaWQgPSB1dWlkKCkgYXMgdXVpZDZiaXMzLCAgZTZiaXMzLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9EZXZpY2UvJywgdXVpZDZiaXMzKSwgcmVxdWVzdC51cmwgPSdEZXZpY2UnLCB0Z3QuYXV0aG9yID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL0RldmljZS8nICsgJWRldmljZS5pZCkgdGhlbnsKICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5idW5kbGUuZW50cnkgYXMgZTI1MSwgZTI1MS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMjUxLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24gdGhlbiB7CiAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT5vcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3ItPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L0F1dGhvclBhcnRpdGFJVkEnImNvZGUiOwogICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAgYXNzaWduZWRBdXRob3IuaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBvcmdhbml6YXRpb24uaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTI1MS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQyKSwgIGRldmljZS5vd25lciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uLmlkKTsKICAgICAgICAgICAgICAgICAgfSJyIiA7CiAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgIH0iT3JnUGFydGl0YUlWQSI7CiAgICAgICAgIH0iRGV2aWNlIjsKICAgICAgfSJvaWRQYXJ0aXRhSVZBIjsKICAgICAvLyBJRCBudWxsRmxhdm9yCiAgICAgIGFzc2lnbmVkQXV0aG9yLmlkIGFzIGlkIHdoZXJlIG51bGxGbGF2b3IuZXhpc3RzKCkgdGhlbiB7CiAgICAgICAgICBhc3NpZ25lZEF1dGhvci5hc3NpZ25lZEF1dGhvcmluZ0RldmljZSBhcyBhc3NpZ25lZEF1dGhvcmluZ0RldmljZSAtPiBidW5kbGUuZW50cnkgYXMgZTZiaXMsICBlNmJpcy5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGU2YmlzLnJlc291cmNlID0gY3JlYXRlKCdEZXZpY2UnKSBhcyBkZXZpY2UsICBkZXZpY2UuaWQgPSB1dWlkKCkgYXMgdXVpZDZiaXMsICBlNmJpcy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvRGV2aWNlLycsIHV1aWQ2YmlzKSwgcmVxdWVzdC51cmwgPSdEZXZpY2UnLCB0Z3QuYXV0aG9yID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL0RldmljZS8nICsgJWRldmljZS5pZCkgdGhlbnsKICAgICAgICAgIC8vIGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlLnRlbXBsYXRlSWQgLT4gZGV2aWNlLmlkZW50aWZpZXI7CiAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlLmNvZGUgLT4gZGV2aWNlLnR5cGU7CiAgICAgICAgICAgIGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlLm1hbnVmYWN0dXJlck1vZGVsTmFtZSBhcyBtYW51ZmFjdHVyZXJNb2RlbE5hbWUgdGhlbnsKICAgICAgICAgICAgICAgIG1hbnVmYWN0dXJlck1vZGVsTmFtZSBhcyBtLT4gZGV2aWNlLm1hbnVmYWN0dXJlciA9IChtLmRpc3BsYXlOYW1lKSAiZGlzcGxheVJ1bGUiOwogICAgICAgICAgICB9ICJtYW51ZmFjdHVyZXIiOyAKICAgICAgICAgICAgYXNzaWduZWRBdXRob3JpbmdEZXZpY2Uuc29mdHdhcmVOYW1lIGFzIHNvZnR3YXJlTmFtZSAtPiBkZXZpY2UuZGV2aWNlTmFtZSBhcyBkZXZpY2VOYW1lIHRoZW57CiAgICAgICAgICAgICAgICBzb2Z0d2FyZU5hbWUgLT4gZGV2aWNlTmFtZS50eXBlID0gJ290aGVyJyAidHlwZU5hbWUiOwkJCiAgICAgICAgICAgICAgICBzb2Z0d2FyZU5hbWUgYXMgcyAtPiBkZXZpY2VOYW1lLm5hbWUgPSAocy5kaXNwbGF5TmFtZSkgIm5hbWUiOwogICAgICAgICAgICB9ICJkZXZpY2VOYW1lIjsKICAgICAgICAgIH0iRGV2aWNlIjsKICAgICAgfSJOdWxsRmxhdm9yIjsKICAgIH0gImFzc2lnbmVkQXV0aG9yIjsKCiAgICAvL1NUQVJUIERBVEEgRU5URVIKICBzcmMuZGF0YUVudGVyZXIgYXMgZGF0YUVudCAtPiAgYnVuZGxlLmVudHJ5IGFzIGU2LCBlNi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGU2LnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXJSb2xlJykgYXMgcHJhY3RpdGlvbmVyUm9sZSwgIHByYWN0aXRpb25lclJvbGUuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlNi5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0nUHJhY3RpdGlvbmVyUm9sZScgLCB0Z3QuYXV0aG9yID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nICsgJXByYWN0aXRpb25lclJvbGUuaWQpIHRoZW4gewogICAgZGF0YUVudC50aW1lIGFzIHRpbWUgLT4gdGd0LmRhdGU7CiAgICBkYXRhRW50LmFzc2lnbmVkRW50aXR5IGFzIGFzc2lnbmVkRW50aXR5IC0+IGJ1bmRsZS5lbnRyeSBhcyBlNywgIGU3LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGU3LnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIgdGhlbiB7CiAgICAgIAogICAgICBhc3NpZ25lZEVudGl0eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICBhc3NpZ25lZEVudGl0eS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgIGFzc2lnbmVkRW50aXR5IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgYXNzaWduZWRFbnRpdHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2RhdGFFbnRlcmVyJyJjb2RlIjsKICAgICAgICB9ImNvZGluZyI7CiAgICAgIH0ibWV0YSI7CiAgICAgIAogICAgICBhc3NpZ25lZEVudGl0eS5jb2RlIGFzIGNvZGljZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGUgYXMgY29kZTIgdGhlbiBDRUNvZGVhYmxlQ29uY2VwdChjb2RpY2UsY29kZTIpOwogICAgICBhc3NpZ25lZEVudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0OyAKICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gcHJhY3RpdGlvbmVyLmlkICA9ICAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTcuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksICBwcmFjdGl0aW9uZXJSb2xlLnByYWN0aXRpb25lciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgICJkYXRhZW50ZXJlciI7CiAgICAgICAgfSJyIjsKICAgIH0iaWRlbnRpZmllciI7CgogICAgYXNzaWduZWRFbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gewogICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsKICAgIGFzc2lnbmVkRW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290IT0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7CiAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgfSJkaXZlcnNvIjsKCiAgICAgIGFzc2lnbmVkRW50aXR5LmFkZHIgLT4gcHJhY3RpdGlvbmVyLmFkZHJlc3M7CiAgICAgIGFzc2lnbmVkRW50aXR5LnRlbGVjb20gLT4gcHJhY3RpdGlvbmVyLnRlbGVjb207CiAgICAgIGFzc2lnbmVkRW50aXR5LmFzc2lnbmVkUGVyc29uIGFzIHBlcnNvbiB0aGVuewogICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOwogICAgICBwZXJzb24uYmlydGhUaW1lIGFzIGJpcnRoVGltZSB0aGVuewogICAgICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gcHJhY3RpdGlvbmVyLmJpcnRoRGF0ZT0gdHJ1bmNhdGUoZGF0ZSwgMTApOwogICAgICAgIH0iYmlydGgiOwogICAgICB9ImFzc2lnbmVkUGVyc29uIjsKICAgICAgYXNzaWduZWRFbnRpdHkucmVwcmVzZW50ZWRPcmdhbml6YXRpb24gYXMgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24gLT4gIGJ1bmRsZS5lbnRyeSBhcyBlOCwgIGU4LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlOC5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uICB0aGVuIHsKICAgICAgICAKICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi0+b3JnYW5pemF0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24gLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2RhdGFFbnRlcmVyL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICB9Im1ldGEiOwogICAgICAgIAogICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbi5pZCA9ICAociArJy0nKyBleHQpIGFzIHV1aWQzLCBlOC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQzKSwgcHJhY3RpdGlvbmVyUm9sZS5vcmdhbml6YXRpb24gPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZU9yZywgIHJlZmVyZW5jZU9yZy5yZWZlcmVuY2UgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDMpICAiZGF0YWVudGVyZXIiOwogICAgICAgICAgfSJyIjsKICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24udGVsZWNvbSAtPiBvcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5hZGRyIC0+IG9yZ2FuaXphdGlvbi5hZGRyZXNzOwogICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLmFzT3JnYW5pemF0aW9uUGFydE9mIGFzIE9yZ1BhcnRPZiAtPiBidW5kbGUuZW50cnkgYXMgZTksICBlOS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTkucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjEgdGhlbnsKICAgICAgICAgIAogICAgICAgICAgT3JnUGFydE9mLT5vcmdhbml6YXRpb24xLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgT3JnUGFydE9mLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICBPcmdQYXJ0T2YgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2RhdGFFbnRlcmVyL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uL2FzT3JnYW5pemF0aW9uUGFydE9mJyJjb2RlIjsKICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgIAogICAgICAgICAgT3JnUGFydE9mLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbjEuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgT3JnUGFydE9mLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiAgb3JnYW5pemF0aW9uMS5pZCA9ICAociArJy0nKyBleHQpIGFzIHV1aWQ0LCAgZTkuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksIG9yZ2FuaXphdGlvbi5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZT0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uJyArICVvcmdhbml6YXRpb24xLmlkKSAgImRhdGFlbnRlcmVyIjsKICAgICAgICAgICAgfSJyIjsKICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgT3JnUGFydE9mLmNvZGUgLT4gb3JnYW5pemF0aW9uMS50eXBlOwogICAgICAgICAgT3JnUGFydE9mLnN0YXR1c0NvZGUgYXMgc3RhdHVzIHdoZXJlICh2YWx1ZSA9J2FjdGl2ZScpIC0+IG9yZ2FuaXphdGlvbjEuYWN0aXZlID0gY3JlYXRlKCdib29sZWFuJyksIG9yZ2FuaXphdGlvbjEuYWN0aXZlID0gJ3RydWUnOwogICAgICAgICAgT3JnUGFydE9mLndob2xlT3JnYW5pemF0aW9uIGFzIHdob2xlT3JnYW4gLT4gYnVuZGxlLmVudHJ5IGFzIGUxMCwgIGUxMC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTEwLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24yICB0aGVuewogICAgICAgICAgICAKICAgICAgICAgICAgd2hvbGVPcmdhbi0+b3JnYW5pemF0aW9uMi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgd2hvbGVPcmdhbi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgIHdob2xlT3JnYW4gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9kYXRhRW50ZXJlci9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAKICAgICAgICAgICAgd2hvbGVPcmdhbi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24yLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgIHdob2xlT3JnYW4tPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gIG9yZ2FuaXphdGlvbjIuaWQgPSAgKHIgKyctJysgZXh0KSBhcyB1dWlkNSwgIGUxMC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQ1KSwgb3JnYW5pemF0aW9uMS5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZT0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uMi5pZCkgICAiZGF0YWVudGVyZXIiOwogICAgICAgICAgICAgIH0iciI7CiAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICB3aG9sZU9yZ2FuLm5hbWUgYXMgdiAtPiBvcmdhbml6YXRpb24yLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgIHdob2xlT3JnYW4udGVsZWNvbSAtPiBvcmdhbml6YXRpb24yLnRlbGVjb207CiAgICAgICAgICAgIHdob2xlT3JnYW4uYWRkciAtPiBvcmdhbml6YXRpb24yLmFkZHJlc3M7CiAgICAgICAgICB9Indob2xlT3JnYW5pemF0aW9uIjsKICAgICAgICB9ImFzT3JnYW5pemF0aW9uUGFydE9mIjsKICAgICAgfSJSZXByZXNlbnRlZE9yZ2FuaXphdGlvbiI7CiAgICB9IkFzc2lnbmVkRW50aXR5IjsKICB9IkRhdGFFbnRlciI7CiAgfSAic3JjQXV0aG9yIjsKICAKICAvL1NUQVJUIElORk9STUFOVCAxCiAgc3JjLmluZm9ybWFudCBhcyBpbmZvcm1hbnQgIHRoZW4gewogICAgIGluZm9ybWFudC5hc3NpZ25lZEVudGl0eSBhcyBhc3NpZ25lZEVudGl0eSAgLT5idW5kbGUuZW50cnkgYXMgZTExLCBlMTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsIGUxMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyUm9sZScpIGFzIHByYWN0aXRpb25lclJvbGUsICBwcmFjdGl0aW9uZXJSb2xlLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTExLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnUHJhY3RpdGlvbmVyUm9sZScgdGhlbiB7CiAgICAgICAgaW5mb3JtYW50IC0+IHRndC5hdHRlc3RlciBhcyBhdHRlc3RlciB0aGVuIHsKICAgICAgICBpbmZvcm1hbnQgLT4gYXR0ZXN0ZXIubW9kZT0ncHJvZmVzc2lvbmFsJyAibW9kZSI7CiAgICAgICAgaW5mb3JtYW50IC0+IGF0dGVzdGVyLnBhcnR5ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nICsgJXByYWN0aXRpb25lclJvbGUuaWQpInJlZmVyZW5jZSI7CiAgICAgICAgYXNzaWduZWRFbnRpdHkuY29kZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGU7CiAgICAgICAgYXNzaWduZWRFbnRpdHkgYXMgZW50aXR5LT4gYnVuZGxlLmVudHJ5IGFzIGUxMiwgZTEyLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUxMi5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyICB0aGVuIHsKICAgICAgICAgIAogICAgICAgICAgZW50aXR5LT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICBlbnRpdHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgZW50aXR5IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgIGVudGl0eSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvaW5mb3JtYW50JyJjb2RlIjsKICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgIAogICAgICAgICAgZW50aXR5LmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dDsKICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gcHJhY3RpdGlvbmVyLmlkID0gIChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksIHByYWN0aXRpb25lclJvbGUucHJhY3RpdGlvbmVyID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSAiZGF0YWVudGVyZXIiOwogICAgICAgICAgICB9InIiIDsKICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgIGFzc2lnbmVkRW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsKICAgICAgICBhc3NpZ25lZEVudGl0eS5pZCBhcyBpZCB3aGVyZSAocm9vdCE9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gewogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgfSJkaXZlcnNvIjsKICAgICAgICBlbnRpdHkuYWRkciAtPiBwcmFjdGl0aW9uZXIuYWRkcmVzczsKICAgICAgICBlbnRpdHkudGVsZWNvbSAtPiBwcmFjdGl0aW9uZXIudGVsZWNvbTsKICAgICAgICBlbnRpdHkuYXNzaWduZWRQZXJzb24gYXMgcGVyc29uIHRoZW4gewogICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOwogICAgICAgIHBlcnNvbi5iaXJ0aFRpbWUgYXMgYmlydGhUaW1lIHRoZW57CiAgICAgICAgICBiaXJ0aFRpbWUudmFsdWUgYXMgZGF0ZSAtPiBwcmFjdGl0aW9uZXIuYmlydGhEYXRlPSB0cnVuY2F0ZShkYXRlLCAxMCk7CiAgICAgICAgfSJiaXJ0aCI7CiAgICAgICAgfSJwZXJzb24iOwogICAgICAgIGVudGl0eS5yZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBhcyByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi0+IGJ1bmRsZS5lbnRyeSBhcyBlMTMsIGUxMy5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMTMucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbiB0aGVuIHsKICAgICAgICAKICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLT5vcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvaW5mb3JtYW50L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgfSJtZXRhIjsKICAgICAgICAKICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uLmlkID0gIChyICsnLScrIGV4dCkgYXMgdXVpZDMsICBlMTMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMyksICBwcmFjdGl0aW9uZXJSb2xlLm9yZ2FuaXphdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbi5pZCk7CiAgICAgICAgICAgIH0iciIgOwogICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24ubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uLnRlbGVjb207CiAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24uYWRkciAtPiBvcmdhbml6YXRpb24uYWRkcmVzczsKICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5hc09yZ2FuaXphdGlvblBhcnRPZiAtPiBvcmdhbml6YXRpb24ucGFydE9mIGFzIHBhcnRPZiB0aGVuIHsKICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBvcmdhbml6YXRpb25QYXJ0T2YgLT4gYnVuZGxlLmVudHJ5IGFzIGUxNCwgZTE0LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUxNC5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uMSB0aGVuIHsKICAgICAgICAgIAogICAgICAgICAgb3JnYW5pemF0aW9uUGFydE9mLT5vcmdhbml6YXRpb24xLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgb3JnYW5pemF0aW9uUGFydE9mLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgIG9yZ2FuaXphdGlvblBhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICBvcmdhbml6YXRpb25QYXJ0T2YgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2luZm9ybWFudC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAKICAgICAgICAgIG9yZ2FuaXphdGlvblBhcnRPZi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24xLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgIG9yZ2FuaXphdGlvblBhcnRPZi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uMS5pZCA9ICAociArJy0nKyBleHQpIGFzIHV1aWQ0LCAgZTE0LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDQpLCBvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uMS5pZCk7CiAgICAgICAgICAgIH0iciIgOwogICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgb3JnYW5pemF0aW9uUGFydE9mLmNvZGUgLT4gb3JnYW5pemF0aW9uMS50eXBlOwogICAgICAgIG9yZ2FuaXphdGlvblBhcnRPZi5zdGF0dXNDb2RlIGFzIHN0YXR1cyB3aGVyZShjb2RlPSdhY3RpdmUnKS0+IG9yZ2FuaXphdGlvbjEuYWN0aXZlID1jcmVhdGUgKCdib29sZWFuJyksb3JnYW5pemF0aW9uMS5hY3RpdmU9J3RydWUnOwogICAgICAgIG9yZ2FuaXphdGlvblBhcnRPZi53aG9sZU9yZ2FuaXphdGlvbiAtPiBvcmdhbml6YXRpb24xLnBhcnRPZiBhcyBwYXJ0T2YxIHRoZW57CiAgICAgICAgb3JnYW5pemF0aW9uUGFydE9mLndob2xlT3JnYW5pemF0aW9uICBhcyB3aG9sZU9yZ2FuaXphdGlvbi0+IGJ1bmRsZS5lbnRyeSBhcyBlMTUsIGUxNS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMTUucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjIgIHRoZW4gewogICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24tPm9yZ2FuaXphdGlvbjIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvaW5mb3JtYW50L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uL2FzT3JnYW5pemF0aW9uUGFydE9mL3dob2xlT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uMi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlMTUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNSkgICwgb3JnYW5pemF0aW9uMS5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb24yLmlkKTsKICAgICAgICAgICAgfSJyIiA7CiAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbi5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uMi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgIHdob2xlT3JnYW5pemF0aW9uLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uMi50ZWxlY29tOwogICAgICAgIHdob2xlT3JnYW5pemF0aW9uLmFkZHIgLT4gb3JnYW5pemF0aW9uMi5hZGRyZXNzOwogICAgICAgfSJ3aG9sZU9yZ2FuaXphdGlvbiI7CiAgICAgICB9ImFzT3JnYW5pemF0aW9uUGFydE9mIjsKICAgICAgIH0icGFydE9mIjsKICAgICAgICB9InF1YWxpZmljYXRpb24iOwogICAgICAgIH0ib3JnYW5pemF0aW9uIjsgCiAgICAgICAgfSJhc3NpZ25lZEVudGl0eSI7CiAgICB9ImF0dGVzdGVyIjsKICAgIH0iaW5mb3JtYW50IjsKICAgIH0iaW5mb3JtIjsKICAvL1NUQVJUIElORk9STUFOVCAyCiAgc3JjLmluZm9ybWFudCBhcyBpbmZvcm1hbnQgdGhlbiB7CiAgIAogICAgaW5mb3JtYW50LnJlbGF0ZWRFbnRpdHkgYXMgcmVsYXRlZCAgLT4gYnVuZGxlLmVudHJ5IGFzIGUxNiwgZTE2LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMTYucmVzb3VyY2UgPSBjcmVhdGUoJ1JlbGF0ZWRQZXJzb24nKSBhcyByZWxhdGVkUGVyc29uLCAgcmVsYXRlZFBlcnNvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUxNi5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUmVsYXRlZFBlcnNvbi8nLCB1dWlkMSkscmVxdWVzdC51cmwgPSAnUmVsYXRlZFBlcnNvbicgdGhlbiB7CiAgICBpbmZvcm1hbnQgLT4gdGd0LmF0dGVzdGVyIGFzIGF0dGVzdGVyIHRoZW4gewogICAgaW5mb3JtYW50IC0+IGF0dGVzdGVyLm1vZGU9J3Byb2Zlc3Npb25hbCcgIm1vZGUiOwogICAgaW5mb3JtYW50LT4gYXR0ZXN0ZXIucGFydHkgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9SZWxhdGVkUGVyc29uLycgKyAlcmVsYXRlZFBlcnNvbi5pZCkicmVmZXJlbmNlIjsKICAgIHJlbGF0ZWQucmVsYXRlZFBlcnNvbiBhcyBQZXJzb24gdGhlbiB7CiAgICByZWxhdGVkLmNvZGUgLT4gcmVsYXRlZFBlcnNvbi5yZWxhdGlvbnNoaXA7CiAgICByZWxhdGVkLnRlbGVjb20gLT4gcmVsYXRlZFBlcnNvbi50ZWxlY29tOwogICAgcmVsYXRlZC5hZGRyIC0+IHJlbGF0ZWRQZXJzb24uYWRkcmVzczsKICAgIFBlcnNvbi5uYW1lIC0+IHJlbGF0ZWRQZXJzb24ubmFtZTsKICAgIHJlbGF0ZWQuYmlydGhUaW1lIGFzIGRhdGUgdGhlbnsKICAgICAgZGF0ZS52YWx1ZSBhcyB2YWx1ZSAtPiByZWxhdGVkUGVyc29uLmJpcnRoRGF0ZSA9IHRydW5jYXRlKHZhbHVlLCAxMCkgInZhbHVlRCI7IAogICAgfSJiaXJ0aGluZm9ybWFudCI7CiAgICByZWxhdGVkLT5yZWxhdGVkUGVyc29uLnBhdGllbnQ9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50UmVzb3VyY2UuaWQpICJyZWZlcmVuY2UiOwogICAgIH0icmVsYXRlZFBlcnNvbjEiOwogICAgICB9InJlbGF0ZWRQZXJzb24iOwogICAgfSJpbmZvcm1hbnQiOwogIH0iaW5mb3JtMiI7CiAgCiAgLy9TVEFSVCBDVVNUT0RJQU4KICBzcmMuY3VzdG9kaWFuIGFzIGN1c3RvZGlhbiB0aGVuIHsKICAgIGN1c3RvZGlhbi5hc3NpZ25lZEN1c3RvZGlhbiBhcyBhc3NpZ25lZEN1c3RvZGlhbiAtPiBidW5kbGUuZW50cnkgYXMgZTE3LCBlMTcucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTE3LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBPcmdhbml6YXRpb24gdGhlbiB7CiAgICAKICAgICAgYXNzaWduZWRDdXN0b2RpYW4tPk9yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgYXNzaWduZWRDdXN0b2RpYW4tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICBhc3NpZ25lZEN1c3RvZGlhbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgIGFzc2lnbmVkQ3VzdG9kaWFuIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9jdXN0b2RpYW4nImNvZGUiOwogICAgICAgIH0iY29kaW5nIjsKICAgICAgfSJtZXRhIjsKCiAgICAgIGFzc2lnbmVkQ3VzdG9kaWFuLnJlcHJlc2VudGVkQ3VzdG9kaWFuT3JnYW5pemF0aW9uIGFzIHJlcHJlc2VudGVkQ3VzdG9kaWFuT3JnYW5pemF0aW9uIHRoZW57CiAgICAgICAgcmVwcmVzZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRpb24uaWQgYXMgaWQgLT4gT3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgIHJlcHJlc2VudGVkQ3VzdG9kaWFuT3JnYW5pemF0aW9uIC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgfSJleHQiOwogICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBPcmdhbml6YXRpb24uaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQsICBlMTcuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkKTsKICAgICAgICB9InIiIDsKICAgIH0iaWRlbnRpZmllciI7CiAgICBhc3NpZ25lZEN1c3RvZGlhbiAtPiBEb2N1bWVudFJlZmVyZW5jZS5jdXN0b2RpYW4gPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZUNVLCAgcmVmZXJlbmNlQ1UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlT3JnYW5pemF0aW9uLmlkKSAiUmVmQ3VzdG9kaWFuIjsKICAgIHJlcHJlc2VudGVkQ3VzdG9kaWFuT3JnYW5pemF0aW9uIC0+IHRndC5jdXN0b2RpYW4gPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVPcmdhbml6YXRpb24uaWQpICB0aGVuIEN1c3RvZGlhbk9yZ2FuaXphdGlvbihyZXByZXNlbnRlZEN1c3RvZGlhbk9yZ2FuaXphdGlvbixPcmdhbml6YXRpb24pICJjdXN0b2RpYW4xIjsKICAgIH0icmVwcmVzZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRpb24iOwogICAgfSJvcmdhbml6YXRpb24iOwogIH0iY3VzdG9kaWFuIjsKCiAgLy9TVEFSVCBJTkZPUk1BVElPTiBSRUNJUElFTlQgCiAgc3JjLmluZm9ybWF0aW9uUmVjaXBpZW50IGFzIGluZm9ybWF0aW9uUmVjaXBpZW50IHRoZW57CiAgICAgIGluZm9ybWF0aW9uUmVjaXBpZW50LmludGVuZGVkUmVjaXBpZW50IGFzIGludGVuZGVkUmVjaXBpZW50ICB0aGVuIHsKICAgICAgICAgICAgaW50ZW5kZWRSZWNpcGllbnQuaW5mb3JtYXRpb25SZWNpcGllbnQgYXMgaW5mb3JtYXRpb25SZWNpcGllbnQyIHRoZW57CiAgICAgICAgICAgICAgICBpbmZvcm1hdGlvblJlY2lwaWVudCAtPiB0Z3QuYXR0ZXN0ZXIgYXMgYXR0ZXN0ZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb25SZWNpcGllbnQyIC0+IGF0dGVzdGVyLm1vZGUgPSAncHJvZmVzc2lvbmFsJyAibW9kZSI7CiAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb25SZWNpcGllbnQyIC0+ICBidW5kbGUuZW50cnkgYXMgZTE5LCBlMTkucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUxOS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyJykgYXMgcHJhY3RpdGlvbmVyICB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uUmVjaXBpZW50Mi0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb25SZWNpcGllbnQyLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uUmVjaXBpZW50MiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvcm1hdGlvblJlY2lwaWVudDIgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2luZm9ybWF0aW9uUmVjaXBpZW50JyJjb2RlIjsKICAgICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWRSZWNpcGllbnQuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0OwogICAgICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTE5LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCAgYXR0ZXN0ZXIucGFydHkgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZTEsIHJlZmVyZW5jZTEucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSJyIiA7CiAgICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICAgICAgICBpbnRlbmRlZFJlY2lwaWVudC5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7CiAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWRSZWNpcGllbnQuaWQgYXMgaWQgd2hlcmUgKHJvb3QhPScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgICAgIH0iZGl2ZXJzbyI7CiAgICAgICAgICAgICAgICAgICAgICAgIGludGVuZGVkUmVjaXBpZW50LmFkZHIgLT4gcHJhY3RpdGlvbmVyLmFkZHJlc3M7CiAgICAgICAgICAgICAgICAgICAgICAgIGludGVuZGVkUmVjaXBpZW50LnRlbGVjb20gLT4gcHJhY3RpdGlvbmVyLnRlbGVjb207CiAgICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uUmVjaXBpZW50Mi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICBpbmZvcm1hdGlvblJlY2lwaWVudDIuYmlydGhUaW1lIGFzIGJ0IHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnQudmFsdWUgYXMgdiAtPiBwcmFjdGl0aW9uZXIuYmlydGhEYXRlID0gKHYuZGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0iZGF0ZSI7CiAgICAgICAgICAgICAgICAgICAgfSJQZXJzb25SZWNpcGllbnQiOwogICAgICAgICAgICAgICAgfSJpbnRlbmRlZFJlY2lwaWVuUHJhY3QiOwogICAgICAgICAgICB9ImF0dGVzdGVyT3JnIjsKICAgICAgICAgICAgaW50ZW5kZWRSZWNpcGllbnQucmVjZWl2ZWRPcmdhbml6YXRpb24gYXMgcmVjZWl2ZWRPcmdhbml6YXRpb24gdGhlbnsKICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uUmVjaXBpZW50IC0+IHRndC5hdHRlc3RlciBhcyBhdHRlc3RlciB0aGVuIHsKICAgICAgICAgICAgICAgIHJlY2VpdmVkT3JnYW5pemF0aW9uIC0+IGF0dGVzdGVyLm1vZGUgPSAnb2ZmaWNpYWwnICJtb2RlIjsKICAgICAgICAgICAgICAgIHJlY2VpdmVkT3JnYW5pemF0aW9uIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMjAsIGUyMC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTIwLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24gdGhlbiB7CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICByZWNlaXZlZE9yZ2FuaXphdGlvbi0+b3JnYW5pemF0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZE9yZ2FuaXphdGlvbi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkT3JnYW5pemF0aW9uIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWRPcmdhbml6YXRpb24gLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2luZm9ybWF0aW9uUmVjaXBpZW50L3JlY2VpdmVkT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICByZWNlaXZlZE9yZ2FuaXphdGlvbi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWRPcmdhbml6YXRpb24tPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMywgIGUyMC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQzKSwgIGF0dGVzdGVyLnBhcnR5ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UyLCByZWZlcmVuY2UyLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbi5pZCk7CiAgICAgICAgICAgICAgICAgICAgfSJyIiA7CiAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgICAgcmVjZWl2ZWRPcmdhbml6YXRpb24ubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgICAgICAgICAgcmVjZWl2ZWRPcmdhbml6YXRpb24udGVsZWNvbSAtPiBvcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgICAgICAgICAgIHJlY2VpdmVkT3JnYW5pemF0aW9uLmFkZHIgLT4gb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgICAgICByZWNlaXZlZE9yZ2FuaXphdGlvbi5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBhc09yZ2FuaXphdGlvblBhcnRPZiAtPiBidW5kbGUuZW50cnkgYXMgZTIxLCBlMjEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTIxLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24yICwgb3JnYW5pemF0aW9uMi5pZCA9IHV1aWQoKSBhcyB1dWlkNCwgIGUyMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uJywgdXVpZDQpLCBvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2VvciwgcmVmZXJlbmNlb3IucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uJyArICVvcmdhbml6YXRpb24yLmlkKSB0aGVuIHsKICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2YtPm9yZ2FuaXphdGlvbjIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICAgIGFzT3JnYW5pemF0aW9uUGFydE9mLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2YgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgICAgICBhc09yZ2FuaXphdGlvblBhcnRPZiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvaW5mb3JtYXRpb25SZWNpcGllbnQvcmVjZWl2ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2YnImNvZGUiOwogICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2YuaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICBhc09yZ2FuaXphdGlvblBhcnRPZi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uMi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDQsICBlMjEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksIG9yZ2FuaXphdGlvbi5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZW9yLCByZWZlcmVuY2Vvci5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb24yLmlkKTsKICAgICAgICAgICAgICAgICAgICB9InIiIDsKICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2YuY29kZSAtPiBvcmdhbml6YXRpb24yLnR5cGU7CiAgICAgICAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2Yuc3RhdHVzQ29kZSBhcyBzdGF0dXMgd2hlcmUgKHZhbHVlID0nYWN0aXZlJykgLT4gb3JnYW5pemF0aW9uMi5hY3RpdmUgPSBjcmVhdGUoJ2Jvb2xlYW4nKSwgb3JnYW5pemF0aW9uMi5hY3RpdmUgPSAndHJ1ZSc7CiAgICAgICAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2Yud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVPcmdhbml6YXRpb24zIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMjIsIGUyMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMjIucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjMgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW5pemF0aW9uMy0+b3JnYW5pemF0aW9uMy5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW5pemF0aW9uMy0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbjMgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24zIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9pbmZvcm1hdGlvblJlY2lwaWVudC9yZWNlaXZlZE9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW5pemF0aW9uMy5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24zLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW5pemF0aW9uMy0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uMy5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlMjIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNSksICBvcmdhbml6YXRpb24yLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlb3IsIHJlZmVyZW5jZW9yLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjMuaWQpOwogICAgICAgICAgICAgICAgICAgICAgICB9InIiIDsgICAKICAgICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbjMubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbjMubmFtZSA9ICh2Lm90aGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24zLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uMy50ZWxlY29tOwogICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbjMuYWRkciAtPiBvcmdhbml6YXRpb24zLmFkZHJlc3M7CiAgICAgICAgICAgICAgICAgICAgfSJ3aG9sZU9yZ2FuaXphdGlvbiI7CiAgICAgICAgICAgICAgICB9ImFzT3JnYW5pemF0aW9uUGFydE9mIjsKICAgICAgICAgICAgICAgIH0icmVjZWl2ZWRPcmdhbml6YXRpb24iOwogICAgICAgICAgICB9ICJpbnRlbmRlZFJlY2lwaWVuT3JnIjsKICAgICAgICAgICAgfSJhdHRlc3Rlck9yZyI7CiAgICAgICAgfSJpbnRlbmRlZFJlY2lwZW50IjsKICAgIAp9ImluZm9ybWF0aW9uUmVjaXBlbnQiOwoKIC8vU1RBUlQgTGVnYWwgQXV0aGVudGljYXRvcgogc3JjLmxlZ2FsQXV0aGVudGljYXRvciBhcyBsZWdhbEF1dGggdGhlbiB7CiBsZWdhbEF1dGggLT4gdGd0LmF0dGVzdGVyIGFzIGF0dGVzdGVyIHRoZW4gewogICAgIGxlZ2FsQXV0aC5hc3NpZ25lZEVudGl0eSBhcyBlbnRpdHkgdGhlbiB7CiAgICAgICAvLyBDb2RpY2UgRmlzY2FsZQogICAgICAgZW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSAtPiAgYnVuZGxlLmVudHJ5IGFzIGUyMywgZTIzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlMjMucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lclJvbGUnKSBhcyBwcmFjdGl0aW9uZXJSb2xlLCAgcHJhY3RpdGlvbmVyUm9sZS5pZCA9IHV1aWQoKSBhcyB1dWlkLCAgZTIzLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycsIHV1aWQpLCByZXF1ZXN0LnVybCA9ICdQcmFjdGl0aW9uZXJSb2xlJyB0aGVuIHsKICAgICAgICAgICAgICAgbGVnYWxBdXRoIC0+IGF0dGVzdGVyLm1vZGUgPSAnbGVnYWwnICJtb2RlIjsKICAgICAgICAgICAgICAgbGVnYWxBdXRoLnRpbWUgLT4gYXR0ZXN0ZXIudGltZTsKICAgICAgICAgICAgICAgbGVnYWxBdXRoIC0+IGF0dGVzdGVyLnBhcnR5ID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nICsgJXByYWN0aXRpb25lclJvbGUuaWQpIHRoZW57CiAgICAgICAgICAgICBlbnRpdHkgLT4gIGJ1bmRsZS5lbnRyeSBhcyBlMjQsIGUyNC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMjQucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuIHsKICAgICAgICAgICAgIGVudGl0eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgICBlbnRpdHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICBlbnRpdHkgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgICBlbnRpdHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2xlZ2FsQXV0aGVudGljYXRvciciY29kZSI7CiAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgZW50aXR5LmlkIGFzIGlkIC0+IHByYWN0aXRpb25lci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7CiAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDEsICBlMjQuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMSksIHByYWN0aXRpb25lclJvbGUucHJhY3RpdGlvbmVyID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJyArICVwcmFjdGl0aW9uZXIuaWQpOwogICAgICAgICAgICAgICAgIH0iciIgOyAKICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICBlbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gewogICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsKICAgICAgICAgICAgICAgZW50aXR5LmFkZHIgLT4gcHJhY3RpdGlvbmVyLmFkZHJlc3M7CiAgICAgICAgICAgICAgIGVudGl0eS50ZWxlY29tIC0+IHByYWN0aXRpb25lci50ZWxlY29tOwogICAgICAgICAgICAgICBlbnRpdHkuYXNzaWduZWRQZXJzb24gYXMgcGVyc29uIHRoZW4gewogICAgICAgICAgICAgICAgIHBlcnNvbi5uYW1lIC0+IHByYWN0aXRpb25lci5uYW1lOwogICAgICAgICAgICAgICAgIHBlcnNvbi5iaXJ0aFRpbWUgYXMgYmlydGhUaW1lIHRoZW57CiAgICAgICAgICAgICAgICAgICBiaXJ0aFRpbWUudmFsdWUgYXMgZGF0ZSAtPiBwcmFjdGl0aW9uZXIuYmlydGhEYXRlID0gdHJ1bmNhdGUoZGF0ZSwgMTApICJiaXJ0aFRpbWVsZWdhbCI7CiAgICAgICAgICAgICAgICAgfSAiYmlydGgiOwogICAgICAgICAgICAgICB9InBlcnNvbiI7CiAgICAgICAgICAgICB9InByYWN0aXRpb25lciI7CiAgICAgICAgICAgICBlbnRpdHkuY29kZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGU7IAogICAgICAgICAgICAgZW50aXR5LnJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGFzIHJhcHJlc2VudGVkT3JnIC0+ICBidW5kbGUuZW50cnkgYXMgZTI1LCBlMjUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTI1LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24gdGhlbiB7CiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIHJhcHJlc2VudGVkT3JnLT5vcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICAgcmFwcmVzZW50ZWRPcmctPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgIHJhcHJlc2VudGVkT3JnIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICAgICByYXByZXNlbnRlZE9yZyAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvbGVnYWxBdXRoZW50aWNhdG9yL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIHJhcHJlc2VudGVkT3JnLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgICByYXByZXNlbnRlZE9yZy0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMjUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMiksICBwcmFjdGl0aW9uZXJSb2xlLm9yZ2FuaXphdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uLmlkKTsKICAgICAgICAgICAgICAgICAgIH0iciIgOwogICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgICByYXByZXNlbnRlZE9yZy5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgIHJhcHJlc2VudGVkT3JnLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uLnRlbGVjb207CiAgICAgICAgICAgICAgIHJhcHJlc2VudGVkT3JnLmFkZHIgLT4gb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgICAgIHJhcHJlc2VudGVkT3JnLmFzT3JnYW5pemF0aW9uUGFydE9mIGFzIGFzT3JnUGFydE9mIHRoZW4gewogICAgICAgICAgICAgICAgICAgYXNPcmdQYXJ0T2YgYXMgYXNPcmdQYXJ0T2YxIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMjYsIGUyNi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMjYucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIGFzb3JnYW5pemF0aW9uICB0aGVuIHsKICAgICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMS0+YXNvcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvbGVnYWxBdXRoZW50aWNhdG9yL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uL2FzT3JnYW5pemF0aW9uUGFydE9mJyJjb2RlIjsKICAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICBhc09yZ1BhcnRPZjEuaWQgYXMgaWQgLT4gYXNvcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICAgYXNPcmdQYXJ0T2YxLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IGFzb3JnYW5pemF0aW9uLmlkICA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMjYuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMiksICBvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVhc29yZ2FuaXphdGlvbi5pZCk7CiAgICAgICAgICAgICAgICAgICAgICAgfSJyIiA7CiAgICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMS5jb2RlIC0+IGFzb3JnYW5pemF0aW9uLnR5cGU7CiAgICAgICAgICAgICAgICAgICAgICAgYXNPcmdQYXJ0T2YxLnN0YXR1c0NvZGUgYXMgc3RhdHVzIHdoZXJlIChjb2RlPSdhY3RpdmUnKSAtPiBhc29yZ2FuaXphdGlvbi5hY3RpdmUgPSBjcmVhdGUoJ2Jvb2xlYW4nKSwgYXNvcmdhbml6YXRpb24uYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMS53aG9sZU9yZ2FuaXphdGlvbiBhcyB3aG9sZU9yZyB0aGVuewogICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZyBhcyB3aG9sZU9yZzEgLT4gYnVuZGxlLmVudHJ5IGFzIGUyNywgZTI3LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUyNy5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgd2hvbGVvcmdhbml6YXRpb24sICB3aG9sZW9yZ2FuaXphdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkNCwgIGUyNy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQ0KSwgYXNvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICV3aG9sZW9yZ2FuaXphdGlvbi5pZCkgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxLT53aG9sZW9yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9sZWdhbEF1dGhlbnRpY2F0b3IvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2Yvd2hvbGVPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxLmlkIGFzIGlkIC0+IHdob2xlb3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMS0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHdob2xlb3JnYW5pemF0aW9uLmlkPSAociArJy0nKyBleHQpIGFzIHV1aWQ0LCAgZTI3LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDQpLCBhc29yZ2FuaXphdGlvbi5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJXdob2xlb3JnYW5pemF0aW9uLmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0iciIgOwogICAgICAgICAgICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxLm5hbWUgYXMgdiAtPiB3aG9sZW9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxLnRlbGVjb20gLT4gd2hvbGVvcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMS5hZGRyIC0+IHdob2xlb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0id2hvbGVPcmcxIjsKICAgICAgICAgICAgICAgICAgICAgICB9Indob2xlT3JnIjsKICAgICAgICAgICAgICAgICAgIH0iYXNPcmdQTyI7ICAgCiAgICAgICAgICAgICAgIH0iYXNPcmdJRCI7CiAgICAgICAgICAgICB9IkxBT3JnYW5peiI7CiAgICAgICAgICB9IlByYWN0aXRpb25lckxlZ2FsIjsKICAgICAgICB9IlByYWN0aXRpb25lclJPTGxlZ2FsIjsKCiAgICAgLy9QYXJ0aXRhIElWQQogICAgICAgZW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNi4zLjInKS0+YnVuZGxlLmVudHJ5IGFzIGUyNTEsIGUyNTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTI1MS5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uIHRoZW4gewogICAgICAgIGVudGl0eSAtPiBhdHRlc3Rlci5tb2RlID0gJ29mZmljaWFsJyAibW9kZSI7CiAgICAgICAgZW50aXR5LT5vcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICBlbnRpdHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICBlbnRpdHkgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICBlbnRpdHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2xlZ2FsQXV0aGVudGljYXRvclBhcnRpdGFJVkEnImNvZGUiOwogICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgZW50aXR5LmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgIGVudGl0eS0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUyNTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMiksICBhdHRlc3Rlci5wYXJ0eSA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uLmlkKTsKICAgICAgICAgICAgICAgfSJyIiA7CiAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgIH0iT3JnUGFydGl0YUlWQSI7CiAgICAgICB9ICJlbnRpdHkiOwogICAgIH0ibGVnYWxBdXRoIjsKICAgfSJMZWdhbEF1dGhlbnRpY2F0b3IiOwoKICAvLyBTVEFSVCBBdXRoZW50aWNhdG9yIAogIHNyYy5hdXRoZW50aWNhdG9yIGFzIEF1dGggLT4gIGJ1bmRsZS5lbnRyeSBhcyBlMjgsIGUyOC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgZTI4LnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXJSb2xlJykgYXMgcHJhY3RpdGlvbmVyUm9sZSwgIHByYWN0aXRpb25lclJvbGUuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlMjguZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lclJvbGUvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdQcmFjdGl0aW9uZXJSb2xlJyB0aGVuIHsKICAgQXV0aCAtPiB0Z3QuYXR0ZXN0ZXIgYXMgYXR0ZXN0ZXIgdGhlbiB7CiAgICAgIEF1dGgudGltZSAtPiBhdHRlc3Rlci50aW1lOwogICAgICBBdXRoIC0+IGF0dGVzdGVyLm1vZGUgPSAncHJvZmVzc2lvbmFsJyAibW9kZSI7CiAgICAgIEF1dGguYXNzaWduZWRFbnRpdHkgYXMgZW50aXR5IC0+ICBhdHRlc3Rlci5wYXJ0eSA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lclJvbGUvJyArICVwcmFjdGl0aW9uZXJSb2xlLmlkKSB0aGVuIHsKICAgICAgICBlbnRpdHkuY29kZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGU7CiAgICAgICAgZW50aXR5IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMjksIGUyOS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMjkucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciwgIHByYWN0aXRpb25lci5pZCA9IHV1aWQoKSBhcyB1dWlkMiwgIGUyOS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyJywgdXVpZDIpLCAgcHJhY3RpdGlvbmVyUm9sZS5wcmFjdGl0aW9uZXIgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lcicgKyAlcHJhY3RpdGlvbmVyLmlkKSB0aGVuIHsKICAgICAgICAgIAogICAgICAgICAgZW50aXR5LT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICBlbnRpdHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgZW50aXR5IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgIGVudGl0eSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYXV0aGVudGljYXRvciciY29kZSI7CiAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAKICAgICAgICAgIGVudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7CiAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMjkuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksICBwcmFjdGl0aW9uZXJSb2xlLnByYWN0aXRpb25lciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKTsKICAgICAgICAgICAgfSJyIiA7IAogICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgZW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsKICAgICAgICBlbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3QhPScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgIH0iZGl2ZXJzbyI7CiAgICAgICAgZW50aXR5LmFkZHIgLT4gcHJhY3RpdGlvbmVyLmFkZHJlc3MgImFkZHJlc3MiOwogICAgICAgIGVudGl0eS50ZWxlY29tIC0+IHByYWN0aXRpb25lci50ZWxlY29tICJ0ZWxlY29tIjsKICAgICAgICBlbnRpdHkuYXNzaWduZWRQZXJzb24gYXMgcGVyc29uIHRoZW4gewogICAgICAgICAgcGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWUgInBlcnNvbk5hbWUiOwogICAgICAgICAgcGVyc29uLmJpcnRoVGltZSBhcyBiaXJ0aFRpbWUgdGhlbnsKICAgICAgICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gcHJhY3RpdGlvbmVyLmJpcnRoRGF0ZSA9IHRydW5jYXRlKGRhdGUsIDEwKSAiYmlydGhUaW1lYXV0aCI7CiAgICAgICAgICB9ICJiaXJ0aCI7CiAgICAgICAgfSJwZXJzb24iOyAKCiAgICAgIH0gInByYWN0aXRpb25lciI7CiAgICAgIGVudGl0eS5yZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBhcyByZXBvcmdhbml6YXRpb24gLT4gYnVuZGxlLmVudHJ5IGFzIGUzMCwgZTMwLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUzMC5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uICB0aGVuIHsKICAgICAgICAKICAgICAgICByZXBvcmdhbml6YXRpb24tPm9yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICByZXBvcmdhbml6YXRpb24tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgIHJlcG9yZ2FuaXphdGlvbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgcmVwb3JnYW5pemF0aW9uIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9hdXRoZW50aWNhdG9yL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICB9Im1ldGEiOwogICAgICAgIAogICAgICAgIHJlcG9yZ2FuaXphdGlvbi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgcmVwb3JnYW5pemF0aW9uLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQzLCAgZTMwLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDMpLCBwcmFjdGl0aW9uZXJSb2xlLm9yZ2FuaXphdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uLmlkKTsKICAgICAgICAgIH0iciIgOyAgIAogICAgICB9ImlkZW50aWZpZXIiOwogICAgICByZXBvcmdhbml6YXRpb24ubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICByZXBvcmdhbml6YXRpb24udGVsZWNvbSAtPiBvcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgcmVwb3JnYW5pemF0aW9uLmFkZHIgLT4gb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAKICAgICAgcmVwb3JnYW5pemF0aW9uLmFzT3JnYW5pemF0aW9uUGFydE9mIGFzIG9yZ2FuaXphdGlvbnBhcnRvZi0+IGJ1bmRsZS5lbnRyeSBhcyBlMzEsIGUzMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMzEucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIGFzT3JnYW5pemF0aW9ucGFydG9mIHRoZW4gewogICAgICAgIAogICAgICAgIG9yZ2FuaXphdGlvbnBhcnRvZi0+YXNPcmdhbml6YXRpb25wYXJ0b2YubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgb3JnYW5pemF0aW9ucGFydG9mLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICBvcmdhbml6YXRpb25wYXJ0b2YgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgIG9yZ2FuaXphdGlvbnBhcnRvZiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYXV0aGVudGljYXRvci9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgfSJtZXRhIjsKICAgICAgICAKICAgICAgICBvcmdhbml6YXRpb25wYXJ0b2YuaWQgYXMgaWQgLT4gYXNPcmdhbml6YXRpb25wYXJ0b2YuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgb3JnYW5pemF0aW9ucGFydG9mLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gYXNPcmdhbml6YXRpb25wYXJ0b2YuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQ0LCBlMzEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksIG9yZ2FuaXphdGlvbi5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJWFzT3JnYW5pemF0aW9ucGFydG9mLmlkKTsKICAgICAgICAgIH0iciIgOyAgIAogICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgIG9yZ2FuaXphdGlvbnBhcnRvZi5jb2RlIC0+IGFzT3JnYW5pemF0aW9ucGFydG9mLnR5cGU7CiAgICAgICAgb3JnYW5pemF0aW9ucGFydG9mLnN0YXR1c0NvZGUgYXMgc3RhdHVzIHdoZXJlIChjb2RlPSdhY3RpdmUnKSAtPiBhc09yZ2FuaXphdGlvbnBhcnRvZi5hY3RpdmUgPSBjcmVhdGUoJ2Jvb2xlYW4nKSwgYXNPc3JnYW5pemF0aW9ucGFydG9mLmFjdGl2ZSA9ICd0cnVlJzsgICAgIAogICAgICAgICAgICBvcmdhbml6YXRpb25wYXJ0b2Yud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVvcmcgLT4gYnVuZGxlLmVudHJ5IGFzIGUzMiwgZTMyLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUzMi5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgd2hvbGVPcmdhbml6YXRpb24sICB3aG9sZU9yZ2FuaXphdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkNSwgIGUzMi5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQ1KSwgYXNPcmdhbml6YXRpb25wYXJ0b2YucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICV3aG9sZU9yZ2FuaXphdGlvbi5pZCkgdGhlbiB7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgd2hvbGVvcmctPndob2xlT3JnYW5pemF0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgIHdob2xlb3JnLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICB3aG9sZW9yZyAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgd2hvbGVvcmcgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2F1dGhlbnRpY2F0b3IvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2Yvd2hvbGVPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgd2hvbGVvcmcuaWQgYXMgaWQgLT4gd2hvbGVPcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgICAgd2hvbGVvcmctPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiB3aG9sZU9yZ2FuaXphdGlvbi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlMzIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNSksIGFzT3JnYW5pemF0aW9ucGFydG9mLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAld2hvbGVPcmdhbml6YXRpb24uaWQpOwogICAgICAgICAgICAgICAgfSJyIiA7ICAKICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgd2hvbGVvcmcubmFtZSBhcyB2IC0+IHdob2xlT3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgIHdob2xlb3JnLnRlbGVjb20gLT4gd2hvbGVPcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgICAgICAgd2hvbGVvcmcuYWRkciAtPiB3aG9sZU9yZ2FuaXphdGlvbi5hZGRyZXNzOwoKICAgICAgICAgICAgfSJ3aG9sZW9yZyI7CiAgICAgICAgfSJvcmdhbml6YXRpb25wYXJ0b2YiOwogICAgfSAicmVwb3JnYW5pemF0aW9uIjsKICAgIH0iZW50aXR5IjsgCiAgICB9ICJhdHRlc3RlciI7CiAgfSAiQXV0aCI7CiAgLy8gUEFSVElDSVBBTlQKICBzcmMucGFydGljaXBhbnQgYXMgcGFydGljaXBhbnQgd2hlcmUgKHR5cGVDb2RlIT0nSU5EJykgdGhlbnsKICAgICAgICAgcGFydGljaXBhbnQuYXNzb2NpYXRlZEVudGl0eSBhcyBhc3NvY2lldGVkRW50aXR5ICAtPiBidW5kbGUuZW50cnkgYXMgZTMxMywgICBlMzEzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTMxMy5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyUm9sZScpIGFzIHByYWN0aXRpb25lclJvbGUsICBwcmFjdGl0aW9uZXJSb2xlLmlkID0gdXVpZCgpIGFzIHV1aWQxICwgIGUzMTMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lclJvbGUvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdQcmFjdGl0aW9uZXJSb2xlJywgZW5jb3VudGVyLnBhcnRpY2lwYW50ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyBwYXJ0aWNpcGFudDEgdGhlbiB7IAogICAgICAgICAgLy8gIHBhcnRpY2lwYW50LnRpbWUgYXMgdGltZS0+cGFydGljaXBhbnQxLnBlcmlvZCBhcyBwZXJpb2QgLHBlcmlvZC5zdGFydD0odGltZS52YWx1ZSk7CiAgICAgICAgICAgIHBhcnRpY2lwYW50LT5wYXJ0aWNpcGFudDEucGVyaW9kPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gewogICAgICAgICAgICAgICAgcGFydGljaXBhbnQudGltZSBhcyB0aW1lIC0+cGVyaW9kLnN0YXJ0PSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgc3RhcnQgdGhlbiBUU0RhdGVUaW1lKHRpbWUsc3RhcnQpOwogICAgICAgICAgICAgIH0icGVyaW9kIjsKICAgICAgICAgICAgICBwYXJ0aWNpcGFudCBhcyBwIC0+IHBhcnRpY2lwYW50MS50eXBlIGFzIHR5cGUgdGhlbiB7IAogICAgICAgICAgICAgICAgcCAtPiB0eXBlLmNvZGluZyBhcyBjb2RpbmcgdGhlbnsKICAgICAgICAgICAgICAgICAgcC0+IGNvZGluZy5jb2RlID0gKHAudHlwZUNvZGUpICJjb2RpY2UiOwogICAgICAgICAgICAgICAgICBwLT4gY29kaW5nLnN5c3RlbSA9ICdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVBhcnRpY2lwYXRpb25UeXBlJyAic3lzdGVtIjsKICAgICAgICAgICAgICAgIH0gImNvZGVUeXBlIjsgCiAgICAgICAgICAgICAgfSJ0eXBlIjsKICAgICAgICAgICAgICBwYXJ0aWNpcGFudC0+IHBhcnRpY2lwYW50MS5pbmRpdmlkdWFsID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2VwYXJ0LCByZWZlcmVuY2VwYXJ0LnJlZmVyZW5jZSA9ICAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycgKyAlcHJhY3RpdGlvbmVyUm9sZS5pZCkicGFyIjsKICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5mdW5jdGlvbkNvZGUgLT4gcHJhY3RpdGlvbmVyUm9sZS5jb2RlOwogICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkgIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMzMsIGUzMy5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMzMucmVzb3VyY2UgPSBjcmVhdGUoJ1ByYWN0aXRpb25lcicpIGFzIHByYWN0aXRpb25lciB0aGVuIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5IC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L3BhcnRpY2lwYW50JyJjb2RlIjsKICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7CiAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsIGUzMy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgIHByYWN0aXRpb25lclJvbGUucHJhY3RpdGlvbmVyID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSA7CiAgICAgICAgICAgICAgICAgIH0iciIgOyAgICAKICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gewogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdQcmFjdGl0aW9uZXI/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgfSIyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjIiOwogICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3QhPScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgIH0iZGl2ZXJzbyI7CiAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS5jb2RlIC0+IHByYWN0aXRpb25lclJvbGUuY29kZTsKICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5LmFkZHIgLT4gcHJhY3RpdGlvbmVyLmFkZHJlc3M7CiAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS50ZWxlY29tIC0+IHByYWN0aXRpb25lci50ZWxlY29tOwogICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkuYXNzb2NpYXRlZFBlcnNvbiBhcyBhc3NvY2lhdGVkcGVyc29uIHRoZW4gewogICAgICAgICAgICAgIGFzc29jaWF0ZWRwZXJzb24ubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsKICAgICAgICAgICAgICBhc3NvY2lhdGVkcGVyc29uLmJpcnRoVGltZSBhcyBiaXJ0aFRpbWUgdGhlbnsKICAgICAgICAgICAgICAgIGJpcnRoVGltZS52YWx1ZSBhcyBkYXRlIC0+IHByYWN0aXRpb25lci5iaXJ0aERhdGUgPSB0cnVuY2F0ZShkYXRlLCAxMCkgImJpcnRoVGltZWxlZ2FsIjsKICAgICAgICAgICAgICB9ICJiaXJ0aCI7CiAgICAgICAgICAgIH0gIm5hbWUiOwogICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5LnNjb3BpbmdPcmdhbml6YXRpb24gYXMgc2NvcGluZ09yZ2FuaXphdGlvbiAtPiAgYnVuZGxlLmVudHJ5IGFzIGUzNCwgZTM0LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUzNC5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uIHRoZW57CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi0+b3JnYW5pemF0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgIHNjb3BpbmdPcmdhbml6YXRpb24tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgIHNjb3BpbmdPcmdhbml6YXRpb24gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgIHNjb3BpbmdPcmdhbml6YXRpb24gLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L3BhcnRpY2lwYW50L3Njb3BpbmdPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDMsICBlMzQuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMyksICBwcmFjdGl0aW9uZXJSb2xlLm9yZ2FuaXphdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbi5pZCk7CiAgICAgICAgICAgICAgICB9InIiIDsgCiAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi50ZWxlY29tIC0+IG9yZ2FuaXphdGlvbi50ZWxlY29tOwogICAgICAgICAgICAgIHNjb3BpbmdPcmdhbml6YXRpb24uYWRkciAtPiBvcmdhbml6YXRpb24uYWRkcmVzczsgCiAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBPcmdQYXJ0T2YgLT4gYnVuZGxlLmVudHJ5IGFzIGUzNSwgIGUzNS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTM1LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24xIHRoZW57CiAgICAgICAgICAgICAgICBPcmdQYXJ0T2YuaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMS5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICBPcmdQYXJ0T2YtPm9yZ2FuaXphdGlvbjEubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvcGFydGljaXBhbnQvc2NvcGluZ09yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uMS5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDQsICBlMzUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksICBvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjEuaWQpIDsKICAgICAgICAgICAgICAgICAgfSJyIiA7ICAgCiAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi5jb2RlIC0+IG9yZ2FuaXphdGlvbjEudHlwZTsKICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi5zdGF0dXNDb2RlIGFzIHN0YXR1cyB3aGVyZSAodmFsdWUgPSdhY3RpdmUnKSAtPiBvcmdhbml6YXRpb24xLmFjdGl2ZSA9IGNyZWF0ZSgnYm9vbGVhbicpLCBvcmdhbml6YXRpb24xLmFjdGl2ZSA9IHRydWU7CiAgICAgICAgICAgICAgICBPcmdQYXJ0T2Yud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVPcmdhbiAtPiBidW5kbGUuZW50cnkgYXMgZTM2LCBlMzYucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUzNi5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uMiB0aGVuIHsKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4tPm9yZ2FuaXphdGlvbjIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvcGFydGljaXBhbnQvc2NvcGluZ09yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICAgICB9Im1ldGEiOwoKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbjEuaWQ9IChyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlMzYuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNSksIG9yZ2FuaXphdGlvbjEucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjIuaWQpICA7CiAgICAgICAgICAgICAgICAgICAgfSJyIiA7ICAgCiAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLm5hbWUgYXMgdiAtPiBvcmdhbml6YXRpb24yLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4udGVsZWNvbSAtPiBvcmdhbml6YXRpb24yLnRlbGVjb207CiAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4uYWRkciAtPiBvcmdhbml6YXRpb24yLmFkZHJlc3M7CiAgICAgICAgICAgICAgICB9Indob2xlT3JnYW4iOwogICAgICAgICAgICAgIH0iT3JnUGFydE9mIjsgICAgICAgCiAgICAgICAgICAgIH0ic2NvcGluZ09yZ2FuaXphdGlvbiI7CiAgICAgICAgICB9ICJhc3NvY2lldGVkRW50aXR5IjsKICAgICAgICB9ICJQYXJ0aWNpcGFudDEiOwogICAgICAgIHBhcnRpY2lwYW50LmFzc29jaWF0ZWRFbnRpdHkgYXMgYXNzb2NpZXRlZEVudGl0eSB3aGVyZSAoY2xhc3NDb2RlPSdQUk9WJyktPiBidW5kbGUuZW50cnkgYXMgZTMxMywgICBlMzEzLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCAgZTMxMy5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyUm9sZScpIGFzIHByYWN0aXRpb25lclJvbGUsICBwcmFjdGl0aW9uZXJSb2xlLmlkID0gdXVpZCgpIGFzIHV1aWQxICwgIGUzMTMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lclJvbGUvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdQcmFjdGl0aW9uZXJSb2xlJywgZW5jb3VudGVyLnBhcnRpY2lwYW50ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyBwYXJ0aWNpcGFudDIgdGhlbiB7IAogICAgICAgIAogICAgICAgICAgLy9wYXJ0aWNpcGFudC50aW1lIGFzIHRpbWUtPnBhcnRpY2lwYW50Mi5wZXJpb2QgYXMgcGVyaW9kLCBwZXJpb2Quc3RhcnQ9KHRpbWUudmFsdWUpOwogICAgICAgICAgICBwYXJ0aWNpcGFudC0+cGFydGljaXBhbnQyLnBlcmlvZD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIHsKICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50LnRpbWUgYXMgdGltZSAtPnBlcmlvZC5zdGFydD0gY3JlYXRlKCdkYXRlVGltZScpIGFzIHN0YXJ0IHRoZW4gVFNEYXRlVGltZSh0aW1lLHN0YXJ0KTsKICAgICAgICAgICAgICB9InBlcmlvZCI7CiAgICAgICAgICAgICAgcGFydGljaXBhbnQgYXMgcCAtPiBwYXJ0aWNpcGFudDIudHlwZSBhcyB0eXBlIHRoZW4geyAKICAgICAgICAgICAgICAgIHAgLT4gdHlwZS5jb2RpbmcgYXMgY29kaW5nIHRoZW57CiAgICAgICAgICAgICAgICAgIHAtPiBjb2RpbmcuY29kZSA9IChwLnR5cGVDb2RlKSAiY29kaWNlIjsKICAgICAgICAgICAgICAgICAgcC0+IGNvZGluZy5zeXN0ZW0gPSAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1QYXJ0aWNpcGF0aW9uVHlwZScgInN5c3RlbSI7CiAgICAgICAgICAgICAgICB9ICJjb2RlVHlwZSI7IAogICAgICAgICAgICAgIH0idHlwZSI7CiAgICAgICAgICAgICAgcGFydGljaXBhbnQtPiBwYXJ0aWNpcGFudDIuaW5kaXZpZHVhbCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlcGFydCwgcmVmZXJlbmNlcGFydC5yZWZlcmVuY2UgPSAgKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nICsgJXByYWN0aXRpb25lclJvbGUuaWQpInBhciI7CiAgICAgICAgICAgICAgcGFydGljaXBhbnQuZnVuY3Rpb25Db2RlIC0+IHByYWN0aXRpb25lclJvbGUuY29kZTsKICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5ICAtPiBidW5kbGUuZW50cnkgYXMgZTMzLCBlMzMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTMzLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHktPnByYWN0aXRpb25lci5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHktPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5IC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9wYXJ0aWNpcGFudCciY29kZSI7CiAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkuaWQgYXMgaWQgLT4gcHJhY3RpdGlvbmVyLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0OwogICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBwcmFjdGl0aW9uZXIuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQyLCBlMzMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nLCB1dWlkMiksICBwcmFjdGl0aW9uZXJSb2xlLnByYWN0aXRpb25lciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgOwogICAgICAgICAgICAgICAgICB9InIiIDsgICAgCiAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsKICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290IT0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7CiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICB9ImRpdmVyc28iOwogICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkuY29kZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGU7CiAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS5hZGRyIC0+IHByYWN0aXRpb25lci5hZGRyZXNzOwogICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkudGVsZWNvbSAtPiBwcmFjdGl0aW9uZXIudGVsZWNvbTsKICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5LmFzc29jaWF0ZWRQZXJzb24gYXMgYXNzb2NpYXRlZHBlcnNvbiB0aGVuIHsKICAgICAgICAgICAgICBhc3NvY2lhdGVkcGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7CiAgICAgICAgICAgICAgYXNzb2NpYXRlZHBlcnNvbi5iaXJ0aFRpbWUgIGFzIGJpcnRoVGltZSB0aGVuewogICAgICAgICAgICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gcHJhY3RpdGlvbmVyLmJpcnRoRGF0ZSA9IHRydW5jYXRlKGRhdGUsIDEwKSAiYmlydGhUaW1lbGVnYWwiOwogICAgICAgICAgICAgIH0gImJpcnRoIjsKICAgICAgICAgICAgfSAibmFtZSI7CiAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkuc2NvcGluZ09yZ2FuaXphdGlvbiBhcyBzY29waW5nT3JnYW5pemF0aW9uIC0+ICBidW5kbGUuZW50cnkgYXMgZTM0LCBlMzQucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTM0LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24gdGhlbnsKICAgICAgICAgICAgICAKICAgICAgICAgICAgICBzY29waW5nT3JnYW5pemF0aW9uLT5vcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvcGFydGljaXBhbnQvc2NvcGluZ09yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAgICAKICAgICAgICAgICAgICBzY29waW5nT3JnYW5pemF0aW9uLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICBzY29waW5nT3JnYW5pemF0aW9uLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uLmlkID0gKHIgKyctJysgZXh0KSBhcyB1dWlkMywgIGUzNC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQzKSwgIHByYWN0aXRpb25lclJvbGUub3JnYW5pemF0aW9uID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uLmlkKTsKICAgICAgICAgICAgICAgIH0iciIgOyAgIAogICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgIHNjb3BpbmdPcmdhbml6YXRpb24ubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgICAgICAgIHNjb3BpbmdPcmdhbml6YXRpb24udGVsZWNvbSAtPiBvcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgICAgICAgICBzY29waW5nT3JnYW5pemF0aW9uLmFkZHIgLT4gb3JnYW5pemF0aW9uLmFkZHJlc3M7IAogICAgICAgICAgICAgIHNjb3BpbmdPcmdhbml6YXRpb24uYXNPcmdhbml6YXRpb25QYXJ0T2YgYXMgT3JnUGFydE9mIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMzUsICBlMzUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUzNS5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uMSAgdGhlbnsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgT3JnUGFydE9mLT5vcmdhbml6YXRpb24xLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgICAgT3JnUGFydE9mLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICBPcmdQYXJ0T2YgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L3BhcnRpY2lwYW50L3Njb3BpbmdPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2YnImNvZGUiOwogICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBPcmdQYXJ0T2YuaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMS5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgICAgICBPcmdQYXJ0T2YtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbjEuaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQ0LCAgZTM1LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDQpLCAgb3JnYW5pemF0aW9uLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb24xLmlkKTsKICAgICAgICAgICAgICAgICAgfSJyIiA7ICAgCiAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi5jb2RlIC0+IG9yZ2FuaXphdGlvbjEudHlwZTsKICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi5zdGF0dXNDb2RlIGFzIHN0YXR1cyB3aGVyZSAodmFsdWUgPSdhY3RpdmUnKSAtPiBvcmdhbml6YXRpb24xLmFjdGl2ZSA9IGNyZWF0ZSgnYm9vbGVhbicpLCBvcmdhbml6YXRpb24xLmFjdGl2ZSA9IHRydWU7CiAgICAgICAgICAgICAgICBPcmdQYXJ0T2Yud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVPcmdhbiAtPiBidW5kbGUuZW50cnkgYXMgZTM2LCBlMzYucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUzNi5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uMiAgdGhlbiB7CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT5vcmdhbml6YXRpb24yLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4gLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L3BhcnRpY2lwYW50L3Njb3BpbmdPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2Yvd2hvbGVPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+b3JnYW5pemF0aW9uMS5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlMzYuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNSksIG9yZ2FuaXphdGlvbjEucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjIuaWQpOwogICAgICAgICAgICAgICAgICAgIH0iciIgOyAKICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4ubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbjIubmFtZSA9ICh2Lm90aGVyKTsKICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbi50ZWxlY29tIC0+IG9yZ2FuaXphdGlvbjIudGVsZWNvbTsKICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbi5hZGRyIC0+IG9yZ2FuaXphdGlvbjIuYWRkcmVzczsKICAgICAgICAgICAgICAgIH0id2hvbGVPcmdhbiI7CiAgICAgICAgICAgICAgfSJPcmdQYXJ0T2YiOyAgICAgICAKICAgICAgICAgICAgfSJzY29waW5nT3JnYW5pemF0aW9uIjsKICAgICAgICAgICAgfSAiYXNzb2NpZXRlZEVudGl0eSI7CiAgICAgICAgICAgIH0gIlBhcnRpY2lwYW50MiI7CiAgIAogICAgfSJwYXJ0aWNpcGFudCI7CiAgICBzcmMucGFydGljaXBhbnQgYXMgcGFydGljaXBhbnQgd2hlcmUgKHR5cGVDb2RlPSdJTkQnKSB0aGVuewogICAgcGFydGljaXBhbnQuYXNzb2NpYXRlZEVudGl0eSBhcyBhc3NvY2lldGVkRW50aXR5ICAtPiBidW5kbGUuZW50cnkgYXMgZTMxMzEsICAgZTMxMzEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICBlMzEzMS5yZXNvdXJjZSA9IGNyZWF0ZSgnUmVsYXRlZFBlcnNvbicpIGFzIFJlbGF0ZWRQZXJzb24sIFJlbGF0ZWRQZXJzb24uaWQgPSB1dWlkKCkgYXMgdXVpZDEsIGUzMTMxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9SZWxhdGVkUGVyc29uLycsIHV1aWQxKSwgcmVxdWVzdC51cmw9ICdSZWxhdGVkUGVyc29uJyB0aGVuIHsKICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS0+ICBwYXRpZW50UmVzb3VyY2UubGluayBhcyBsaW5rIHRoZW4gewogICAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eSAtPiAgbGluay50eXBlPSdyZWZlcicidHlwZSI7CiAgICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5IC0+IGxpbmsub3RoZXIgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9SZWxhdGVkUGVyc29uLycgKyAlUmVsYXRlZFBlcnNvbi5pZCkgInJlZmVyZW5jZSI7CiAgICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5LmlkLT5SZWxhdGVkUGVyc29uLmlkZW50aWZpZXI7CiAgICAgICAgICAgICAgICBhc3NvY2lldGVkRW50aXR5LT4gUmVsYXRlZFBlcnNvbi5wYXRpZW50PWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICVwYXRpZW50UmVzb3VyY2UuaWQpICJyZWZlcmVuY2UiOwogICAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS5jb2RlLT5SZWxhdGVkUGVyc29uLnJlbGF0aW9uc2hpcDsKICAgICAgICAgICAgICAgIGFzc29jaWV0ZWRFbnRpdHkudGVsZWNvbS0+UmVsYXRlZFBlcnNvbi50ZWxlY29tOwogICAgICAgICAgICAgICAgYXNzb2NpZXRlZEVudGl0eS5hc3NvY2lhdGVkUGVyc29uIGFzIGFzc29jaWF0ZWRwZXJzb24gdGhlbiB7CiAgICAgICAgICAgICAgICBhc3NvY2lhdGVkcGVyc29uLm5hbWUtPlJlbGF0ZWRQZXJzb24ubmFtZTsKICAgICAgICAgICAgfSJhc3NvY2lhdGVkUGVyc29uIjsKICAgICAgICAgICAgfSJsaW5rIjsKICAgICAgICB9InBhcnRpY2lwYW50MyI7IAogICAgfSJQQVJUSU5EIjsKIC8vIFNUQVJUIFBBUlRJQ0lQQU5UIEdVQVIKICBzcmMucGFydGljaXBhbnQgYXMgcGFydGljaXBhbnQgdGhlbiB7CiAgICBwYXJ0aWNpcGFudC50aW1lIGFzIHRpbWVIaWdoIHRoZW4gewogICAgICB0aW1lSGlnaC5oaWdoIGFzIEhJR0ggLT4gcGF0aWVudFJlc291cmNlLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllclAgdGhlbiB7CiAgICAgICAgSElHSCAtPiBpZGVudGlmaWVyUC5wZXJpb2QgYXMgcGVyaW9kRW5kIHRoZW57CiAgICAgICAgICBISUdIIGFzIGhpZ2ggLT4gcGVyaW9kRW5kLmVuZCA9IChoaWdoLnZhbHVlKSJwZXJpb2RlbmQiOwogICAgICAgIH0icGVyaW9kMDkiOwogICAgICAgfSJ0aW1lSCI7CiAgICB9InRpbWVQYXJ0IjsKICAgIHBhcnRpY2lwYW50LmFzc29jaWF0ZWRFbnRpdHkgYXMgYXNzb2NpZXRlZGVudGl0eSB3aGVyZSAoY2xhc3NDb2RlPSdHVUFSJykgdGhlbiB7CiAgICAgIGFzc29jaWV0ZWRlbnRpdHkuc2NvcGluZ09yZ2FuaXphdGlvbiBhcyByZXByZXNlbnRlZE9yZ2FuaXphdGlvbiAtPiAgYnVuZGxlLmVudHJ5IGFzIGUzNywgZTM3LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUzNy5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uICB0aGVuIHsgICAgCiAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24tPm9yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9wYXJ0aWNpcGFudC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgfSJtZXRhIjsKICAgICAgICAKICAgICAgICBhc3NvY2lldGVkZW50aXR5LmNvZGUgLT4gb3JnYW5pemF0aW9uLnR5cGU7CiAgICAgICAgYXNzb2NpZXRlZGVudGl0eS5zY29waW5nT3JnYW5pemF0aW9uIGFzIHNjb3BpbmdPcmdhbml6YXRpb24gdGhlbiB7IAogICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT5vcmdhbml6YXRpb24uaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQxLCAgZTM3LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDEpLCBwYXRpZW50UmVzb3VyY2UuZ2VuZXJhbFByYWN0aXRpb25lciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlT3JnLCAgcmVmZXJlbmNlT3JnLnJlZmVyZW5jZSA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMSk7CiAgICAgICAgICAgIH0iciIgOyAgCiAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICBzY29waW5nT3JnYW5pemF0aW9uLm5hbWUgYXMgdiAtPiBvcmdhbml6YXRpb24ubmFtZSA9ICh2Lm90aGVyKTsKICAgICAgICBzY29waW5nT3JnYW5pemF0aW9uLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uLnRlbGVjb207CiAgICAgICAgc2NvcGluZ09yZ2FuaXphdGlvbi5hZGRyIC0+IG9yZ2FuaXphdGlvbi5hZGRyZXNzOyAKICAgICAgICBzY29waW5nT3JnYW5pemF0aW9uLmFzT3JnYW5pemF0aW9uUGFydE9mIGFzIE9yZ1BhcnRPZiAtPiBidW5kbGUuZW50cnkgYXMgZTM4LCAgZTM4LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlMzgucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvblBPRiB0aGVuewogICAgICAgICAgCiAgICAgICAgICBPcmdQYXJ0T2YtPm9yZ2FuaXphdGlvblBPRi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgIE9yZ1BhcnRPZi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICBPcmdQYXJ0T2YgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgT3JnUGFydE9mIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9wYXJ0aWNpcGFudC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAKICAgICAgICAgIE9yZ1BhcnRPZi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb25QT0YuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgT3JnUGFydE9mLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPm9yZ2FuaXphdGlvblBPRi5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsIGUzOC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQyKSwgb3JnYW5pemF0aW9uLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb25QT0YuaWQpOwogICAgICAgICAgICB9InIiIDsgCiAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgIE9yZ1BhcnRPZi5jb2RlIC0+IG9yZ2FuaXphdGlvblBPRi50eXBlOwogICAgICAgICAgT3JnUGFydE9mLnN0YXR1c0NvZGUgYXMgc3RhdHVzIHdoZXJlICh2YWx1ZSA9J2FjdGl2ZScpIC0+IG9yZ2FuaXphdGlvblBPRi5hY3RpdmUgPSBjcmVhdGUoJ2Jvb2xlYW4nKSwgb3JnYW5pemF0aW9uUE9GLmFjdGl2ZSA9ICd0cnVlJzsKICAgICAgICAgIE9yZ1BhcnRPZi53aG9sZU9yZ2FuaXphdGlvbiBhcyB3aG9sZU9yZ2FuIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMzksICBlMzkucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUzOS5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uVyB0aGVuIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHdob2xlT3JnYW4tPm9yZ2FuaXphdGlvblcubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgIHdob2xlT3JnYW4tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgd2hvbGVPcmdhbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvcGFydGljaXBhbnQvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2Yvd2hvbGVPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAgCiAgICAgICAgICAgIHdob2xlT3JnYW4uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uVy5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+b3JnYW5pemF0aW9uVy5pZCA9KHIgKyctJysgZXh0KSBhcyB1dWlkMywgIGUzOS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQzKSwgb3JnYW5pemF0aW9uUE9GLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb25XLmlkKSA7CiAgICAgICAgICAgICAgfSJyIiA7IAogICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgd2hvbGVPcmdhbi5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uVy5uYW1lID0gKHYub3RoZXIpOwogICAgICAgICAgICB3aG9sZU9yZ2FuLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uVy50ZWxlY29tOwogICAgICAgICAgICB3aG9sZU9yZ2FuLmFkZHIgLT4gb3JnYW5pemF0aW9uVy5hZGRyZXNzOwogICAgICAgICAgfSJ3aG9sZU9yZ2FuIjsKICAgICAgICB9Ik9yZ1BhcnRPZiI7ICAgICAgIAogICAgICB9InNjb3BpbmdPcmdhbml6YXRpb24iOwogICAgICB9ICJhc3NvY2lldGVkRW50aXR5IjsKICAgIH0icmVwT3JnIjsKICB9OyAgCiAgc3JjLmluRnVsZmlsbG1lbnRPZiBhcyBpbkZ1bGZpbGxtZW50T2YgdGhlbnsKICAgIGluRnVsZmlsbG1lbnRPZi5vcmRlciBhcyBvcmRlciAtPiBidW5kbGUuZW50cnkgYXMgZTQwLCAgZTQwLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BPU1QnLCBlNDAucmVzb3VyY2UgPSBjcmVhdGUoJ1NlcnZpY2VSZXF1ZXN0JykgYXMgc2VydmljZVJlcXVlc3QsICBzZXJ2aWNlUmVxdWVzdC5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGU0MC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvU2VydmljZVJlcXVlc3QvJywgdXVpZDEpLCByZXF1ZXN0LnVybCA9ICdTZXJ2aWNlUmVxdWVzdCcsIGVuY291bnRlci5iYXNlZE9uID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvU2VydmljZVJlcXVlc3QvJyArICVzZXJ2aWNlUmVxdWVzdC5pZCkgdGhlbiB7CiAgICAgICAgb3JkZXIuaWQgLT4gc2VydmljZVJlcXVlc3QuaWRlbnRpZmllcjsKICAgICAgICBvcmRlciAtPiBzZXJ2aWNlUmVxdWVzdC5zdGF0dXM9J2FjdGl2ZScic3RhdHVzIjsKICAgICAgICBvcmRlciAtPiBzZXJ2aWNlUmVxdWVzdC5pbnRlbnQ9J29yZGVyJyJpbnRlbnQiOwogICAgICAgIG9yZGVyIC0+IHNlcnZpY2VSZXF1ZXN0LnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnRSZXNvdXJjZS5pZCkgInJlZmVyZW5jZSI7CiAgICAgICAgb3JkZXIgLT4gc2VydmljZVJlcXVlc3QuZW5jb3VudGVyPWNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgInJlZmVyZW5jZSI7CiAgICAgICAgIG9yZGVyLmNvZGUgLT4gc2VydmljZVJlcXVlc3QuY29kZTsKICAgICAgICBvcmRlci5wcmlvcml0eUNvZGUgYXMgcHJpb3JpdHlDb2RlIHRoZW57CiAgICAgICAgICBwcmlvcml0eUNvZGUuY29kZSBhcyB2IC0+IHNlcnZpY2VSZXF1ZXN0LnByaW9yaXR5ID0gdHJhbnNsYXRlKHYsICcjcHJpb3JpdHknLCAnY29kZScpICJwcmlvcml0eSI7CiAgICAgIH0icHJpb3JpdHlDb2RlIjsKICAgIH0gIm9yZGVyIjsKICB9ICJpbkZ1bGZpbGxtZW50T2YiOwogIHNyYy5kb2N1bWVudGF0aW9uT2YgYXMgZG9jT2YgdGhlbiB7CiAgICBkb2NPZi5zZXJ2aWNlRXZlbnQgYXMgc2VydmljZUV2ZW50IC0+IHRndC5ldmVudCBhcyBldmVudCB0aGVuIHsKICAgICAgc2VydmljZUV2ZW50LmNvZGUgLT4gZXZlbnQuY29kZSAiZXZlbnRDb2RlIjsKICAgICAgc2VydmljZUV2ZW50LmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZlVGltZSB0aGVuIHsKICAgICAgICBlZmZlY3RpdmVUaW1lIC0+IGV2ZW50LnBlcmlvZCA9Y3JlYXRlKCdQZXJpb2QnKSBhcyBwZXJpb2QgdGhlbiBJVkxUU1BlcmlvZChlZmZlY3RpdmVUaW1lLHBlcmlvZCkicGVyaW9kIjsvL2FzIHBlcmlvZCB0aGVuIHsKICAgICAgICAvL2VmZmVjdGl2ZVRpbWUubG93IC0+IHBlcmlvZC5zdGFydDsKICAgICAgIC8vIGVmZmVjdGl2ZVRpbWUuaGlnaCAtPiBwZXJpb2QuZW5kOyAgICAgICAgCiAgICAgIC8vICBlZmZlY3RpdmVUaW1lIHdoZXJlIChlZmZlY3RpdmVUaW1lLnZhbHVlKSAtPiBwZXJpb2Quc3RhcnQgPSBjcmVhdGUoJ2RhdGVUaW1lJykgYXMgc3RhcnRQIHRoZW4gVFNEYXRlVGltZShlZmZlY3RpdmVUaW1lLHN0YXJ0UCkgInN0YXJ0UCI7CiAgICAgIC8vfSJwZXJpb2RfRFQiOwogICAgfSJldmVudERUIjsKICAgIHNlcnZpY2VFdmVudC5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZXRpbWUxIC0+IGV2ZW50LnBlcmlvZCA9IGNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW57CiAgICAgICAgZWZmZWN0aXZldGltZTEgLT4gcGVyaW9kLnN0YXJ0ID0gIGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBzdGFydCB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZldGltZTEsc3RhcnQpICJ2YWwiOyAKICAgICAgfSJlZmZ0IjsKICAgICAgc2VydmljZUV2ZW50LnBlcmZvcm1lciBhcyBwZXJmb3JtZXIgLT4gIGJ1bmRsZS5lbnRyeSBhcyBlNDEsIGU0MS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGU0MS5yZXNvdXJjZSA9IGNyZWF0ZSgnUHJhY3RpdGlvbmVyUm9sZScpIGFzIHByYWN0aXRpb25lclJvbGUsICBwcmFjdGl0aW9uZXJSb2xlLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTQxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnUHJhY3RpdGlvbmVyUm9sZScgdGhlbnsKCQkJIHBlcmZvcm1lciAtPiBldmVudC5kZXRhaWwgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycgKyAlcHJhY3RpdGlvbmVyUm9sZS5pZCkgdGhlbiB7CiAgICAgICAgcGVyZm9ybWVyLmFzc2lnbmVkRW50aXR5IGFzIGFzc2lnbmVkRW50aXR5IC0+IGJ1bmRsZS5lbnRyeSBhcyBlNDIsICBlNDIucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTQyLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIgdGhlbiB7CiAgICAgICAgICAgIGFzc2lnbmVkRW50aXR5LT5wcmFjdGl0aW9uZXIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICBhc3NpZ25lZEVudGl0eS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICBhc3NpZ25lZEVudGl0eSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICBhc3NpZ25lZEVudGl0eSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvZG9jdW1lbnRhdGlvbk9mL3NlcnZpY2VFdmVudC9wZXJmb3JtZXInImNvZGUiOwogICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICB9Im1ldGEiOwoKICAgICAgICAgIHBlcmZvcm1lci5mdW5jdGlvbkNvZGUgLT4gcHJhY3RpdGlvbmVyUm9sZS5jb2RlOwogICAgICAgICAgYXNzaWduZWRFbnRpdHkuY29kZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGU7CiAgICAgICAgICBhc3NpZ25lZEVudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7CiAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+cHJhY3RpdGlvbmVyLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQyLCAgZTQyLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBwcmFjdGl0aW9uZXJSb2xlLnByYWN0aXRpb25lciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCkgOwogICAgICAgICAgICB9InIiIDsgCiAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICBhc3NpZ25lZEVudGl0eS5pZCBhcyBpZCB3aGVyZSAocm9vdD0nMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yJykgdGhlbiB7CiAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICB9IjIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMiI7CiAgICAgICAgYXNzaWduZWRFbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3QhPScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgIH0iZGl2ZXJzbyI7CiAgICAgICAgICBhc3NpZ25lZEVudGl0eS5hZGRyIC0+IHByYWN0aXRpb25lci5hZGRyZXNzOwogICAgICAgICAgYXNzaWduZWRFbnRpdHkudGVsZWNvbSAtPiBwcmFjdGl0aW9uZXIudGVsZWNvbTsKICAgICAgICAgIGFzc2lnbmVkRW50aXR5LmFzc2lnbmVkUGVyc29uIGFzIHBlcnNvbiB0aGVuIHsKICAgICAgICAgICAgcGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7CiAgICAgICAgICAgIHBlcnNvbi5iaXJ0aFRpbWUgIGFzIGJpcnRoVGltZSB0aGVuewogICAgICAgICAgICAgIGJpcnRoVGltZS52YWx1ZSBhcyBkYXRlIC0+IHByYWN0aXRpb25lci5iaXJ0aERhdGUgPSB0cnVuY2F0ZShkYXRlLCAxMCkgImJpcnRoVGltZWxlZ2FsIjsKICAgICAgICAgICAgfSAiYmlydGgiOwogICAgICAgICAgICAKICAgICAgICAgIH0gIm5hbWUiOwogICAgICAgICAgYXNzaWduZWRFbnRpdHkucmVwcmVzZW50ZWRPcmdhbml6YXRpb24gYXMgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24gLT4gIGJ1bmRsZS5lbnRyeSBhcyBlOCwgIGU4LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlOC5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uIHRoZW4gewogICAgICAgICAgICAKICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24tPm9yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9kb2N1bWVudGF0aW9uT2Yvc2VydmljZUV2ZW50L3BlcmZvcm1lci9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAKICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+b3JnYW5pemF0aW9uLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQzLCBlOC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQzKSwgcHJhY3RpdGlvbmVyUm9sZS5vcmdhbml6YXRpb24gPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZU9yZywgIHJlZmVyZW5jZU9yZy5yZWZlcmVuY2UgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDMpOwogICAgICAgICAgICAgIH0iciIgOyAgCiAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uLnRlbGVjb207CiAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLmFkZHIgLT4gb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLmFzT3JnYW5pemF0aW9uUGFydE9mIGFzIE9yZ1BhcnRPZiAtPiBidW5kbGUuZW50cnkgYXMgZTksICBlOS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTkucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjEgdGhlbnsKICAgICAgICAgICAgICAKICAgICAgICAgICAgICBPcmdQYXJ0T2YtPm9yZ2FuaXphdGlvbjEubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgT3JnUGFydE9mLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICBPcmdQYXJ0T2YgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvZG9jdW1lbnRhdGlvbk9mL3NlcnZpY2VFdmVudC9wZXJmb3JtZXIvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2YnImNvZGUiOwogICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgT3JnUGFydE9mLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbjEuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgICAgT3JnUGFydE9mLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT5vcmdhbml6YXRpb24xLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQ0LCAgZTkuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksIG9yZ2FuaXphdGlvbi5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZT0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uMS5pZCk7CiAgICAgICAgICAgICAgICB9InIiIDsgICAgICAgCiAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgT3JnUGFydE9mLmNvZGUgLT4gb3JnYW5pemF0aW9uMS50eXBlOwogICAgICAgICAgICAgIE9yZ1BhcnRPZi5zdGF0dXNDb2RlIGFzIHN0YXR1cyB3aGVyZSAodmFsdWUgPSdhY3RpdmUnKSAtPiBvcmdhbml6YXRpb24xLmFjdGl2ZSA9IGNyZWF0ZSgnYm9vbGVhbicpLCBvcmdhbml6YXRpb24xLmFjdGl2ZSA9ICd0cnVlJzsKICAgICAgICAgICAgICBPcmdQYXJ0T2Yud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVPcmdhbiAtPiBidW5kbGUuZW50cnkgYXMgZTEwLCAgZTEwLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlMTAucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjIgIHRoZW57CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHdob2xlT3JnYW4tPm9yZ2FuaXphdGlvbjIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICAgIHdob2xlT3JnYW4gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvZG9jdW1lbnRhdGlvbk9mL3NlcnZpY2VFdmVudC9wZXJmb3JtZXIvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2Yvd2hvbGVPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbjIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmdhbi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT5vcmdhbml6YXRpb24yLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQ1LCAgZTEwLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDUpLCBvcmdhbml6YXRpb24xLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb24yLmlkKTsKICAgICAgICAgICAgICAgICAgfSJyIiA7ICAKICAgICAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICAgICAgd2hvbGVPcmdhbi5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uMi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgICAgICAgICAgd2hvbGVPcmdhbi50ZWxlY29tIC0+IG9yZ2FuaXphdGlvbjIudGVsZWNvbTsKICAgICAgICAgICAgICAgIHdob2xlT3JnYW4uYWRkciAtPiBvcmdhbml6YXRpb24yLmFkZHJlc3M7CiAgICAgICAgICAgICAgfSJ3aG9sZU9yZ2FuaXphdGlvbiI7CiAgICAgICAgICAgIH0iYXNPcmdhbml6YXRpb25QYXJ0T2YiOwogICAgICAgICAgfSJSZXByZXNlbnRlZE9yZ2FuaXphdGlvbiI7CiAgICAgICAgfSJBc3NpZ25lZEVudGl0eSI7CiAgICAgIH0icGVyZm9ybWVyIjsKICAgfSAiZG9jT2YiOwogIH07Cn07CiAgc3JjIHdoZXJlIHNyYy5jb21wb25lbnRPZi5leGlzdHMoKS5ub3QoKSAtPiAgdGd0LmVuY291bnRlciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL0VuY291bnRlci8nICsgJWVuY291bnRlci5pZCkgdGhlbiBDbGluaWNhbERvY3VtZW50RW5jb3VudGVyKHNyYywgYnVuZGxlLCBlbmNvdW50ZXIscGF0aWVudFJlc291cmNlKSJlbmNvdW50ZXJFeGlzdCI7CiAgc3JjLmNvbXBvbmVudE9mIGFzIGNvbXAgdGhlbiB7CiAgICBjb21wIHdoZXJlIGNvbXAuZW5jb21wYXNzaW5nRW5jb3VudGVyLmV4aXN0cygpLm5vdCgpIC0+ICB0Z3QuZW5jb3VudGVyID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvRW5jb3VudGVyLycgKyAlZW5jb3VudGVyLmlkKSB0aGVuIENsaW5pY2FsRG9jdW1lbnRFbmNvdW50ZXIoc3JjRW5jLCBidW5kbGUsIGVuY291bnRlcixwYXRpZW50UmVzb3VyY2UpImVuYyI7CiAgICBjb21wLmVuY29tcGFzc2luZ0VuY291bnRlciBhcyBzcmNFbmMgLT4gIHRndC5lbmNvdW50ZXIgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9FbmNvdW50ZXIvJyArICVlbmNvdW50ZXIuaWQpIHRoZW4gQ2xpbmljYWxEb2N1bWVudEVuY291bnRlcihzcmNFbmMsIGJ1bmRsZSwgZW5jb3VudGVyLHBhdGllbnRSZXNvdXJjZSk7CiAgICB9ImVuY29tcGFzc2luZ0VuY291bnRlciI7CiAgICAKICAgIC8vUmVsYXRlZCBkb2N1bWVudCAKICAgIC8vICAgc3JjLnJlbGF0ZWREb2N1bWVudCBhcyByZWxhdGVkRG9jdW1lbnQgLT4gdGd0LnJlbGF0ZXNUbyBhcyByZWxhdGVzVG8gdGhlbnsKICAgIC8vICAgICByZWxhdGVkRG9jdW1lbnQgd2hlcmUodHlwZUNvZGUgPSAnUlBMQycpIC0+cmVsYXRlc1RvLmNvZGUgPSAncmVwbGFjZXMnImNvZGUiOwogICAgLy8gICAgIHJlbGF0ZWREb2N1bWVudCB3aGVyZSh0eXBlQ29kZSA9ICdBUE5EJykgLT5yZWxhdGVzVG8uY29kZSA9ICdhcHBlbmRzJyJjb2RlIjsgCiAgICAvLyAgICAgcmVsYXRlZERvY3VtZW50IHdoZXJlKHR5cGVDb2RlID0gJ1hGUk0nKSAtPnJlbGF0ZXNUby5jb2RlID0gJ3RyYW5zZm9ybXMnImNvZGUiOyAKICAgIC8vICAgICByZWxhdGVkRG9jdW1lbnQucGFyZW50RG9jdW1lbnQgYXMgcGFyZW50RG9jdW1lbnQgdGhlbiB7CiAgICAvLyAgICAgcGFyZW50RG9jdW1lbnQgLT4gcmVsYXRlc1RvLnRhcmdldCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICdodHRwczovL2V4YW1wbGUvQ29tcG9zaXRpb25QYWRyZS8nICJyZWZlcmVuY2VDb21wb3NpdGlvbiI7CiAgICAvLyAgIH0gInBhcmVudERvY3VtZW50IjsKICAgIC8vIH0icmVsYXR0byI7Cn0KCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRSZWxhdGVzVG8oc291cmNlIHNyYzogcGFyZW50RG9jdW1lbnQsIHRhcmdldCB0Z3Q6IGNvbXBvc2l0aW9uKXsKICAgIHNyYy5pZCAtPiB0Z3QuaWRlbnRpZmllcjsKICAgIHNyYy5jb2RlIC0+IHRndC50eXBlOwogICAgc3JjLnNldElkIC0+IHRndC5pZGVudGlmaWVyOwogICAgc3JjLnZlcnNpb25OdW1iZXIgYXMgdk51bWJlciAtPiB0Z3QuZXh0ZW5zaW9uIGFzIGV4dCB0aGVuIENoRXh0RXByVmVyc2lvbk51bWJlcih2TnVtYmVyLCBleHQpICJ2ZXJzaW9uTnVtYmVyRVhUIjsKfQoKCgpncm91cCBFWFRiaXJ0aHBsYWNlKHNvdXJjZSBzcmMgOiBBRCwgdGFyZ2V0IGV4dCA6IEV4dGVuc2lvbikgewogIHNyYyAtPiBleHQudXJsID0gJ2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9wYXRpZW50LWJpcnRoUGxhY2UnICJ1cmwiOwogIHNyYyAtPiBleHQudmFsdWUgPSBjcmVhdGUoJ0FkZHJlc3MnKSBhcyB2YWx1ZSB0aGVuIEFEQWRkcmVzcyhzcmMsIHZhbHVlKSAidmFsdWUiOwoKfSAKZ3JvdXAgQ2xpbmljYWxEb2N1bWVudFBhdGllbnRSb2xlKHNvdXJjZSBzcmMgOiBQYXRpZW50Um9sZSwgdGFyZ2V0IHRndCA6IFBhdGllbnQsIHRhcmdldCBidW5kbGUgOiBCdW5kbGUpIHsKICBzcmMuYWRkciAtPiB0Z3QuYWRkcmVzczsKICBzcmMudGVsZWNvbSAtPiB0Z3QudGVsZWNvbTsKICBzcmMucGF0aWVudCBhcyBwYXRpZW50IHRoZW4gewogICAgcGF0aWVudC5uYW1lIC0+IHRndC5uYW1lOwogICAgcGF0aWVudC5hZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUgYXMgZ2VuZGVyIHRoZW4gewogICAgICBnZW5kZXIuY29kZSBhcyB2IC0+IHRndC5nZW5kZXIgPSB0cmFuc2xhdGUodiwgJyNjbS12My1hZG1pbmlzdHJhdGl2ZS1nZW5kZXInLCAnY29kZScpICJnZW5kZXIiOwogICAgfSAiZ2VuZGVyIjsKICAgIHBhdGllbnQuYmlydGhUaW1lICBhcyBiaXJ0aFRpbWUgdGhlbnsKICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gdGd0LmJpcnRoRGF0ZSA9IHRydW5jYXRlKGRhdGUsIDEwKSAiYmlydGhUaW1lbGVnYWwiOwogICAgfSAiYmlydGgiOwogICAgcGF0aWVudC5kZWNlYXNlZEluZCBhcyBkZWNlYXNlZCB3aGVyZSAodmFsdWU9J2ZhbHNlJyktPiB0Z3QuZGVjZWFzZWQgPSBjcmVhdGUoJ2Jvb2xlYW4nKSwgdGd0LmRlY2Vhc2VkID0gZmFsc2UgImRlY2Vhc2VkQkwiOwogICAgcGF0aWVudC5kZWNlYXNlZEluZCBhcyBkZWNlYXNlZCB3aGVyZSAodmFsdWU9J3RydWUnKSB0aGVuIHsKICAgICAgICBwYXRpZW50LmRlY2Vhc2VkVGltZSBhcyBUaW1lLT4gdGd0LmRlY2Vhc2VkID0gY3JlYXRlKCdkYXRlVGltZScpIGFzIGRlY2Vhc2VkVGltZSB0aGVuIFRTRGF0ZVRpbWUoVGltZSxkZWNlYXNlZFRpbWUpOwogICAgfTsKICAgIHBhdGllbnQuZGVjZWFzZWRUaW1lIGFzIFRpbWV0IHdoZXJlIFRpbWV0LmVtcHR5KCkgLT4gdGd0LmRlY2Vhc2VkID0gY3JlYXRlKCdib29sZWFuJyksIHRndC5kZWNlYXNlZCA9IHRydWUgImRlY2Vhc2VkQkwiOwogICAgcGF0aWVudC5tYXJpdGFsU3RhdHVzQ29kZSAtPiB0Z3QubWFyaXRhbFN0YXR1cyAibWFyaXRhbFN0YXR1cyI7CiAgICBwYXRpZW50Lmd1YXJkaWFuIGFzIGd1YXJkaWFuIHRoZW4gewogICAgICAgIGd1YXJkaWFuLmd1YXJkaWFuUGVyc29uIGFzIHBlcnNvbiAtPiBidW5kbGUuZW50cnkgYXMgZSwgZS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQT1NUJywgIGUucmVzb3VyY2UgPSBjcmVhdGUoJ1JlbGF0ZWRQZXJzb24nKSBhcyByZWxhdGVkUGVyc29uLCAgcmVsYXRlZFBlcnNvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMSwgIGUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL1JlbGF0ZWRQZXJzb24vJywgdXVpZDEpLCByZXF1ZXN0LnVybD0gJ1JlbGF0ZWRQZXJzb24nIHRoZW4gewogICAgICAgICBwZXJzb24ubmFtZSAtPiByZWxhdGVkUGVyc29uLm5hbWU7CiAgICAgICAgICBwZXJzb24uYmlydGhUaW1lICBhcyBiaXJ0aFRpbWUgdGhlbnsKICAgICAgICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gcmVsYXRlZFBlcnNvbi5iaXJ0aERhdGUgPSB0cnVuY2F0ZShkYXRlLCAxMCkgImJpcnRoVGltZWxlZ2FsIjsKICAgICAgICAgIH0gImJpcnRoIjsKICAgICAgICAgIHBlcnNvbi0+IHJlbGF0ZWRQZXJzb24ucGF0aWVudCA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1BhdGllbnQvJyArICV0Z3QuaWQpICJyZWZlcmVuY2UiOwogICAgICAgICAgcGVyc29uIC0+ICB0Z3QubGluayBhcyBsaW5rIHRoZW4gewogICAgICAgICAgcGVyc29uIC0+ICBsaW5rLnR5cGU9J3JlZmVyJyJ0eXBlIjsKICAgICAgICAgIHBlcnNvbiAtPiBsaW5rLm90aGVyID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUmVsYXRlZFBlcnNvbi8nICsgJXJlbGF0ZWRQZXJzb24uaWQpICJyZWZlcmVuY2UiOwogICAgICAgICAgIGd1YXJkaWFuLmFkZHIgLT4gcmVsYXRlZFBlcnNvbi5hZGRyZXNzOwogICAgICAgICAgIGd1YXJkaWFuLnRlbGVjb20gLT4gcmVsYXRlZFBlcnNvbi50ZWxlY29tOwogICAgICAgICAgIGd1YXJkaWFuLmlkIC0+IHJlbGF0ZWRQZXJzb24uaWRlbnRpZmllcjsKICAgICAgICAgICBndWFyZGlhbi5jb2RlIC0+IHJlbGF0ZWRQZXJzb24ucmVsYXRpb25zaGlwOwogICAgICAgICB9ICJwZXJzb24iOwogICAgICAgfSJndWFyZGlhblBlcnNvbiI7CiAgICAgICAgZ3VhcmRpYW4uZ3VhcmRpYW5Pcmdhbml6YXRpb24gYXMgZ3VhcmRpYW5vcmcgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgIGUxLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb25jb250YWN0IHRoZW4gewogICAgICAgICAgIAogICAgICAgICAgZ3VhcmRpYW5vcmctPm9yZ2FuaXphdGlvbmNvbnRhY3QubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICBndWFyZGlhbm9yZy0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICBndWFyZGlhbm9yZyAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICBndWFyZGlhbm9yZyAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvcmVjb3JkVGFyZ2V0L1BhdGllbnRSb2xlL3BhdGllbnQvZ3VhcmRpYW4vZ3VhcmRpYW5Pcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgCiAgICAgICAgICBndWFyZGlhbm9yZyAtPiAgdGd0LmNvbnRhY3QgYXMgY29udGFjdCB0aGVuIHsKICAgICAgICAgICAgZ3VhcmRpYW5vcmcgLT4gY29udGFjdC5vcmdhbml6YXRpb24gID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uY29udGFjdC5pZCkgIk9yZ2FuaXphdGlvbkNvbnRhY3QiOwogICAgICAgICAgICBndWFyZGlhbm9yZy5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb25jb250YWN0LmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICAgIGd1YXJkaWFub3JnLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+b3JnYW5pemF0aW9uY29udGFjdC5pZCA9KHIgKyctJysgZXh0KSBhcyB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDIpOwogICAgICAgICAgICAgIH0iciIgOwoKICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgICAgZ3VhcmRpYW5vcmcubmFtZSBhcyB2IC0+IG9yZ2FuaXphdGlvbmNvbnRhY3QubmFtZSA9ICh2Lm90aGVyKTsKICAgICAgICAgICAgICAgICBndWFyZGlhbm9yZy50ZWxlY29tIC0+IG9yZ2FuaXphdGlvbmNvbnRhY3QudGVsZWNvbTsKICAgICAgICAgICAgICAgICBndWFyZGlhbm9yZy5hZGRyIC0+IG9yZ2FuaXphdGlvbmNvbnRhY3QuYWRkcmVzczsKICAgICAgICAgICAgZ3VhcmRpYW5vcmcuYXNPcmdhbml6YXRpb25QYXJ0T2YgYXMgT3JnUGFydE9mIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMiwgZTIucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUyLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb25wYXJ0T2YgIHRoZW4gewogICAgICAgICAgICAgICAKICAgICAgICAgICAgICBPcmdQYXJ0T2YtPm9yZ2FuaXphdGlvbnBhcnRPZi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgICBPcmdQYXJ0T2YtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgT3JnUGFydE9mIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9yZWNvcmRUYXJnZXQvUGF0aWVudFJvbGUvcGF0aWVudC9ndWFyZGlhbi9ndWFyZGlhbk9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgfSJtZXRhIjsKICAgICAgICAgICAKICAgICAgICAgICAgICBPcmdQYXJ0T2YgLT4gb3JnYW5pemF0aW9uY29udGFjdC5wYXJ0T2YgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9ucGFydE9mLmlkKSAiYXNvcmdhbml6YXRpb24iOwogICAgICAgICAgICAgICBPcmdQYXJ0T2YuaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9ucGFydE9mLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+b3JnYW5pemF0aW9ucGFydE9mLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQzLCAgZTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMykgOwogICAgICAgICAgICAgICAgfSJyIiA7ICAKICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICAgIE9yZ1BhcnRPZi5jb2RlIC0+IG9yZ2FuaXphdGlvbnBhcnRPZi50eXBlOwogICAgICAgICAgICAgICAgT3JnUGFydE9mLnN0YXR1c0NvZGUgYXMgc3RhdHVzIHdoZXJlICh2YWx1ZSA9J2FjdGl2ZScpIC0+IG9yZ2FuaXphdGlvbnBhcnRPZi5hY3RpdmUgPSAndHJ1ZSc7CiAgICAgICAgICAgICAgICAgICAgT3JnUGFydE9mLndob2xlT3JnYW5pemF0aW9uIGFzIHdob2xlT1JHIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMywgZTMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUzLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBXaG9sZU9yZ2FuaXphdGlvbiB0aGVuIHsKICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIHdob2xlT1JHLT5XaG9sZU9yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT1JHLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT1JHIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT1JHIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9yZWNvcmRUYXJnZXQvUGF0aWVudFJvbGUvcGF0aWVudC9ndWFyZGlhbi9ndWFyZGlhbk9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIHdob2xlT1JHIC0+IG9yZ2FuaXphdGlvbnBhcnRPZi5wYXJ0T2YgID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlV2hvbGVPcmdhbml6YXRpb24uaWQpICJhc09yZ2FuaXphdGlvbiI7CiAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPUkcuaWQgYXMgaWQgLT4gV2hvbGVPcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPUkctPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+V2hvbGVPcmdhbml6YXRpb24uaWQgPShyICsnLScrIGV4dCkgYXMgdXVpZDQsICBlMy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQ0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSJyIiA7IAogICAgICAgICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPUkcubmFtZSBhcyB2IC0+IFdob2xlT3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9SRy50ZWxlY29tIC0+IFdob2xlT3JnYW5pemF0aW9uLnRlbGVjb207CiAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9SRy5hZGRyIC0+IFdob2xlT3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgICAgICAgICAgICB9Ildob2xlT3JnYW5pemF0aW9uIjsKICAgICAgICAgICAgICAgICB9Ik9yZ2FuaXphdGlvblBhcnRPZiI7CiAgICAgICAgICAgICAgfSJjb250YWN0IjsKICAgICAgICAgfSAiZ3VhcmRpYW5vcmdhbml6YXRpb24iOwogICAgfSJndWFyZGlhbiI7CiAgICBwYXRpZW50LmJpcnRocGxhY2UgYXMgYmlydGhwbGFjZSB0aGVuIHsKICAgICAgYmlydGhwbGFjZS5wbGFjZSBhcyBwbGFjZSB0aGVuIHsKICAgICAgIHBsYWNlLmFkZHIgYXMgYWRkcmVzcy0+IHRndC5leHRlbnNpb24gYXMgZXh0MSB0aGVuIEVYVGJpcnRocGxhY2UoYWRkcmVzcywgZXh0MSkgImJpcnRocGxhY2UiOwogICAgICAgICB9ICJwbGFjZSI7CiAgICAgIH0iYmlydGhwbGFjZSI7CiBzcmMucHJvdmlkZXJPcmdhbml6YXRpb24gYXMgb3JnIC0+ICBidW5kbGUuZW50cnkgYXMgZTQsIGU0LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlNC5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgcHJvdmlkZXJvcmdhbml6YXRpb24gdGhlbiB7CiAgICAgIAogICAgICBvcmctPnByb3ZpZGVyb3JnYW5pemF0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICBvcmctPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICBvcmcgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICBvcmcgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L3JlY29yZFRhcmdldC9QYXRpZW50Um9sZS9wYXRpZW50L3Byb3ZpZGVyT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICB9Im1ldGEiOwogIAogICAgICBvcmcgLT4gIHRndC5tYW5hZ2luZ09yZ2FuaXphdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJXByb3ZpZGVyb3JnYW5pemF0aW9uLmlkKSAicmVmZXJlbmNlIjsKICAgICAgIG9yZy5pZCBhcyBpZCAtPiBwcm92aWRlcm9yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICBvcmctPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgIH0iZXh0IjsKICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT5wcm92aWRlcm9yZ2FuaXphdGlvbi5pZCA9KHIgKyctJysgZXh0KSBhcyB1dWlkNSwgIGU0LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDUpOwogICAgICAgIH0iciIgOyAgCiAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgb3JnLm5hbWUgYXMgdiAtPiBwcm92aWRlcm9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgICAgIG9yZy50ZWxlY29tIC0+IHByb3ZpZGVyb3JnYW5pemF0aW9uLnRlbGVjb207CiAgICAgICAgICAgIG9yZy5hZGRyIC0+IHByb3ZpZGVyb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgIG9yZy5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBPcmdQYXJ0T2ZQcm92aWRlciAtPmJ1bmRsZS5lbnRyeSBhcyBlNSwgZTUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGU1LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb25wYXJ0T2Zwcm92aWRlciB0aGVuIHsKICAgICAgICAgICAgICAKICAgICAgICAgICAgICBPcmdQYXJ0T2ZQcm92aWRlci0+b3JnYW5pemF0aW9ucGFydE9mcHJvdmlkZXIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgICAgT3JnUGFydE9mUHJvdmlkZXItPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgIE9yZ1BhcnRPZlByb3ZpZGVyIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICBPcmdQYXJ0T2ZQcm92aWRlciAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvcmVjb3JkVGFyZ2V0L1BhdGllbnRSb2xlL3BhdGllbnQvcHJvdmlkZXJPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2YnImNvZGUiOwogICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgIAogICAgICAgICAgICAgIE9yZ1BhcnRPZlByb3ZpZGVyIC0+IHByb3ZpZGVyb3JnYW5pemF0aW9uLnBhcnRPZiAgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb25wYXJ0T2Zwcm92aWRlci5pZCkgImFzb3JnYW5pemF0aW9uIjsKICAgICAgICAgICAgICBPcmdQYXJ0T2ZQcm92aWRlci5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb25wYXJ0T2Zwcm92aWRlci5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICBPcmdQYXJ0T2ZQcm92aWRlci0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+b3JnYW5pemF0aW9ucGFydE9mcHJvdmlkZXIuaWQgPShyICsnLScrIGV4dCkgYXMgdXVpZDYsICBlNS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQ2KTsKICAgICAgICAgICAgICAgIH0iciIgOyAgICAKICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICBPcmdQYXJ0T2ZQcm92aWRlci5jb2RlIC0+IG9yZ2FuaXphdGlvbnBhcnRPZnByb3ZpZGVyLnR5cGU7CiAgICAgICAgICAgICAgT3JnUGFydE9mUHJvdmlkZXIuc3RhdHVzQ29kZSBhcyBzdGF0dXMgd2hlcmUgKHZhbHVlID0nYWN0aXZlJykgLT4gb3JnYW5pemF0aW9ucGFydE9mcHJvdmlkZXIuYWN0aXZlID0gJ3RydWUnOwogICAgICAgICAgICAgIE9yZ1BhcnRPZlByb3ZpZGVyLndob2xlT3JnYW5pemF0aW9uIGFzIHdob2xlT1JHcHJvdmVkZXItPiBidW5kbGUuZW50cnkgYXMgZTYsIGU2LnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsICBlNi5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgV2hvbGVPcmdhbml6YXRpb25wcm92aWRlciB0aGVuIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgd2hvbGVPUkdwcm92ZWRlci0+V2hvbGVPcmdhbml6YXRpb25wcm92aWRlci5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgICAgIHdob2xlT1JHcHJvdmVkZXItPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgd2hvbGVPUkdwcm92ZWRlciAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgICAgICB3aG9sZU9SR3Byb3ZlZGVyIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9yZWNvcmRUYXJnZXQvUGF0aWVudFJvbGUvcGF0aWVudC9wcm92aWRlck9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB3aG9sZU9SR3Byb3ZlZGVyLT4gb3JnYW5pemF0aW9ucGFydE9mcHJvdmlkZXIucGFydE9mICA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJVdob2xlT3JnYW5pemF0aW9ucHJvdmlkZXIuaWQpICJhc09yZ2FuaXphdGlvbiI7CiAgICAgICAgICAgICAgICB3aG9sZU9SR3Byb3ZlZGVyLmlkIGFzIGlkIC0+IFdob2xlT3JnYW5pemF0aW9ucHJvdmlkZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgd2hvbGVPUkdwcm92ZWRlci0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT5XaG9sZU9yZ2FuaXphdGlvbnByb3ZpZGVyLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQ3LCAgZTYuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNyk7CiAgICAgICAgICAgICAgICAgIH0iciIgOyAgIAogICAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgICAgICB3aG9sZU9SR3Byb3ZlZGVyLm5hbWUgYXMgdiAtPiBXaG9sZU9yZ2FuaXphdGlvbnByb3ZpZGVyLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgICB3aG9sZU9SR3Byb3ZlZGVyLnRlbGVjb20gLT4gV2hvbGVPcmdhbml6YXRpb25wcm92aWRlci50ZWxlY29tOwogICAgICAgICAgICAgICAgd2hvbGVPUkdwcm92ZWRlci5hZGRyIC0+IFdob2xlT3JnYW5pemF0aW9ucHJvdmlkZXIuYWRkcmVzczsKICAgICAgICAgICAgICB9Indob2xlT3JnYW5pemF0aW9ucHJvdmlkZXIiOwogICAgICAgICAgICB9Ik9yZ2FuaXphdGlvblBhcnRPZnByb3ZpZGVyIjsKICB9ICJvcmdhbml6YXRpb24iOwogICAKIH0icGF0aWVudCI7Cn0KZ3JvdXAgQ3VzdG9kaWFuT3JnYW5pemF0aW9uKHNvdXJjZSBzcmMgOiBDdXN0b2RpYW5Pcmdhbml6YXRpb24sIHRhcmdldCB0Z3QgOiBPcmdhbml6YXRpb24pewogc3JjLm5hbWUgYXMgdiAtPiB0Z3QubmFtZSA9ICh2Lm90aGVyKTsKICBzcmMudGVsZWNvbSAtPiB0Z3QudGVsZWNvbTsKICBzcmMuYWRkciAtPiB0Z3QuYWRkcmVzczsKIAogfQogCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRFbmNvdW50ZXIoc291cmNlIHNyYyA6IEVuY29tcGFzc2luZ0VuY291bnRlciwgdGFyZ2V0IGJ1bmRsZSA6IEJ1bmRsZSwgdGFyZ2V0IGVuY291bnRlciA6IEVuY291bnRlciwgdGFyZ2V0IHBhdGllbnQgOiBQYXRpZW50KSB7CiAgc3JjLmlkIC0+IGVuY291bnRlci5pZGVudGlmaWVyOwogIHNyYy5jb2RlIGFzIGNvZGUxLT4gZW5jb3VudGVyLmNsYXNzID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgIGNvZGUxLmNvZGUgYXMgY29kZSAtPiBjb2RpbmcuY29kZSA9IGNhc3QoY29kZSwgJ3N0cmluZycpOwogICAgY29kZTEuY29kZVN5c3RlbSBhcyBzeXN0ZW0tPmNvZGluZy5zeXN0ZW09IHRyYW5zbGF0ZShzeXN0ZW0sICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpOwogICBjb2RlMS5kaXNwbGF5TmFtZSBhcyBkaXNwbGF5LT5jb2RpbmcuZGlzcGxheT0gY2FzdChkaXNwbGF5LCAnc3RyaW5nJyk7CiAgfSJjbGFzcyI7CiAgc3JjIHdoZXJlIHNyYy5jb2RlLmV4aXN0cygpLm5vdCgpLT4gZW5jb3VudGVyLmNsYXNzID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICBzcmMgIC0+IGNvZGluZy5jb2RlID0nQU1CJyAiY29kZSI7CiAgICBzcmMgLT5jb2Rpbmcuc3lzdGVtPSAnaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1BY3RDb2RlJyAiY29kZVMiOwogICAgc3JjIC0+Y29kaW5nLmRpc3BsYXk9ICdhbWJ1bGF0b3J5JyAiZGlzcGxheSI7CiAgIH0iTm9uQ29kZWNsYXNzIjsKICBzcmMgLT4gZW5jb3VudGVyLnN1YmplY3Q9Y3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUGF0aWVudC8nICsgJXBhdGllbnQuaWQpICJyZWZlcmVuY2UiOwogIHNyYyAtPiBlbmNvdW50ZXIuc3RhdHVzPSdmaW5pc2hlZCcic3RhdHVzIjsKICAvLyBlZmZlY3RpdmVUaW1lPXBlcmlvZAogIHNyYyB3aGVyZSBlZmZlY3RpdmVUaW1lLmxvdy5leGlzdHMoKSBvciBlZmZlY3RpdmVUaW1lLmhpZ2guZXhpc3RzKCkgdGhlbiB7CiAgc3JjLmVmZmVjdGl2ZVRpbWUgYXMgZWZmICAtPiBlbmNvdW50ZXIucGVyaW9kPWNyZWF0ZSgnUGVyaW9kJykgYXMgcGVyaW9kIHRoZW4gSVZMVFNQZXJpb2QoZWZmLHBlcmlvZCk7CiAgfSJ3aGVyZSI7CiAgLy8gZWZmZWN0aXZlVGltZSA9IHRpbWUtc3RhbXAKICBzcmMgd2hlcmUgZWZmZWN0aXZlVGltZS5sb3cuZXhpc3RzKCkubm90KCkgb3IgZWZmZWN0aXZlVGltZS5oaWdoLmV4aXN0cygpLm5vdCgpIHRoZW4gewogIHNyYy5lZmZlY3RpdmVUaW1lIGFzIGVmZmVjdGl2ZXRpbWUxIC0+IGVuY291bnRlci5wZXJpb2QgPSBjcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuewogICAgZWZmZWN0aXZldGltZTEgLT4gcGVyaW9kLnN0YXJ0ID0gIGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBzdGFydCB0aGVuIFRTRGF0ZVRpbWUoZWZmZWN0aXZldGltZTEsc3RhcnQpICJ2YWwiOyAKICB9ImVmZnQiOwogIH0id2hlcmUiOwogLy8gc3JjLmVmZmVjdGl2ZVRpbWUgYXMgZWZmZWN0aXZldGltZTEgLT4gZW5jb3VudGVyLnBlcmlvZCBhcyBwZXJpb2QsIHBlcmlvZC5zdGFydD0oZWZmZWN0aXZldGltZTEudmFsdWUpOwogIHNyYy5kaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGUgYXMgZGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlIHRoZW57CiAgICBkaXNjaGFyZ2VEaXNwb3NpdGlvbkNvZGUgLT4gZW5jb3VudGVyLmhvc3BpdGFsaXphdGlvbiBhcyBob3NwaXRhbGl6YXRpb24gdGhlbnsgCiAgICAgICAgZGlzY2hhcmdlRGlzcG9zaXRpb25Db2RlIC0+IGhvc3BpdGFsaXphdGlvbi5kaXNjaGFyZ2VEaXNwb3NpdGlvbiAiZGlzRGlzcCI7CiAgICAgICAgfSJkaXNwb3NpdGlvbiI7CiAgfSAiZGlzY2hhcmdlIjsKCiAgc3JjLnJlc3BvbnNpYmxlUGFydHkgYXMgcmVzcG9uc2libGVQYXJ0eSAtPiBlbmNvdW50ZXIucGFydGljaXBhbnQgYXMgcGFydGljaXBhbnQgdGhlbiB7CiAgICByZXNwb25zaWJsZVBhcnR5LmFzc2lnbmVkRW50aXR5IGFzIGVudGl0eSAtPiAgYnVuZGxlLmVudHJ5IGFzIGUsIGUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICBlLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXJSb2xlJykgYXMgcHJhY3RpdGlvbmVyUm9sZSwgIHByYWN0aXRpb25lclJvbGUuaWQgPSB1dWlkKCkgYXMgdXVpZDEsICBlLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycsIHV1aWQxKSwgcmVxdWVzdC51cmwgPSAnUHJhY3RpdGlvbmVyUm9sZScsIHBhcnRpY2lwYW50LmluZGl2aWR1YWwgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycgKyAlcHJhY3RpdGlvbmVyUm9sZS5pZCkgdGhlbiB7CiAgICAgICAgZW50aXR5LmNvZGUgLT4gcHJhY3RpdGlvbmVyUm9sZS5jb2RlOwogICAgICAgIGVudGl0eS0+IGJ1bmRsZS5lbnRyeSBhcyBlMSwgZTEucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUxLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIgdGhlbiB7CiAgICAgICAgICAKICAgICAgICAgIGVudGl0eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgZW50aXR5LT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgIGVudGl0eSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICBlbnRpdHkgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2NvbXBvbmVudE9mL0VuY29tcGFzc2luZ0VuY291bnRlci9yZXNwb25zaWJsZVBhcnR5JyJjb2RlIjsKICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAKICAgICAgICAgIGVudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7CiAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+cHJhY3RpdGlvbmVyLmlkID0ociArJy0nKyBleHQpIGFzICB1dWlkMiwgIGUxLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXIvJywgdXVpZDIpLCBwcmFjdGl0aW9uZXJSb2xlLnByYWN0aXRpb25lciA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL1ByYWN0aXRpb25lci8nICsgJXByYWN0aXRpb25lci5pZCk7CiAgICAgICAgICAgIH0iciIgOyAKICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICBlbnRpdHkuaWQgYXMgaWQgd2hlcmUgKHJvb3Q9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gewogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsKICAgICAgICAgIGVudGl0eS5pZCBhcyBpZCB3aGVyZSAocm9vdCE9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gewogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgIH0iZGl2ZXJzbyI7CiAgICAgICAgICBlbnRpdHkuYWRkciAtPiBwcmFjdGl0aW9uZXIuYWRkcmVzczsKICAgICAgICAgIGVudGl0eS50ZWxlY29tIC0+IHByYWN0aXRpb25lci50ZWxlY29tOwogICAgICAgICAgZW50aXR5LmFzc2lnbmVkUGVyc29uIGFzIHBlcnNvbiB0aGVuIHsKICAgICAgICAgICAgcGVyc29uLm5hbWUgLT4gcHJhY3RpdGlvbmVyLm5hbWU7CiAgICAgICAgICAgIHBlcnNvbi5iaXJ0aFRpbWUgYXMgYmlydGhUaW1lIHRoZW57CiAgICAgICAgICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gcHJhY3RpdGlvbmVyLmJpcnRoRGF0ZSA9IHRydW5jYXRlKGRhdGUsMTApICJiaXJ0aFRpbWVFTkMiOwogICAgICAgICAgICB9ICJiaXJ0aCI7CiAgICAgICB9ICJuYW1lIjsKICAgICAgIH0icHJhY3RpdGlvbmVyIjsKICAgICAgIGVudGl0eS5yZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBhcyByYXBvcmcgLT4gIGJ1bmRsZS5lbnRyeSBhcyBlMiwgZTIucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUyLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyByYXByZXNlbnRlZG9yZ2FuaXphdGlvbiB0aGVuIHsKICAgICAgICAgICAKICAgICAgICByYXBvcmctPnJhcHJlc2VudGVkb3JnYW5pemF0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgIHJhcG9yZy0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgcmFwb3JnIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICByYXBvcmcgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2NvbXBvbmVudE9mL0VuY29tcGFzc2luZ0VuY291bnRlci9yZXNwb25zaWJsZVBhcnR5L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uJyJjb2RlIjsKICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgCiAgICAgICAgICAvL3JhcG9yZy5pZCAtPiByYXByZXNlbnRlZG9yZ2FuaXphdGlvbi5pZGVudGlmaWVyOwogICAgICAgICAgIHJhcG9yZy5pZCBhcyBpZCAtPiByYXByZXNlbnRlZG9yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+aWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICByYXBvcmctPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHJhcHJlc2VudGVkb3JnYW5pemF0aW9uLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQzLCAgZTIuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMyksIHByYWN0aXRpb25lclJvbGUub3JnYW5pemF0aW9uID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlcmFwcmVzZW50ZWRvcmdhbml6YXRpb24uaWQpOwogICAgICAgICAgICB9InIiIDsgIAogICAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgIHJhcG9yZy5uYW1lIGFzIHYgLT4gcmFwcmVzZW50ZWRvcmdhbml6YXRpb24ubmFtZSA9ICh2Lm90aGVyKTsKICAgICAgICAgICByYXBvcmcudGVsZWNvbSAtPiByYXByZXNlbnRlZG9yZ2FuaXphdGlvbi50ZWxlY29tOwogICAgICAgICAgIHJhcG9yZy5hZGRyIC0+IHJhcHJlc2VudGVkb3JnYW5pemF0aW9uLmFkZHJlc3M7CiAgICAgICAgICAgcmFwb3JnLmFzT3JnYW5pemF0aW9uUGFydE9mIGFzIE9yZ1BhcnRPZiAtPiBidW5kbGUuZW50cnkgYXMgZTMsICBlMy5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTMucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjEsICBvcmdhbml6YXRpb24xLmlkID0gdXVpZCgpIGFzIHV1aWQ0LCAgZTMuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksIHJhcHJlc2VudGVkb3JnYW5pemF0aW9uLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb24xLmlkKSB0aGVuewogICAgICAgICAgICAvL09yZ1BhcnRPZi5pZCAtPiBvcmdhbml6YXRpb24xLmlkZW50aWZpZXI7CiAgICAgICAgICAgIAogICAgICAgICAgICBPcmdQYXJ0T2YtPm9yZ2FuaXphdGlvbjEubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgIE9yZ1BhcnRPZi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvY29tcG9uZW50T2YvRW5jb21wYXNzaW5nRW5jb3VudGVyL3Jlc3BvbnNpYmxlUGFydHkvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2YnImNvZGUiOwogICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAKICAgICAgICAgICAgT3JnUGFydE9mLmlkIGFzIGlkIC0+IG9yZ2FuaXphdGlvbjEuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgT3JnUGFydE9mLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbjEuaWQgPShyICsnLScrIGV4dCkgYXMgdXVpZDQsICBlMy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQ0KSwgcmFwcmVzZW50ZWRvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjEuaWQpOwogICAgICAgICAgICAgIH0iciIgOyAgCiAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgIE9yZ1BhcnRPZi5jb2RlIC0+IG9yZ2FuaXphdGlvbjEudHlwZTsKICAgICAgICAgICAgT3JnUGFydE9mLnN0YXR1c0NvZGUgYXMgc3RhdHVzIHdoZXJlICh2YWx1ZSA9J2FjdGl2ZScpIC0+IG9yZ2FuaXphdGlvbjEuYWN0aXZlID0gY3JlYXRlKCdib29sZWFuJyksIG9yZ2FuaXphdGlvbjEuYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgICAgT3JnUGFydE9mLndob2xlT3JnYW5pemF0aW9uIGFzIHdob2xlT3JnYW4gLT4gYnVuZGxlLmVudHJ5IGFzIGU0LCBlNC5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTQucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIG9yZ2FuaXphdGlvbjIgdGhlbiB7CiAgICAgICAgICAgICAvLyB3aG9sZU9yZ2FuLmlkIC0+IG9yZ2FuaXphdGlvbjIuaWRlbnRpZmllcjsKICAgICAgICAgICAgIAogICAgICAgICAgICAgd2hvbGVPcmdhbi0+b3JnYW5pemF0aW9uMi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgd2hvbGVPcmdhbi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICAgIHdob2xlT3JnYW4gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9jb21wb25lbnRPZi9FbmNvbXBhc3NpbmdFbmNvdW50ZXIvcmVzcG9uc2libGVQYXJ0eS9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAKICAgICAgICAgICAgIHdob2xlT3JnYW4uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbjIuaWQgPShyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlNC5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQ1KSwgb3JnYW5pemF0aW9uMS5wYXJ0T2YgPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgcmVmZXJlbmNlLnJlZmVyZW5jZT0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlb3JnYW5pemF0aW9uMi5pZCkgOwogICAgICAgICAgICAgIH0iciIgOyAKICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICB3aG9sZU9yZ2FuLm5hbWUgYXMgdiAtPiBvcmdhbml6YXRpb24yLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgd2hvbGVPcmdhbi50ZWxlY29tIC0+IG9yZ2FuaXphdGlvbjIudGVsZWNvbTsKICAgICAgICAgICAgICB3aG9sZU9yZ2FuLmFkZHIgLT4gb3JnYW5pemF0aW9uMi5hZGRyZXNzOwogICAgICAgICAgICB9Indob2xlT3JnYW4iOwogICAgICAgICAgfSJPcmdQYXJ0T2YiOyAgICAgICAKICAgfSAib3JnYW5pemF0aW9uIjsKICAgIH0iZW50aXR5IjsKIH0icGFydGljcGFudCI7Cgogc3JjLmVuY291bnRlclBhcnRpY2lwYW50IGFzIHBhcnRpY2lwYW50ICB0aGVuIHsKICAgIHBhcnRpY2lwYW50LmFzc2lnbmVkRW50aXR5IGFzIGFzc2lnbmVkRW50aXR5IC0+IGJ1bmRsZS5lbnRyeSBhcyBlMzEzLCAgIGUzMTMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCcsICBlMzEzLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXJSb2xlJykgYXMgcHJhY3RpdGlvbmVyUm9sZSwgIHByYWN0aXRpb25lclJvbGUuaWQgPSB1dWlkKCkgYXMgdXVpZDEgLCAgZTMxMy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyUm9sZS8nLCB1dWlkMSksIHJlcXVlc3QudXJsID0gJ1ByYWN0aXRpb25lclJvbGUnLCBlbmNvdW50ZXIucGFydGljaXBhbnQgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHBhcnRpY2lwYW50MSB0aGVuIHsgCiAgIC8vIHBhcnRpY2lwYW50LnRpbWUgYXMgdGltZS0+cGFydGljaXBhbnQxLnBlcmlvZCBhcyBwZXJpb2QgLHBlcmlvZC5zdGFydD0odGltZS52YWx1ZSk7CiAgICBwYXJ0aWNpcGFudC0+cGFydGljaXBhbnQxLnBlcmlvZD1jcmVhdGUoJ1BlcmlvZCcpIGFzIHBlcmlvZCB0aGVuIHsKICAgICAgICBwYXJ0aWNpcGFudC50aW1lIGFzIHRpbWUgLT5wZXJpb2Quc3RhcnQ9IGNyZWF0ZSgnZGF0ZVRpbWUnKSBhcyBzdGFydCB0aGVuIFRTRGF0ZVRpbWUodGltZSxzdGFydCk7CiAgICAgIH0icGVyaW9kIjsKICAgICBwYXJ0aWNpcGFudCBhcyBwIC0+IHBhcnRpY2lwYW50MS50eXBlIGFzIHR5cGUgdGhlbiB7IAogICAgICAgcCAtPiB0eXBlLmNvZGluZyBhcyBjb2RpbmcgdGhlbnsKICAgICAgICAgcC0+IGNvZGluZy5jb2RlID0gKHAudHlwZUNvZGUpICJjb2RpY2UiOwogICAgICAgICBwLT4gY29kaW5nLnN5c3RlbSA9ICdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLVBhcnRpY2lwYXRpb25UeXBlJyAic3lzdGVtIjsKICAgICAgIH0gImNvZGVUeXBlIjsgCiAgICAgfSJ0eXBlIjsKICAgICBwYXJ0aWNpcGFudC0+IHBhcnRpY2lwYW50MS5pbmRpdmlkdWFsID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2VwYXJ0LCByZWZlcmVuY2VwYXJ0LnJlZmVyZW5jZSA9ICAoJ2h0dHBzOi8vZXhhbXBsZS9QcmFjdGl0aW9uZXJSb2xlLycgKyAlcHJhY3RpdGlvbmVyUm9sZS5pZCkicGFyIjsKICAgICBwYXJ0aWNpcGFudC5mdW5jdGlvbkNvZGUgLT4gcHJhY3RpdGlvbmVyUm9sZS5jb2RlOwogICAgIGFzc2lnbmVkRW50aXR5ICAtPiBidW5kbGUuZW50cnkgYXMgZTMzLCBlMzMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTMzLnJlc291cmNlID0gY3JlYXRlKCdQcmFjdGl0aW9uZXInKSBhcyBwcmFjdGl0aW9uZXIgdGhlbiB7CiAgICAgICAKICAgICAgICBhc3NpZ25lZEVudGl0eS0+cHJhY3RpdGlvbmVyLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICBhc3NpZ25lZEVudGl0eS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICBhc3NpZ25lZEVudGl0eSAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICBhc3NpZ25lZEVudGl0eSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvZW5jb3VudGVyUGFydGljaXBhbnQnImNvZGUiOwogICAgICAgICB9ImNvZGluZyI7CiAgICAgICB9Im1ldGEiOwogICAgICAgCiAgICAgICBhc3NpZ25lZEVudGl0eS5pZCBhcyBpZCAtPiBwcmFjdGl0aW9uZXIuaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewogICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQ7CiAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IHByYWN0aXRpb25lci5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDIsIGUzMy5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycsIHV1aWQyKSwgIHByYWN0aXRpb25lclJvbGUucHJhY3RpdGlvbmVyID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvUHJhY3RpdGlvbmVyLycgKyAlcHJhY3RpdGlvbmVyLmlkKSA7CiAgICAgICAgIH0iciIgOyAgICAKICAgICB9ImlkZW50aWZpZXIiOwogICAgIGFzc2lnbmVkRW50aXR5LmlkIGFzIGlkIHdoZXJlIChyb290PScyLjE2Ljg0MC4xLjExMzg4My4yLjkuNC4zLjInKSB0aGVuIHsKICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnUHJhY3RpdGlvbmVyP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgIH0iMi4xNi44NDAuMS4xMTM4ODMuMi45LjQuMy4yIjsKICAgICBhc3NpZ25lZEVudGl0eS5pZCBhcyBpZCB3aGVyZSAocm9vdCE9JzIuMTYuODQwLjEuMTEzODgzLjIuOS40LjMuMicpIHRoZW4gewogICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ1ByYWN0aXRpb25lcj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgIH0iZGl2ZXJzbyI7CiAgICAgYXNzaWduZWRFbnRpdHkuY29kZSAtPiBwcmFjdGl0aW9uZXJSb2xlLmNvZGU7CiAgICAgYXNzaWduZWRFbnRpdHkuYWRkciAtPiBwcmFjdGl0aW9uZXIuYWRkcmVzczsKICAgICBhc3NpZ25lZEVudGl0eS50ZWxlY29tIC0+IHByYWN0aXRpb25lci50ZWxlY29tOwogICAgIGFzc2lnbmVkRW50aXR5LmFzc29jaWF0ZWRQZXJzb24gYXMgYXNzaWduZWRQZXJzb24gdGhlbiB7CiAgICAgICAgYXNzaWduZWRQZXJzb24ubmFtZSAtPiBwcmFjdGl0aW9uZXIubmFtZTsKICAgICAgICBhc3NpZ25lZFBlcnNvbi5iaXJ0aFRpbWUgIGFzIGJpcnRoVGltZSB0aGVuewogICAgICAgICAgYmlydGhUaW1lLnZhbHVlIGFzIGRhdGUgLT4gcHJhY3RpdGlvbmVyLmJpcnRoRGF0ZSA9IHRydW5jYXRlKGRhdGUsIDEwKSAiYmlydGhUaW1lbGVnYWwiOwogICAgICAgIH0gImJpcnRoIjsKICAgfSAibmFtZSI7CiAgIGFzc2lnbmVkRW50aXR5LnJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGFzIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIC0+ICBidW5kbGUuZW50cnkgYXMgZTM0LCBlMzQucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgZTM0LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24gdGhlbnsKICAgICAKICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLT5vcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24gLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2VuY291bnRlclBhcnRpY2lwYW50L3Njb3BpbmdPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgfSJjb2RpbmciOwogICAgIH0ibWV0YSI7CiAgICAgCiAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgcmVwcmVzZW50ZWRPcmdhbml6YXRpb24tPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgfSJleHQiOwogICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiBvcmdhbml6YXRpb24uaWQgPSAociArJy0nKyBleHQpIGFzIHV1aWQzLCAgZTM0LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDMpLCAgcHJhY3RpdGlvbmVyUm9sZS5vcmdhbml6YXRpb24gPSBjcmVhdGUoJ1JlZmVyZW5jZScpIGFzIHJlZmVyZW5jZSwgIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICVvcmdhbml6YXRpb24uaWQpOwogICAgICAgfSJyIiA7IAogICB9ImlkZW50aWZpZXIiOwogICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5uYW1lIGFzIHYgLT4gb3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLnRlbGVjb20gLT4gb3JnYW5pemF0aW9uLnRlbGVjb207CiAgIHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLmFkZHIgLT4gb3JnYW5pemF0aW9uLmFkZHJlc3M7IAogICByZXByZXNlbnRlZE9yZ2FuaXphdGlvbi5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBPcmdQYXJ0T2YgLT4gYnVuZGxlLmVudHJ5IGFzIGUzNSwgIGUzNS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZTM1LnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24xIHRoZW57CiAgICAgICBPcmdQYXJ0T2YuaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMS5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgIAogICAgICAgICBPcmdQYXJ0T2YtPm9yZ2FuaXphdGlvbjEubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgIE9yZ1BhcnRPZi0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICAgICAgIE9yZ1BhcnRPZiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvZW5jb3VudGVyUGFydGljaXBhbnQvc2NvcGluZ09yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICB9Im1ldGEiOwogICAgICAgICAKICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgIE9yZ1BhcnRPZi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgIH0iZXh0IjsKICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gb3JnYW5pemF0aW9uMS5pZCA9IChyICsnLScrIGV4dCkgYXMgdXVpZDQsICBlMzUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNCksICBvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjEuaWQpIDsKICAgICAgICAgfSJyIiA7ICAgCiAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgIE9yZ1BhcnRPZi5jb2RlIC0+IG9yZ2FuaXphdGlvbjEudHlwZTsKICAgICAgIE9yZ1BhcnRPZi5zdGF0dXNDb2RlIGFzIHN0YXR1cyB3aGVyZSAodmFsdWUgPSdhY3RpdmUnKSAtPiBvcmdhbml6YXRpb24xLmFjdGl2ZSA9IGNyZWF0ZSgnYm9vbGVhbicpLCBvcmdhbml6YXRpb24xLmFjdGl2ZSA9IHRydWU7CiAgICAgICBPcmdQYXJ0T2Yud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVPcmdhbiAtPiBidW5kbGUuZW50cnkgYXMgZTM2LCBlMzYucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUzNi5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uMiB0aGVuIHsKICAgICAgICAgCiAgICAgICAgIHdob2xlT3JnYW4tPm9yZ2FuaXphdGlvbjIubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgIHdob2xlT3JnYW4tPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICB3aG9sZU9yZ2FuIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgd2hvbGVPcmdhbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvZW5jb3VudGVyUGFydGljaXBhbnQvc2NvcGluZ09yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZi93aG9sZU9yZ2FuaXphdGlvbiciY29kZSI7CiAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICB9Im1ldGEiOwoKICAgICAgICAgCiAgICAgICAgIHdob2xlT3JnYW4uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICB3aG9sZU9yZ2FuLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgICB9ImV4dCI7CiAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IG9yZ2FuaXphdGlvbjEuaWQ9IChyICsnLScrIGV4dCkgYXMgdXVpZDUsICBlMzYuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkNSksIG9yZ2FuaXphdGlvbjEucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2U9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJW9yZ2FuaXphdGlvbjIuaWQpICA7CiAgICAgICAgICAgfSJyIiA7ICAgCiAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICB3aG9sZU9yZ2FuLm5hbWUgYXMgdiAtPiBvcmdhbml6YXRpb24yLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgIHdob2xlT3JnYW4udGVsZWNvbSAtPiBvcmdhbml6YXRpb24yLnRlbGVjb207CiAgICAgICAgIHdob2xlT3JnYW4uYWRkciAtPiBvcmdhbml6YXRpb24yLmFkZHJlc3M7CiAgICAgICAgICAgIH0id2hvbGVPcmdhbiI7CiAgICAgICAgIH0iT3JnUGFydE9mIjsgICAgICAgCiAgICAgICB9InJlcHJlc2VudGVkT3JnYW5pemF0aW9uIjsKICAgIH0gImFzc2lnbmVkRW50aXR5IjsKICB9ICJQYXJ0aWNpcGFudCI7CiB9Owogc3JjLmxvY2F0aW9uIGFzIExvY2F0aW9uIHRoZW4gewogIExvY2F0aW9uLmhlYWx0aENhcmVGYWNpbGl0eSBhcyBIQ0YgLT4gYnVuZGxlLmVudHJ5IGFzIGU1LCBlNS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlNS5yZXNvdXJjZSA9IGNyZWF0ZSgnTG9jYXRpb24nKSBhcyBsb2MgdGhlbiB7CiAgICAKICAgIEhDRi0+bG9jLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgSENGLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgIEhDRiAtPiBjb2Rpbmcuc3lzdGVtID0naHR0cDovL2FsZ29yaXRtb2Rpc2NvcmluZycic3lzdGVtIjsKICAgICAgICBIQ0YgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2NvbXBvbmVudE9mL0VuY29tcGFzc2luZ0VuY291bnRlci9sb2NhdGlvbi9oZWFsdGhDYXJlRmFjaWxpdHknImNvZGUiOwogICAgICAgICAgICB9ImNvZGluZyI7CiAgICAgIH0ibWV0YSI7CiAgICAKICAgIEhDRiAtPiBlbmNvdW50ZXIubG9jYXRpb24gYXMgbG9jYXRpb25zIHRoZW4gewogICAKICAgIAogICAgSENGLmlkIGFzIGlkIC0+IGxvYy5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dC0+IGlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgSENGLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ0xvY2F0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICB9ImV4dCI7CiAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQgIC0+IGxvYy5pZCA9KHIgKyctJysgZXh0KSBhcyB1dWlkNiwgIGU1LmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Mb2NhdGlvbi8nLCB1dWlkNiksIGxvY2F0aW9ucy5sb2NhdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvTG9jYXRpb24vJyArICVsb2MuaWQpImxvY2MiOwogICAgICB9InIiIDsgCiAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgIEhDRi5jb2RlIC0+IGxvYy50eXBlOwogICAgICBIQ0YubG9jYXRpb24gYXMgc3JjTG9jYXRpb24gdGhlbiB7CiAgICAgICAgc3JjTG9jYXRpb24ubmFtZSBhcyB2IC0+IGxvYy5uYW1lID0gKHYub3RoZXIpOwogICAgICAgIHNyY0xvY2F0aW9uLmFkZHIgLT4gbG9jLmFkZHJlc3M7CiAgICAgIH0ibG9jYXRpb24yIjsKICAgICBIQ0Yuc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uIGFzIHNlcnZQcm92T3JnIC0+ICBidW5kbGUuZW50cnkgYXMgZSwgZS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZS5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uICB0aGVuIHsKICAgICAgCiAgICAgIHNlcnZQcm92T3JnLT5zZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgIHNlcnZQcm92T3JnLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgc2VydlByb3ZPcmcgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICBzZXJ2UHJvdk9yZyAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvY29tcG9uZW50T2YvRW5jb21wYXNzaW5nRW5jb3VudGVyL2xvY2F0aW9uL2hlYWx0aENhcmVGYWNpbGl0eS9zZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24nImNvZGUiOwogICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICB9Im1ldGEiOwogICAgICAKICAgICAgc2VydlByb3ZPcmcuaWQgYXMgaWQgLT4gc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgIHNlcnZQcm92T3JnLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgIGlkLnJvb3QgYXMgciB0aGVuIHsKICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLmlkID0ociArJy0nKyBleHQpIGFzIHV1aWQsICBlLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZCksIGxvYy5tYW5hZ2luZ09yZ2FuaXphdGlvbiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCAgcmVmZXJlbmNlLnJlZmVyZW5jZSA9ICgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nICsgJXNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi5pZCk7CiAgICAgICAgICB9InIiIDsgIAogICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgc2VydlByb3ZPcmcubmFtZSBhcyB2IC0+IHNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi5uYW1lID0gKHYub3RoZXIpOwogICAgICAgIHNlcnZQcm92T3JnLnRlbGVjb20gLT4gc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLnRlbGVjb207CiAgICAgICAgc2VydlByb3ZPcmcuYWRkciAtPiBzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24uYWRkcmVzczsKICAgICAgICBzZXJ2UHJvdk9yZy5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBhc09yZ1BhcnRPZiB0aGVuIHsKICAgICAgICBhc09yZ1BhcnRPZiBhcyBhc09yZ1BhcnRPZjEgLT4gYnVuZGxlLmVudHJ5IGFzIGUxLCBlMS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMS5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgYXNvcmdhbml6YXRpb24gdGhlbiB7CiAgICAgICAgICAgIAogICAgICAgICAgYXNPcmdQYXJ0T2YxLT5hc29yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgIGFzT3JnUGFydE9mMS0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKICAgICAgICAgICAgICBhc09yZ1BhcnRPZjEgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgYXNPcmdQYXJ0T2YxIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9jb21wb25lbnRPZi9FbmNvbXBhc3NpbmdFbmNvdW50ZXIvbG9jYXRpb24vaGVhbHRoQ2FyZUZhY2lsaXR5L3NlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgfSJtZXRhIjsKCiAgICAgICAgICAgIGFzT3JnUGFydE9mMS5pZCBhcyBpZCAtPiBhc29yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgICBhc09yZ1BhcnRPZjEtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7CiAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gYXNvcmdhbml6YXRpb24uaWQgPShyICsnLScrIGV4dCkgYXMgdXVpZDEsICBlMS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQxKSwgc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlYXNvcmdhbml6YXRpb24uaWQpOwogICAgICAgICAgICAgIH0iciIgOyAgCiAgICAgICAgICAgIH0iaWRlbnRpZmllciI7CiAgICAgICAgICAgIGFzT3JnUGFydE9mMS5jb2RlIC0+IGFzb3JnYW5pemF0aW9uLnR5cGU7CiAgICAgICAgICAgIGFzT3JnUGFydE9mMS5zdGF0dXNDb2RlIGFzIHN0YXR1cyB3aGVyZSAoY29kZT0nYWN0aXZlJykgLT4gYXNvcmdhbml6YXRpb24uYWN0aXZlID0gY3JlYXRlKCdib29sZWFuJyksIGFzb3JnYW5pemF0aW9uLmFjdGl2ZSA9ICd0cnVlJzsKICAgICAgICAgICAgYXNPcmdQYXJ0T2YxLndob2xlT3JnYW5pemF0aW9uIGFzIHdob2xlT3JnIHRoZW57CiAgICAgICAgICAgICAgICB3aG9sZU9yZyBhcyB3aG9sZU9yZzEgLT4gYnVuZGxlLmVudHJ5IGFzIGUyLCBlMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMi5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgd2hvbGVvcmdhbml6YXRpb24gdGhlbiB7CiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxLT53aG9sZW9yZ2FuaXphdGlvbi5tZXRhIGFzIG1ldGEgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwogICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxIC0+IGNvZGluZy5jb2RlID0nQ2xpbmljYWxEb2N1bWVudC9jb21wb25lbnRPZi9FbmNvbXBhc3NpbmdFbmNvdW50ZXIvbG9jYXRpb24vaGVhbHRoQ2FyZUZhY2lsaXR5L3NlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi9hc09yZ2FuaXphdGlvblBhcnRPZiciY29kZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICAgICAgICAgIH0ibWV0YSI7CgogICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMS5pZCBhcyBpZCAtPiBhc29yZ2FuaXphdGlvbi5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7CiAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT5pZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwogICAgICAgICAgICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICAgICAgICAgICAgaWQucm9vdCBhcyByIHRoZW4gewogICAgICAgICAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiAgd2hvbGVvcmdhbml6YXRpb24uaWQgPShyICsnLScrIGV4dCkgYXMgdXVpZDIsICBlMi5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQyKSwgYXNvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICV3aG9sZW9yZ2FuaXphdGlvbi5pZCk7CiAgICAgICAgICAgICAgICAgICAgICB9InIiIDsgICAgCiAgICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEubmFtZSBhcyB2IC0+IHdob2xlb3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7CiAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxLnRlbGVjb20gLT4gd2hvbGVvcmdhbml6YXRpb24udGVsZWNvbTsKICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEuYWRkciAtPiB3aG9sZW9yZ2FuaXphdGlvbi5hZGRyZXNzOwogICAgICAgICAgICAgICAgICB9Indob2xlT3JnMSI7CiAgICAgICAgICAgICAgfSJ3aG9sZU9yZyI7CiAgICAgICAgICB9Ik9yZ2FuaXphdGlvblBhcnRPZnByb3ZpZGVyIjsKICAgICAgIH0iYXNPcmcxIjsKICAgIH0iU1BPIjsKIC8vIH0ibG9jYXRpb24xIjsKfSJoY2YiOwogIH0ibG9jYXRpb24xIjsgCiB9ImxvY2F0aW9uIjsKCn0KCmdyb3VwIENsaW5pY2FsRG9jdW1lbnRhdGlvbk9mKHNvdXJjZSBzcmM6IHJlcHJlc2VudGVkT3JnYW5pemF0aW9uLCB0YXJnZXQgdGd0OiBvcmdhbml6YXRpb24sIHRhcmdldCBidW5kbGUgOiBCdW5kbGUpewogIHNyYy5uYW1lIC0+IHRndC5uYW1lOwogIHNyYy50ZWxlY29tIC0+IHRndC50ZWxlY29tOwogIHNyYy5hZGRyIC0+IHRndC5hZGRyZXNzOwogIHNyYy5hc09yZ2FuaXphdGlvblBhcnRPZiBhcyBhc09yZ2FuaXphdGlvblBhcnRPZiB0aGVuIHsKICAgICAgICBhc09yZ2FuaXphdGlvblBhcnRPZiAtPiBidW5kbGUuZW50cnkgYXMgZSwgZS5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCAgZS5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgb3JnYW5pemF0aW9uMiAgdGhlbiB7CiAgICAgICAgICAKICAgICAgICAgIGFzT3JnYW5pemF0aW9uUGFydE9mLT5vcmdhbml6YXRpb24yLm1ldGEgYXMgbWV0YSB0aGVuIHsKICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2YtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7CiAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2YgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2YgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2RvY3VtZW50YXRpb25PZi9zZXJ2aWNlRXZlbnQvcGVyZm9ybWVyL3JlcHJlc2VudGVkT3JnYW5pemF0aW9uL2FzT3JnYW5pemF0aW9uUGFydE9mJyJjb2RlIjsKICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwogICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgCiAgICAgICAgICBhc09yZ2FuaXphdGlvblBhcnRPZi5pZCBhcyBpZCAtPiBvcmdhbml6YXRpb24yLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gaWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKICAgICAgICAgICAgICBhc09yZ2FuaXphdGlvblBhcnRPZi0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgIH0iZXh0IjsKICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwogICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgaWQuZXh0ZW5zaW9uIGFzIGV4dCAgLT4gIG9yZ2FuaXphdGlvbjIuaWQgPShyICsnLScrIGV4dCkgYXMgdXVpZCwgIGUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkKSwgdGd0LnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycrICVvcmdhbml6YXRpb24yLmlkKTsKICAgICAgICAgICAgfSJyIiA7ICAgCiAgICAgICAgfSJpZGVudGlmaWVyIjsKICAgICAgICAgIGFzT3JnYW5pemF0aW9uUGFydE9mLmNvZGUgLT4gb3JnYW5pemF0aW9uMi50eXBlOwogICAgICAgICAgYXNPcmdhbml6YXRpb25QYXJ0T2Yuc3RhdHVzQ29kZSB3aGVyZSh2YWx1ZSA9ICdhY3RpdmUnKSAtPiBvcmdhbml6YXRpb24yLmFjdGl2ZSA9ICd0cnVlJzsKICAgICAgICAgIGFzT3JnYW5pemF0aW9uUGFydE9mLndob2xlT3JnYW5pemF0aW9uIGFzIHdob2xlT3JnYW5pemF0aW9uIC0+IGJ1bmRsZS5lbnRyeSBhcyBlMywgZTMucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUzLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBvcmdhbml6YXRpb24zICB0aGVuewogICAgICAgICAgICAKICAgICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24tPm9yZ2FuaXphdGlvbjMubWV0YSBhcyBtZXRhIHRoZW4gewogICAgICAgICAgICAgIHdob2xlT3JnYW5pemF0aW9uLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewogICAgICAgICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24gLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7CiAgICAgICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbiAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvZG9jdW1lbnRhdGlvbk9mL3NlcnZpY2VFdmVudC9wZXJmb3JtZXIvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24vYXNPcmdhbml6YXRpb25QYXJ0T2YnImNvZGUiOwogICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAKICAgICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24uaWQgYXMgaWQgLT4gb3JnYW5pemF0aW9uMy5pZGVudGlmaWVyIGFzIGlkZW50aWZpZXIgdGhlbiB7CiAgICAgICAgICAgICAgaWQucm9vdCBhcyByIC0+aWRlbnRpZmllci5zeXN0ZW09IHRyYW5zbGF0ZShyLCAnaHR0cDovL2hsNy5vcmcvZmhpci9Db25jZXB0TWFwL3NwZWNpYWwtb2lkMnVyaScsICd1cmknKSAicm9vdDEiOwogICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7CiAgICAgICAgICAgICAgIHdob2xlT3JnYW5pemF0aW9uIC0+IHJlcXVlc3QudXJsID0gYXBwZW5kKCdPcmdhbml6YXRpb24/aWRlbnRpZmllcj0nLGV4dCkiVVVJRCI7CiAgICAgICAgICAgICAgfSJleHQiOwogICAgICAgICAgICAgIGlkLmFzc2lnbmluZ0F1dGhvcml0eU5hbWUgYXMgcyAtPiAgaWRlbnRpZmllci5hc3NpZ25lciBhcyBhLCAgYS5kaXNwbGF5ID0gczsKICAgICAgICAgICAgICBpZC5yb290IGFzIHIgdGhlbiB7CiAgICAgICAgICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0ICAtPiAgb3JnYW5pemF0aW9uMy5pZCA9KHIgKyctJysgZXh0KSBhcyB1dWlkMSwgIGUuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMSksIG9yZ2FuaXphdGlvbjIucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2VPcmcsIHJlZmVyZW5jZU9yZy5yZWZlcmVuY2UgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDEpOwogICAgICAgICAgICAgIH0iciIgOyAgCiAgICAgICAgICB9ImlkZW50aWZpZXIiOwogICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbi5pZCAtPiBvcmdhbml6YXRpb24zLmlkZW50aWZpZXI7CiAgICAgICAgICAgIHdob2xlT3JnYW5pemF0aW9uLm5hbWUgLT4gb3JnYW5pemF0aW9uMy5uYW1lOwogICAgICAgICAgICB3aG9sZU9yZ2FuaXphdGlvbi50ZWxlY29tIC0+IG9yZ2FuaXphdGlvbjMudGVsZWNvbTsKICAgICAgICAgICAgd2hvbGVPcmdhbml6YXRpb24uYWRkciAtPiBvcmdhbml6YXRpb24zLmFkZHJlc3M7CiAgICAgICAgICB9ICJ3aG9sZU9yZ2FuaXphdGlvbiI7CiAgICB9ICJvcmdhbml6YXRpb25QYXJ0T2YiOwogIH0gImNyZWF0aW9uIjsKIH0KCgoKCi8vIGdyb3VwIENsaW5pY2FsRG9jdW1lbnRMb2NhdGlvbihzb3VyY2Ugc3JjIDogSGVhbHRoQ2FyZUZhY2lsaXR5LCB0YXJnZXQgYnVuZGxlIDogQnVuZGxlLCB0YXJnZXQgbG9jIDogTG9jYXRpb24pewovLyAgICAgc3JjLmlkIC0+IGxvYy5pZGVudGlmaWVyOwovLyAgICAgc3JjLmNvZGUgLT4gbG9jLnR5cGU7Ci8vICAgICBzcmMubG9jYXRpb24gYXMgc3JjTG9jYXRpb24gdGhlbiB7Ci8vICAgICBzcmNMb2NhdGlvbi5uYW1lIGFzIHYgLT4gbG9jLm5hbWUgPSAodi5vdGhlcik7Ci8vICAgICBzcmNMb2NhdGlvbi5hZGRyIC0+IGxvYy5hZGRyZXNzOwovLyAgICAgfSJsb2NhdGlvbjIiOwovLyAgICAgc3JjLnNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbiBhcyBzZXJ2UHJvdk9yZyAtPiAgYnVuZGxlLmVudHJ5IGFzIGUsIGUucmVxdWVzdCA9IGNyZWF0ZSgnQmFja2JvbmVFbGVtZW50JykgYXMgcmVxdWVzdCwgcmVxdWVzdC5tZXRob2QgPSAnUFVUJywgIGUucmVzb3VyY2UgPSBjcmVhdGUoJ09yZ2FuaXphdGlvbicpIGFzIHNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbiwgIHNlcnZpY2VQcm92aWRlck9yZ2FuaXphdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkLCAgZS5mdWxsVXJsID0gYXBwZW5kKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycsIHV1aWQpLCAgbG9jLm1hbmFnaW5nT3JnYW5pemF0aW9uID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsICByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLmlkKSAgdGhlbiB7CiAgICAgIAovLyAgICAgICBzZXJ2UHJvdk9yZy0+c2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLm1ldGEgYXMgbWV0YSB0aGVuIHsKLy8gICAgICAgICBzZXJ2UHJvdk9yZy0+bWV0YS50YWcgPSBjcmVhdGUoJ0NvZGluZycpIGFzIGNvZGluZyB0aGVuIHsKLy8gICAgICAgICAgIHNlcnZQcm92T3JnIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwovLyAgICAgICAgICAgc2VydlByb3ZPcmcgLT4gY29kaW5nLmNvZGUgPSdDbGluaWNhbERvY3VtZW50L2F1dGhvciciY29kZSI7Ci8vICAgICAgICAgICAgICAgfSJjb2RpbmciOwovLyAgICAgICAgIH0ibWV0YSI7CiAgICAgIAovLyAgICAgICBzZXJ2UHJvdk9yZy5pZCBhcyBpZCAtPiBzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewovLyAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKLy8gICAgICAgICBpZC5leHRlbnNpb24gYXMgZXh0LT4gaWRlbnRpZmllci52YWx1ZSA9IGV4dCB0aGVuIHsKLy8gICAgICAgICAgIHNlcnZQcm92T3JnLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKLy8gICAgICAgICB9ImV4dCI7Ci8vICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwovLyAgICAgfSJpZGVudGlmaWVyIjsKLy8gICAgICAgc2VydlByb3ZPcmcuaWQgLT4gc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLmlkZW50aWZpZXI7Ci8vICAgICAgICAgICAgIHNlcnZQcm92T3JnLm5hbWUgYXMgdiAtPiBzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24ubmFtZSA9ICh2Lm90aGVyKTsKLy8gICAgICAgICAgICAgc2VydlByb3ZPcmcudGVsZWNvbSAtPiBzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24udGVsZWNvbTsKLy8gICAgICAgICAgICAgc2VydlByb3ZPcmcuYWRkciAtPiBzZXJ2aWNlUHJvdmlkZXJPcmdhbml6YXRpb24uYWRkcmVzczsKLy8gICAgICAgICAgICAgc2VydlByb3ZPcmcuYXNPcmdhbml6YXRpb25QYXJ0T2YgYXMgYXNPcmdQYXJ0T2YgdGhlbiB7Ci8vICAgICAgICAgICAgIGFzT3JnUGFydE9mIGFzIGFzT3JnUGFydE9mMSAtPiBidW5kbGUuZW50cnkgYXMgZTEsIGUxLnJlcXVlc3QgPSBjcmVhdGUoJ0JhY2tib25lRWxlbWVudCcpIGFzIHJlcXVlc3QsIHJlcXVlc3QubWV0aG9kID0gJ1BVVCcsIGUxLnJlc291cmNlID0gY3JlYXRlKCdPcmdhbml6YXRpb24nKSBhcyBhc29yZ2FuaXphdGlvbiwgIGFzb3JnYW5pemF0aW9uLmlkID0gdXVpZCgpIGFzIHV1aWQxLCAgZTEuZnVsbFVybCA9IGFwcGVuZCgnaHR0cHM6Ly9leGFtcGxlL09yZ2FuaXphdGlvbi8nLCB1dWlkMSksICAgc2VydmljZVByb3ZpZGVyT3JnYW5pemF0aW9uLnBhcnRPZiA9IGNyZWF0ZSgnUmVmZXJlbmNlJykgYXMgcmVmZXJlbmNlLCByZWZlcmVuY2UucmVmZXJlbmNlID0gKCdodHRwczovL2V4YW1wbGUvT3JnYW5pemF0aW9uLycgKyAlYXNvcmdhbml6YXRpb24uaWQpIHRoZW4gewogICAgICAgICAgICAgIAovLyAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMS0+YXNvcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewovLyAgICAgICAgICAgICAgICAgYXNPcmdQYXJ0T2YxLT5tZXRhLnRhZyA9IGNyZWF0ZSgnQ29kaW5nJykgYXMgY29kaW5nIHRoZW4gewovLyAgICAgICAgICAgICAgICAgICBhc09yZ1BhcnRPZjEgLT4gY29kaW5nLnN5c3RlbSA9J2h0dHA6Ly9hbGdvcml0bW9kaXNjb3JpbmcnInN5c3RlbSI7Ci8vICAgICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYXV0aG9yJyJjb2RlIjsKLy8gICAgICAgICAgICAgICAgICAgICAgIH0iY29kaW5nIjsKLy8gICAgICAgICAgICAgICAgIH0ibWV0YSI7CiAgICAgICAgICAgICAgCi8vICAgICAgICAgICAgICAgYXNPcmdQYXJ0T2YxLmlkIGFzIGlkIC0+IGFzb3JnYW5pemF0aW9uLmlkZW50aWZpZXIgYXMgaWRlbnRpZmllciB0aGVuIHsKLy8gICAgICAgICAgICAgICAgIGlkLnJvb3QgYXMgciAtPmlkZW50aWZpZXIuc3lzdGVtPSB0cmFuc2xhdGUociwgJ2h0dHA6Ly9obDcub3JnL2ZoaXIvQ29uY2VwdE1hcC9zcGVjaWFsLW9pZDJ1cmknLCAndXJpJykgInJvb3QxIjsKLy8gICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPiBpZGVudGlmaWVyLnZhbHVlID0gZXh0IHRoZW4gewovLyAgICAgICAgICAgICAgICAgICBhc09yZ1BhcnRPZjEtPiByZXF1ZXN0LnVybCA9IGFwcGVuZCgnT3JnYW5pemF0aW9uP2lkZW50aWZpZXI9JyxleHQpIlVVSUQiOwovLyAgICAgICAgICAgICAgICAgfSJleHQiOwovLyAgICAgICAgICAgICAgICAgaWQuYXNzaWduaW5nQXV0aG9yaXR5TmFtZSBhcyBzIC0+ICBpZGVudGlmaWVyLmFzc2lnbmVyIGFzIGEsICBhLmRpc3BsYXkgPSBzOwovLyAgICAgICAgICAgICB9ImlkZW50aWZpZXIiOwovLyAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMS5pZCAtPiBhc29yZ2FuaXphdGlvbi5pZGVudGlmaWVyOwovLyAgICAgICAgICAgICAgICAgYXNPcmdQYXJ0T2YxLmNvZGUgLT4gYXNvcmdhbml6YXRpb24udHlwZTsKLy8gICAgICAgICAgICAgICAgIGFzT3JnUGFydE9mMS5zdGF0dXNDb2RlIGFzIHN0YXR1cyB3aGVyZSAoY29kZT0nYWN0aXZlJykgLT4gYXNvcmdhbml6YXRpb24uYWN0aXZlID0gY3JlYXRlKCdib29sZWFuJyksIGFzb3JnYW5pemF0aW9uLmFjdGl2ZSA9ICd0cnVlJzsKLy8gICAgICAgICAgICAgICAgIC8vYXNPcmdQYXJ0T2YxLmVmZmVjdGl2ZVRpbWUgLT4gCi8vICAgICAgICAgICAgICAgICBhc09yZ1BhcnRPZjEud2hvbGVPcmdhbml6YXRpb24gYXMgd2hvbGVPcmcgdGhlbnsKLy8gICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZyBhcyB3aG9sZU9yZzEgLT4gYnVuZGxlLmVudHJ5IGFzIGUyLCBlMi5yZXF1ZXN0ID0gY3JlYXRlKCdCYWNrYm9uZUVsZW1lbnQnKSBhcyByZXF1ZXN0LCByZXF1ZXN0Lm1ldGhvZCA9ICdQVVQnLCBlMi5yZXNvdXJjZSA9IGNyZWF0ZSgnT3JnYW5pemF0aW9uJykgYXMgd2hvbGVvcmdhbml6YXRpb24sICB3aG9sZW9yZ2FuaXphdGlvbi5pZCA9IHV1aWQoKSBhcyB1dWlkMiwgIGUyLmZ1bGxVcmwgPSBhcHBlbmQoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJywgdXVpZDIpLCAgYXNvcmdhbml6YXRpb24ucGFydE9mID0gY3JlYXRlKCdSZWZlcmVuY2UnKSBhcyByZWZlcmVuY2UsIHJlZmVyZW5jZS5yZWZlcmVuY2UgPSAoJ2h0dHBzOi8vZXhhbXBsZS9Pcmdhbml6YXRpb24vJyArICV3aG9sZW9yZ2FuaXphdGlvbi5pZCkgdGhlbiB7CiAgICAgICAgICAgICAgICAgICAgICAKLy8gICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMS0+d2hvbGVvcmdhbml6YXRpb24ubWV0YSBhcyBtZXRhIHRoZW4gewovLyAgICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEtPm1ldGEudGFnID0gY3JlYXRlKCdDb2RpbmcnKSBhcyBjb2RpbmcgdGhlbiB7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGVPcmcxIC0+IGNvZGluZy5zeXN0ZW0gPSdodHRwOi8vYWxnb3JpdG1vZGlzY29yaW5nJyJzeXN0ZW0iOwovLyAgICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMSAtPiBjb2RpbmcuY29kZSA9J0NsaW5pY2FsRG9jdW1lbnQvYXV0aG9yJyJjb2RlIjsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSJjb2RpbmciOwovLyAgICAgICAgICAgICAgICAgICAgICAgICB9Im1ldGEiOwogICAgICAgICAgICAgICAgICAgICAgCi8vICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEuaWQgYXMgaWQgLT4gd2hvbGVvcmdhbml6YXRpb24uaWRlbnRpZmllciBhcyBpZGVudGlmaWVyIHRoZW4gewovLyAgICAgICAgICAgICAgICAgICAgICAgICBpZC5yb290IGFzIHIgLT5pZGVudGlmaWVyLnN5c3RlbT0gdHJhbnNsYXRlKHIsICdodHRwOi8vaGw3Lm9yZy9maGlyL0NvbmNlcHRNYXAvc3BlY2lhbC1vaWQydXJpJywgJ3VyaScpICJyb290MSI7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmV4dGVuc2lvbiBhcyBleHQtPmlkZW50aWZpZXIudmFsdWUgPSBleHQgdGhlbiB7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEgLT4gcmVxdWVzdC51cmwgPSBhcHBlbmQoJ09yZ2FuaXphdGlvbj9pZGVudGlmaWVyPScsZXh0KSJVVUlEIjsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSJleHQiOwovLyAgICAgICAgICAgICAgICAgICAgICAgICBpZC5hc3NpZ25pbmdBdXRob3JpdHlOYW1lIGFzIHMgLT4gIGlkZW50aWZpZXIuYXNzaWduZXIgYXMgYSwgIGEuZGlzcGxheSA9IHM7Ci8vICAgICAgICAgICAgICAgICAgICAgfSJpZGVudGlmaWVyIjsKLy8gICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMS5pZCAtPiB3aG9sZW9yZ2FuaXphdGlvbi5pZGVudGlmaWVyOwovLyAgICAgICAgICAgICAgICAgICAgICAgICB3aG9sZU9yZzEubmFtZSBhcyB2IC0+IHdob2xlb3JnYW5pemF0aW9uLm5hbWUgPSAodi5vdGhlcik7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMS50ZWxlY29tIC0+IHdob2xlb3JnYW5pemF0aW9uLnRlbGVjb207Ci8vICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlT3JnMS5hZGRyIC0+IHdob2xlb3JnYW5pemF0aW9uLmFkZHJlc3M7Ci8vICAgICAgICAgICAgICAgICAgICAgfSJ3aG9sZU9yZzEiOwovLyAgICAgICAgICAgICAgICAgfSJ3aG9sZU9yZyI7Ci8vICAgICAgICAgICAgIH0iT3JnYW5pemF0aW9uUGFydE9mcHJvdmlkZXIiOwovLyAgICAgICAgIH0iYXNPcmcxIjsKLy8gICAgIH0iU1BPIjsKLy8gfQoKZ3JvdXAgQ2hFeHRFcHJWZXJzaW9uTnVtYmVyKHNvdXJjZSBzcmM6IElOVCwgdGFyZ2V0IGV4dDogRXh0ZW5zaW9uKSB7CiAgc3JjIC0+IGV4dC51cmwgPSAnaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvbXBvc2l0aW9uLWNsaW5pY2FsZG9jdW1lbnQtdmVyc2lvbk51bWJlcicgInVybCI7CiAgc3JjLnZhbHVlIGFzIHYgLT4gZXh0LnZhbHVlID0gY2FzdCh2LCAnc3RyaW5nJykidmFsdWUiOwp9Cgpncm91cCBDbGluaWNhbERvY3VtZW50T3JnYW5pemF0aW9uKHNvdXJjZSBzcmMgOiBDdXN0b2RpYW5Pcmdhbml6YXRpb24sIHRhcmdldCB0Z3QgOiBPcmdhbml6YXRpb24pIHsKICBzcmMuaWQgLT4gdGd0LmlkZW50aWZpZXI7CiAgc3JjLm5hbWUgYXMgdiAtPiB0Z3QubmFtZSA9ICh2Lm90aGVyKTsKICBzcmMudGVsZWNvbSAtPiB0Z3QudGVsZWNvbTsKICBzcmMuYWRkciAtPiB0Z3QuYWRkcmVzczsKfQo=", "subType": "00"}}, "filename": "FULLHEADER_v3.2.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:33:06.438Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a4904846375e3fecadbe"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/LetteraDimissioneOspedaliera", "version": "2.8", "template_id_root": ["2.16.840.1.113883.2.9.10.1.5"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "LetteraDimissioneOspedaliera_v2.8.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:34:08.056Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a4b04846375e3fecadbf"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/ProfiloSanitarioSinteticoBody", "version": "1.8", "template_id_root": ["2.16.840.1.113883.2.9.10.1.4.1.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "ProfiloSanitarioSinteticoBody_v1.8.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:34:40.777Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a4da4846375e3fecadc0"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/RefertodilaboratorioFULLBODY", "version": "2.2", "template_id_root": ["2.16.840.1.113883.2.9.10.1.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "RefertodiLaboratorioFULLBODY_v2.2.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:35:22.062Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a4ff4846375e3fecadc1"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/RefertodiRadiologiaBody", "version": "2.1", "template_id_root": ["2.16.840.1.113883.2.9.10.1.7.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "RefertodiRadiologiaBody_v2.1.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:35:59.952Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a5404846375e3fecadc2"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/RefertodiSpecialisticaAmbulatorialeBody", "version": "2.7", "template_id_root": ["2.16.840.1.113883.2.9.10.1.9.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "RefertodiSpecialisticaAmbulatorialeBody_v2.7.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:37:04.975Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a5704846375e3fecadc3"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/Vaccinazioni", "version": "1.9", "template_id_root": ["2.16.840.1.113883.2.9.10.1.11.1.1", "2.16.840.1.113883.2.9.10.1.11.1.2"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "Vaccinazioni_v1.9.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:37:52.672Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}},{"_id": {"$oid": "6414a58c4846375e3fecadc4"}, "uri": "http://www.ey.com/italy/ig/cda-fhir-maps/StructureMap/verbalePS", "version": "2.3", "template_id_root": ["2.16.840.1.113883.2.9.10.1.6.1"], "content": {"$binary": {"base64": "", "subType": "00"}}, "filename": "VerbaleProntoSoccorso_v2.3.map", "type": "Map", "last_update_date": {"$date": "2023-03-17T17:38:20.658Z"}, "deleted": false, "last_sync": {"$date": "2023-03-17T17:51:01.084Z"}}]